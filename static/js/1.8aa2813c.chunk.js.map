{"version":3,"sources":["pages/memory/useDecodedDataContext.tsx","utils/normalization.ts","pages/memory/vault/BreadcrumbsProvider.tsx","pages/memory/vault/EditingProvider.tsx","pages/memory/vault/BreadcrumbPaths.tsx","pages/memory/vault/cards/textValueFromNode.ts","pages/memory/vault/cards/Boolean/EditBooleanInput.tsx","pages/memory/vault/cards/Date/EditDateInput.tsx","pages/memory/vault/cards/List/EditListInput.tsx","pages/memory/vault/cards/Number/EditNumberInput.tsx","pages/memory/vault/cards/String/EditStringInput.tsx","pages/memory/vault/cards/EditValueInput.tsx","pages/memory/vault/cards/NodeTypeIcon.tsx","pages/memory/vault/cards/Object/useSearchTextOnNodeRecursively.ts","pages/memory/vault/cards/List/ListNodeCardView.tsx","pages/memory/vault/cards/Object/NewFieldDialogButton.tsx","pages/memory/vault/cards/Object/ObjectFieldEditDialog.tsx","pages/memory/vault/cards/Object/ObjectFieldEditButton.tsx","pages/memory/vault/cards/Object/ObjectFieldPopoverEditButton.tsx","pages/memory/vault/cards/Object/useDragObjectField.tsx","pages/memory/vault/cards/Object/ObjectFieldNodeCardView.tsx","pages/memory/vault/cards/Object/ObjectNodeCardView.tsx","pages/memory/vault/cards/CardView.tsx","pages/memory/useDraggableItemsContext.tsx"],"names":["DecodedDataContext","createContext","useDecodedDataContext","context","useContext","Error","RefinedType","normalizeRoot","decodedData","overrides","parsedDate","JSON","parse","title","created","Date","updated","nodes","rootNodeValue","recursivelyAddNodes","rootNode","value","key","parentKey","data","node","uuid","Array","children","map","child","type","List","RegExp","test","isDate","date","String","Number","Boolean","Null","fields","Object","keys","name","getNode","denormalizeRoot","store","stringify","recursivelyDenormalizeNode","nodeKey","toISOString","childKey","object","forEach","field","defaultNodeValue","parentNode","BreadcrumbsContext","useBreadcrumbsContext","BreadcrumbsProvider","useState","breadcrumbs","setBreadcrumbs","Provider","EditingContext","useEditingContext","isEditing","setIsEditing","EditingProvider","BreadcrumbPaths","BreadcrumbItem","s1","onClick","length","objectField","position","all","in","timeout","style","transformOrigin","old","slice","findIndex","b","goBackToFolder","color","variant","className","css","display","alignItems","cursor","textValueFromNode","startKey","date2HumanValue","toString","join","dateFns","DateFnsAdapter","format","EditBooleanInput","onChange","FormControl","fullWidth","InputLabel","Select","label","target","MenuItem","EditDateInput","disableToolbar","inputVariant","KeyboardButtonProps","EditListInput","childNodes","listType","id","labelId","event","newType","newTemplateNode","valueNode","index","EditValueInput","newNode","newValueNode","ButtonGroup","orientation","IconButton","size","disabled","newChildNodes","item","ArrowUpward","fontSize","ArrowDownward","filter","Delete","Button","startIcon","Add","EditNumberInput","TextField","isNaN","EditStringInput","onChangeValue","NodeTypeIcon","props","useSearchTextOnNodeRecursively","searchValue","toLocaleLowerCase","includes","ListNodeCardView","setSearchValue","searchMatches","e","stopPropagation","Input","placeholder","startAdornment","InputAdornment","Typography","Grow","ListItem","button","ListItemIcon","ListItemText","primary","CardView","NewListItemDialogButton","updateNodes","templateNode","isDialogOpen","setIsDialogOpen","draftNode","setDraftNode","Dialog","open","onClose","aria-labelledby","maxWidth","DialogTitle","DialogContent","minWidth","DialogActions","newParentnode","NewFieldDialogButton","theme","useTheme","fieldName","setFieldName","closeAndClearDialog","margin","spacing","right","top","aria-label","Minimize","transform","Close","dividers","minHeight","autoFocus","newParentNode","ObjectFieldEditDialog","objectFieldNode","dialogProps","closeDialog","oldValueNode","oldChildNodes","undefined","oldParentNode","newFieldName","setNewFieldName","originalField","grow","ObjectFieldEditButton","isEditting","setIsEditting","ObjectFieldPopoverEditButton","classes","root","flexShrink","borderRadius","borderInlineStartWidth","borderInlineStartColor","palette","divider","borderInlineStartStyle","insertIntoPlace","draggedItem","droppedItem","hoverStatus","offset","newPosition","f","ObjectFieldNodeCardView","nodeValue","ref","useRef","setHover","DraggableItemsContext","draggableContainerProps","draggable","dropTargetProps","setDraggedItem","isBeingDragged","onDragStart","onDragEnd","zIndex","borderColor","main","left","bottom","borderWidth","shape","borderStyle","borderLeftStyle","borderRightStyle","borderTopStyle","borderBottomStyle","onDrop","sourceParent","targetParent","newSourceParent","onDragOver","current","boundingBox","getBoundingClientRect","halfWidth","width","centerX","pageX","preventDefault","onDragLeave","useDragObjectField","isExpanded","setIsExpanded","anchorRef","React","setOpen","Paper","isOpen","padding","flexGrow","flexBasis","whiteSpace","overflow","textOverflow","ValuePreviewPopover","popoverProps","anchorEl","CopyValueToClipboardButton","onDone","Popover","anchorOrigin","vertical","horizontal","backgroundColor","background","default","navigator","clipboard","writeText","then","FileCopy","ObjectNodeCardView","searchHasFocus","setSearchHasFocus","expandedField","find","flexWrap","OutlinedInput","onKeyDown","v","onFocus","onBlur","s2","flex","userSelect","useDraggableItemsProvider"],"mappings":"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","file":"static/js/1.8aa2813c.chunk.js","sourcesContent":["import { Store, TNode } from \"../../utils/normalization\";\nimport { createContext, useContext } from \"react\";\n\ntype TDecodedDataContext = {\n  encryptionKey?: string;\n  store: Store;\n  updateNodes: ((nodes: TNode[]) => void) | null;\n};\nexport const DecodedDataContext = createContext<TDecodedDataContext | null>(null);\n\nexport default function useDecodedDataContext() {\n  const context = useContext(DecodedDataContext);\n  if (context == null) {\n    throw new Error(\"missing DecodedDataContext.Provider\");\n  }\n  return context;\n}\n","import { v4 as uuid } from \"uuid\";\n\nexport type StoreKey = string;\ntype NodesStore = {\n  [key: string]: TNode;\n};\nexport type Store = {\n  rootNode: RootNode;\n  nodes: NodesStore;\n};\nexport type TNode =\n  | TObjectNode\n  | TListNode\n  | TDateNode\n  | TStringNode\n  | TBooleanNode\n  | TNumberNode\n  | TNullNode;\n\nexport interface TNodeWithKeys<T extends RefinedType> {\n  type: T;\n  key: StoreKey;\n  parentKey: StoreKey;\n}\nexport type TObjectField = {\n  name: string;\n  value: StoreKey;\n  parentKey: StoreKey;\n};\nexport interface TObjectNode extends TNodeWithKeys<RefinedType.Object> {\n  fields: TObjectField[];\n}\nexport interface TListNode extends TNodeWithKeys<RefinedType.List> {\n  children: StoreKey[];\n}\nexport interface TDateNode extends TNodeWithKeys<RefinedType.Date> {\n  date: Date;\n}\nexport interface TStringNode extends TNodeWithKeys<RefinedType.String> {\n  value: string;\n}\nexport interface TBooleanNode extends TNodeWithKeys<RefinedType.Boolean> {\n  value: boolean;\n}\nexport interface TNumberNode extends TNodeWithKeys<RefinedType.Number> {\n  value: number;\n}\nexport interface TNullNode extends TNodeWithKeys<RefinedType.Null> {}\n\nexport enum RefinedType {\n  List = \"List\",\n  Object = \"Object\",\n  Number = \"Number\",\n  Boolean = \"Boolean\",\n  String = \"String\",\n  Date = \"Date\",\n  Null = \"Null\",\n}\n\nexport type RootNode = {\n  title: string;\n  created: Date;\n  updated: Date;\n  value: StoreKey;\n};\n\nexport function normalizeRoot(\n  decodedData: string,\n  overrides: {\n    title?: string;\n  },\n): Store {\n  const parsedDate = JSON.parse(decodedData);\n  const {\n    title,\n    created = new Date(),\n    updated = new Date(),\n    ...values\n  } = parsedDate;\n  const nodes = {};\n  const rootNodeValue = recursivelyAddNodes(nodes, \"ROOT\", values);\n  const store: Store = {\n    rootNode: {\n      title: overrides.title ?? title ?? \"Primary\",\n      created: new Date(created),\n      updated: new Date(updated),\n      value: rootNodeValue.key,\n    },\n    nodes,\n  };\n  return store;\n}\n\nfunction recursivelyAddNodes(\n  nodes: NodesStore,\n  parentKey: StoreKey,\n  data: any,\n): TNode {\n  const node = getNode(nodes, parentKey, data);\n  nodes[node.key] = node;\n  return node;\n}\n\nfunction getNode(nodes: NodesStore, parentKey: StoreKey, value: any): TNode {\n  const key = uuid();\n  if (value instanceof Array) {\n    const childrenNodes = value.map((child: any) =>\n      recursivelyAddNodes(nodes, parentKey, child),\n    );\n    const children = childrenNodes.map((node) => node.key);\n    return { type: RefinedType.List, key, parentKey, children };\n  }\n  switch (typeof value) {\n    case \"string\": {\n      if (isDate(value)) {\n        const date = new Date(value);\n        return { type: RefinedType.Date, key, parentKey, date };\n      } else {\n        return { type: RefinedType.String, key, parentKey, value };\n      }\n    }\n    case \"number\":\n      return { type: RefinedType.Number, key, parentKey, value };\n    case \"boolean\":\n      return { type: RefinedType.Boolean, key, parentKey, value };\n    case \"object\":\n    default: {\n      if (value == null) {\n        return { type: RefinedType.Null, key, parentKey };\n      } else {\n        const fields = Object.keys(value).map((name) => ({\n          name,\n          value: recursivelyAddNodes(nodes, key, value[name]).key,\n          parentKey: key,\n        }));\n        return { type: RefinedType.Object, key, parentKey, fields };\n      }\n    }\n  }\n}\n\nexport function denormalizeRoot(store: Store): string {\n  return JSON.stringify({\n    title: store.rootNode.title,\n    created: store.rootNode.created,\n    updated: store.rootNode.updated,\n    ...recursivelyDenormalizeNode(store.nodes, store.rootNode.value),\n  });\n}\n\nexport function recursivelyDenormalizeNode(\n  nodes: NodesStore,\n  nodeKey: StoreKey,\n): any {\n  const node = nodes[nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return node.value;\n    case RefinedType.Date:\n      return node.date.toISOString();\n    case RefinedType.List:\n      return node.children.map((childKey) =>\n        recursivelyDenormalizeNode(nodes, childKey),\n      );\n    case RefinedType.Null:\n      return null;\n    case RefinedType.Number:\n      return node.value;\n    case RefinedType.Object:\n      const object: { [name: string]: any } = {};\n      node.fields.forEach((field) => {\n        object[field.name] = recursivelyDenormalizeNode(nodes, field.value);\n      });\n      return object;\n    case RefinedType.String:\n      return node.value;\n  }\n}\n\nexport function defaultNodeValue(\n  type: RefinedType,\n  parentNode: TObjectNode | TListNode,\n): TNode {\n  const key = uuid();\n  const parentKey = parentNode.key;\n  switch (type) {\n    case RefinedType.List:\n      return { type, parentKey, key, children: [] };\n    case RefinedType.Boolean:\n      return { type, parentKey, key, value: true };\n    case RefinedType.Date:\n      return { type, parentKey, key, date: new Date() };\n    case RefinedType.Null:\n      return { type, parentKey, key };\n    case RefinedType.Number:\n      return { type, parentKey, key, value: 0 };\n    case RefinedType.Object:\n      return { type, parentKey, key, fields: [] };\n    case RefinedType.String:\n      return { type, parentKey, key, value: \"\" };\n  }\n}\n\nfunction isDate(value: string): boolean {\n  const regex = RegExp(\n    /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/,\n  );\n  return regex.test(value);\n}\n","import {\n  Dispatch,\n  ReactNode,\n  SetStateAction,\n  createContext,\n  useContext,\n  useState,\n} from \"react\";\n\nimport { TObjectField } from \"../../../utils/normalization\";\n\ntype TBreadcrumbsContext = {\n  breadcrumbs: TObjectField[];\n  setBreadcrumbs: Dispatch<SetStateAction<TObjectField[]>>;\n};\nexport const BreadcrumbsContext = createContext<TBreadcrumbsContext | null>(null);\nexport function useBreadcrumbsContext() {\n  const context = useContext(BreadcrumbsContext);\n  if (context == null) {\n    throw new Error(\"missing BreadcrumbsContext.Provider\");\n  }\n  return context;\n}\n\nexport default function BreadcrumbsProvider({ children }: { children: ReactNode }) {\n  const [breadcrumbs, setBreadcrumbs] = useState<TObjectField[]>([]);\n\n  return (\n    <BreadcrumbsContext.Provider value={{ breadcrumbs, setBreadcrumbs }}>\n      {children}\n    </BreadcrumbsContext.Provider>\n  );\n}\n","import {\n  Dispatch,\n  ReactNode,\n  SetStateAction,\n  createContext,\n  useContext,\n  useState,\n} from \"react\";\n\ntype TEditingContext = {\n  isEditing: boolean;\n  setIsEditing: Dispatch<SetStateAction<boolean>>;\n};\nexport const EditingContext = createContext<TEditingContext | null>(null);\nexport function useEditingContext() {\n  const context = useContext(EditingContext);\n  return context ?? { isEditing: false, setIsEditing: () => {} };\n}\n\nexport default function EditingProvider({ children }: { children: ReactNode }) {\n  const [isEditing, setIsEditing] = useState(false);\n  return (\n    <EditingContext.Provider value={{ isEditing, setIsEditing }}>\n      {children}\n    </EditingContext.Provider>\n  );\n}\n","import { Breadcrumbs, Grow, Link, Typography } from \"@material-ui/core\";\nimport React, { ReactNode } from \"react\";\n\nimport { Home } from \"@material-ui/icons\";\nimport { HorizontalSpace } from \"../../core/Spacing\";\nimport { TObjectField } from \"../../../utils/normalization\";\nimport { css } from \"@emotion/css\";\nimport { useBreadcrumbsContext } from \"./BreadcrumbsProvider\";\nimport useDecodedDataContext from \"../useDecodedDataContext\";\nimport { useEditingContext } from \"./EditingProvider\";\n\nexport default function BreadcrumbPaths() {\n  const { store } = useDecodedDataContext();\n  const { isEditing } = useEditingContext();\n  const { breadcrumbs, setBreadcrumbs } = useBreadcrumbsContext();\n  const goBackToHome = () => {\n    setBreadcrumbs([]);\n  };\n  const goBackToFolder = (objectField: TObjectField) => {\n    setBreadcrumbs((old) =>\n      old.slice(0, old.findIndex((b) => b.value === objectField.value) + 1),\n    );\n  };\n  if (isEditing) {\n    return (\n      <Breadcrumbs>\n        <BreadcrumbItem>\n          <Home />\n          <HorizontalSpace s1 />\n          {store.rootNode.title}\n        </BreadcrumbItem>\n      </Breadcrumbs>\n    );\n  }\n  return (\n    <Breadcrumbs>\n      <BreadcrumbItem onClick={breadcrumbs.length === 0 ? null : goBackToHome}>\n        <Home />\n        <HorizontalSpace s1 />\n        {store.rootNode.title}\n      </BreadcrumbItem>\n      {breadcrumbs.map((objectField, position, all) => (\n        <Grow\n          in={true}\n          timeout={position * 200}\n          style={{ transformOrigin: \"0 0 0\" }}\n          key={objectField.value}\n        >\n          <BreadcrumbItem\n            onClick={\n              position < all.length - 1 ? () => goBackToFolder(objectField) : null\n            }\n          >\n            {objectField.name}\n          </BreadcrumbItem>\n        </Grow>\n      ))}\n    </Breadcrumbs>\n  );\n}\n\ntype ItemProps = {\n  onClick?: (() => void) | null;\n  children: ReactNode;\n};\nfunction BreadcrumbItem({ onClick, children }: ItemProps) {\n  return onClick == null ? (\n    <Typography\n      color=\"textPrimary\"\n      variant=\"h6\"\n      className={css({ display: \"flex\", alignItems: \"center\" })}\n    >\n      {children}\n    </Typography>\n  ) : (\n    <Link\n      color=\"inherit\"\n      variant=\"h6\"\n      onClick={onClick}\n      className={css({ display: \"flex\", alignItems: \"center\", cursor: \"pointer\" })}\n    >\n      {children}\n    </Link>\n  );\n}\n","import { RefinedType, Store, StoreKey } from \"../../../../utils/normalization\";\n\nimport DateFnsAdapter from \"@date-io/date-fns\";\n\nexport default function textValueFromNode(store: Store, startKey: StoreKey): string {\n  const node = store.nodes[startKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return node.value ? \"Yes\" : \"No\";\n    case RefinedType.Date:\n      return date2HumanValue(node.date);\n    case RefinedType.Null:\n      return \"Null\";\n    case RefinedType.Number:\n      return node.value.toString();\n    case RefinedType.String:\n      return node.value;\n    case RefinedType.List:\n      return `List [${node.children\n        .map((child) => `\"${textValueFromNode(store, child)}\"`)\n        .join(\", \")}]`;\n    case RefinedType.Object:\n      return `{${node.fields\n        .map(\n          (field) => `\"${field.value}\": \"${textValueFromNode(store, field.value)}\"`,\n        )\n        .join(\", \")}}`;\n  }\n}\n\nconst dateFns = new DateFnsAdapter();\nexport function date2HumanValue(date: Date): string {\n  return dateFns.format(date, \"MMMM do, yyyy\");\n}\n","import { FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport { TBooleanNode, TNode } from \"../../../../../utils/normalization\";\n\nimport React from \"react\";\n\ntype Props = {\n  node: TBooleanNode;\n  onChange(node: TNode): void;\n};\nexport default function EditBooleanInput({ node, onChange }: Props) {\n  return (\n    <FormControl variant=\"filled\" fullWidth>\n      <InputLabel>Value</InputLabel>\n      <Select\n        label=\"Type\"\n        value={node.value}\n        onChange={({ target: { value } }) => {\n          onChange({\n            ...node,\n            value: value === \"true\" ? true : false,\n          });\n        }}\n      >\n        <MenuItem value=\"true\">Yes</MenuItem>\n        <MenuItem value=\"false\">No</MenuItem>\n      </Select>\n    </FormControl>\n  );\n}\n","import { TDateNode, TNode } from \"../../../../../utils/normalization\";\n\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport React from \"react\";\n\ntype Props = {\n  node: TDateNode;\n  onChange(node: TNode): void;\n};\nexport default function EditDateInput({ node, onChange }: Props) {\n  return (\n    <KeyboardDatePicker\n      disableToolbar\n      variant=\"inline\"\n      inputVariant=\"filled\"\n      fullWidth\n      format=\"MM/dd/yyyy\"\n      label=\"Initial Date\"\n      value={node.date}\n      onChange={(date: Date | null) => {\n        onChange({\n          ...node,\n          date: date ?? new Date(),\n        });\n      }}\n      KeyboardButtonProps={{\n        \"aria-label\": \"change date\",\n      }}\n    />\n  );\n}\n","import { Add, ArrowDownward, ArrowUpward, Delete } from \"@material-ui/icons\";\nimport {\n  Button,\n  ButtonGroup,\n  FormControl,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport EditValueInput, { DraftNode } from \"../EditValueInput\";\nimport { HorizontalSpace, VerticalSpace } from \"../../../../core/Spacing\";\nimport {\n  RefinedType,\n  TListNode,\n  TNode,\n  defaultNodeValue,\n} from \"../../../../../utils/normalization\";\n\nimport React from \"react\";\nimport { css } from \"@emotion/css\";\n\ntype Props = {\n  node: TListNode;\n  childNodes?: TNode[];\n  onChange(node: DraftNode): void;\n};\nexport default function EditListInput({ node, childNodes, onChange }: Props) {\n  const listType = childNodes && childNodes.length > 0 ? childNodes[0].type : \"\";\n  return (\n    <FormControl variant=\"filled\" fullWidth>\n      <FormControl variant=\"filled\">\n        <InputLabel id=\"select-type-label\">Of</InputLabel>\n        <Select\n          labelId=\"select-type-label\"\n          value={listType}\n          onChange={(event) => {\n            const newType: RefinedType = event.target.value as RefinedType;\n            const newTemplateNode = defaultNodeValue(newType, node);\n            onChange({\n              valueNode: {\n                ...node,\n                children: [newTemplateNode.key],\n              },\n              childNodes: [newTemplateNode],\n            });\n          }}\n        >\n          <MenuItem value={RefinedType.String}>Text</MenuItem>\n          <MenuItem value={RefinedType.Number}>Number</MenuItem>\n          <MenuItem value={RefinedType.Date}>Date</MenuItem>\n        </Select>\n      </FormControl>\n      <VerticalSpace s1 />\n      {childNodes?.map((child, index, all) => (\n        <div\n          key={child.key}\n          className={css({ display: \"flex\", alignItems: \"center\" })}\n        >\n          <EditValueInput\n            node={{ valueNode: child }}\n            onChange={(newNode) => {\n              const newValueNode = newNode.valueNode;\n              if (newValueNode) {\n                onChange({\n                  valueNode: node,\n                  childNodes: childNodes.map((old) =>\n                    old.key === child.key ? newValueNode : old,\n                  ),\n                });\n              }\n            }}\n          />\n          <HorizontalSpace s1 />\n          <ButtonGroup orientation=\"vertical\">\n            <IconButton\n              size=\"small\"\n              disabled={index === 0}\n              onClick={() => {\n                const newChildNodes = [\n                  ...childNodes.slice(0, index - 1),\n                  child,\n                  ...childNodes.slice(index - 1, index),\n                  ...childNodes.slice(index + 1),\n                ];\n                onChange({\n                  valueNode: {\n                    ...node,\n                    children: newChildNodes.map((item) => item.key),\n                  },\n                  childNodes: newChildNodes,\n                });\n              }}\n            >\n              <ArrowUpward style={{ fontSize: 16 }} />\n            </IconButton>\n            <IconButton\n              size=\"small\"\n              disabled={index === all.length - 1}\n              onClick={() => {\n                const newChildNodes = [\n                  ...childNodes.slice(0, index),\n                  ...childNodes.slice(index + 1, index + 2),\n                  child,\n                  ...childNodes.slice(index + 2),\n                ];\n                onChange({\n                  valueNode: {\n                    ...node,\n                    children: newChildNodes.map((item) => item.key),\n                  },\n                  childNodes: newChildNodes,\n                });\n              }}\n            >\n              <ArrowDownward style={{ fontSize: 16 }} />\n            </IconButton>\n          </ButtonGroup>\n          <IconButton\n            onClick={() => {\n              const newChildNodes = childNodes.filter(\n                (old) => old.key !== child.key,\n              );\n              onChange({\n                valueNode: {\n                  ...node,\n                  children: newChildNodes.map((item) => item.key),\n                },\n                childNodes: newChildNodes,\n              });\n            }}\n          >\n            <Delete />\n          </IconButton>\n        </div>\n      ))}\n      {childNodes && childNodes.length > 0 && (\n        <>\n          <VerticalSpace s1 />\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={() => {\n              if (listType !== \"\") {\n                const newTemplateNode = defaultNodeValue(listType, node);\n                const newChildNodes = [...childNodes, newTemplateNode];\n                onChange({\n                  valueNode: {\n                    ...node,\n                    children: newChildNodes.map((item) => item.key),\n                  },\n                  childNodes: newChildNodes,\n                });\n              }\n            }}\n            startIcon={<Add />}\n          >\n            Add\n          </Button>\n        </>\n      )}\n    </FormControl>\n  );\n}\n","import { TNode, TNumberNode } from \"../../../../../utils/normalization\";\n\nimport React from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\ntype Props = {\n  node: TNumberNode;\n  onChange(node: TNode): void;\n};\nexport default function EditNumberInput({ node, onChange }: Props) {\n  return (\n    <TextField\n      variant=\"filled\"\n      id=\"name\"\n      label=\"Value\"\n      type=\"number\"\n      value={node.value}\n      onChange={(event) => {\n        onChange({\n          ...node,\n          value: !isNaN(Number(event.target.value))\n            ? Number(event.target.value)\n            : node.value,\n        });\n      }}\n      fullWidth\n    />\n  );\n}\n","import { TNode, TStringNode } from \"../../../../../utils/normalization\";\n\nimport React from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\ntype Props = {\n  node: TStringNode;\n  onChange(node: TNode): void;\n};\nexport default function EditStringInput({ node, onChange }: Props) {\n  return (\n    <TextField\n      id=\"name\"\n      label=\"Value\"\n      variant=\"filled\"\n      type=\"string\"\n      value={node.value}\n      onChange={(event) => {\n        onChange({\n          ...node,\n          value: event.target.value,\n        });\n      }}\n      fullWidth\n    />\n  );\n}\n","import { RefinedType, TNode } from \"../../../../utils/normalization\";\n\nimport EditBooleanInput from \"./Boolean/EditBooleanInput\";\nimport EditDateInput from \"./Date/EditDateInput\";\nimport EditListInput from \"./List/EditListInput\";\nimport EditNumberInput from \"./Number/EditNumberInput\";\nimport EditStringInput from \"./String/EditStringInput\";\nimport React from \"react\";\n\nexport type DraftNode = {\n  valueNode: TNode | null;\n  childNodes?: TNode[];\n};\ntype Props = {\n  node: DraftNode;\n  onChange(node: DraftNode): void;\n};\nexport default function EditValueInput({ node, onChange }: Props) {\n  if (node.valueNode === null) {\n    return null;\n  }\n  const onChangeValue = (node: TNode) => onChange({ valueNode: node });\n  switch (node.valueNode.type) {\n    case RefinedType.List:\n      return (\n        <EditListInput\n          node={node.valueNode}\n          childNodes={node.childNodes}\n          onChange={onChange}\n        />\n      );\n    case RefinedType.Boolean:\n      return <EditBooleanInput node={node.valueNode} onChange={onChangeValue} />;\n    case RefinedType.Date:\n      return <EditDateInput node={node.valueNode} onChange={onChangeValue} />;\n    case RefinedType.Null:\n      throw Error(\"Impossible\");\n    case RefinedType.Number:\n      return <EditNumberInput node={node.valueNode} onChange={onChangeValue} />;\n    case RefinedType.Object:\n      return null;\n    case RefinedType.String:\n      return <EditStringInput node={node.valueNode} onChange={onChangeValue} />;\n  }\n}\n","import Filter1OutlinedIcon from \"@material-ui/icons/Filter1Outlined\";\nimport FolderOpenOutlinedIcon from \"@material-ui/icons/FolderOpenOutlined\";\nimport HelpOutlineOutlinedIcon from \"@material-ui/icons/HelpOutlineOutlined\";\nimport ListOutlinedIcon from \"@material-ui/icons/ListOutlined\";\nimport React from \"react\";\nimport { RefinedType } from \"../../../../utils/normalization\";\nimport SubjectOutlinedIcon from \"@material-ui/icons/SubjectOutlined\";\nimport TodayOutlinedIcon from \"@material-ui/icons/TodayOutlined\";\nimport ToggleOnOutlinedIcon from \"@material-ui/icons/ToggleOnOutlined\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\n\nfunction NodeTypeIcon(props: { nodeKey: string }) {\n  const { store } = useDecodedDataContext();\n  const node = store.nodes[props.nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return <ToggleOnOutlinedIcon style={{ fontSize: 20 }} />;\n    case RefinedType.Date:\n      return <TodayOutlinedIcon style={{ fontSize: 20 }} />;\n    case RefinedType.List:\n      return <ListOutlinedIcon style={{ fontSize: 20 }} />;\n    case RefinedType.Null:\n      return <HelpOutlineOutlinedIcon style={{ fontSize: 20 }} />;\n    case RefinedType.Number:\n      return <Filter1OutlinedIcon style={{ fontSize: 20 }} />;\n    case RefinedType.Object:\n      return <FolderOpenOutlinedIcon style={{ fontSize: 20 }} />;\n    case RefinedType.String:\n      return <SubjectOutlinedIcon style={{ fontSize: 20 }} />;\n  }\n}\n\nexport default NodeTypeIcon;\n","import textValueFromNode from \"../textValueFromNode\";\nimport useDecodedDataContext from \"../../../useDecodedDataContext\";\n\ntype FilterFn = (value: string) => boolean;\n\nexport default function useSearchTextOnNodeRecursively(\n  searchValue: string,\n): FilterFn {\n  const { store } = useDecodedDataContext();\n  return function searchMatches(key: string) {\n    if (searchValue === \"\") {\n      return true;\n    }\n    return textValueFromNode(store, key).toLocaleLowerCase().includes(searchValue);\n  };\n}\n","import EditValueInput, { DraftNode } from \"../EditValueInput\";\nimport { Grow, Typography } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport {\n  RefinedType,\n  TListNode,\n  defaultNodeValue,\n} from \"../../../../../utils/normalization\";\n\nimport { Add } from \"@material-ui/icons\";\nimport Button from \"@material-ui/core/Button\";\nimport CardView from \"../CardView\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { HorizontalSpace } from \"../../../../core/Spacing\";\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport NodeTypeIcon from \"../NodeTypeIcon\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Select from \"@material-ui/core/Select\";\nimport { css } from \"@emotion/css\";\nimport useDecodedDataContext from \"../../../useDecodedDataContext\";\nimport { useEditingContext } from \"../../EditingProvider\";\nimport useSearchTextOnNodeRecursively from \"../Object/useSearchTextOnNodeRecursively\";\n\nexport default function ListNodeCardView(props: { node: TListNode }) {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const { isEditing } = useEditingContext();\n  const searchMatches = useSearchTextOnNodeRecursively(searchValue);\n  return (\n    <div>\n      <div onClick={(e) => e.stopPropagation()}>\n        {props.node.children.length > 7 ? (\n          <FormControl>\n            <Input\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              placeholder=\"Search ...\"\n              startAdornment={\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n        ) : null}\n      </div>\n      <List>\n        {!isEditing && props.node.children.length === 0 && (\n          <Typography variant=\"body1\">List is empty</Typography>\n        )}\n        {props.node.children.filter(searchMatches).map((key, position) => (\n          <Grow in={true} timeout={position * 200}>\n            <ListItem button>\n              <ListItemIcon>\n                <NodeTypeIcon nodeKey={key} />\n              </ListItemIcon>\n              <ListItemText primary={<CardView nodeKey={key} />} />\n            </ListItem>\n          </Grow>\n        ))}\n        {isEditing && (\n          <ListItem>\n            <ListItemText\n              onClick={(e) => e.stopPropagation()}\n              primary={<NewListItemDialogButton parentNode={props.node} />}\n            />\n          </ListItem>\n        )}\n      </List>\n    </div>\n  );\n}\n\nfunction NewListItemDialogButton(props: { parentNode: TListNode }) {\n  const { store, updateNodes } = useDecodedDataContext();\n  const templateNode = defaultNodeValue(\n    props.parentNode.children.length > 0\n      ? store.nodes[props.parentNode.children[0]].type\n      : RefinedType.String,\n    props.parentNode,\n  );\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [draftNode, setDraftNode] = useState<DraftNode>({\n    valueNode: templateNode,\n  });\n  if (updateNodes == null) {\n    return null;\n  }\n  return (\n    <>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => setIsDialogOpen(true)}\n        startIcon={<Add />}\n      >\n        Add\n      </Button>\n      <Dialog\n        open={isDialogOpen}\n        onClose={() => setIsDialogOpen(false)}\n        aria-labelledby=\"new-field-dialog-title\"\n        fullWidth\n        maxWidth=\"xs\"\n      >\n        <DialogTitle id=\"new-field-dialog-title\">Add New List Item</DialogTitle>\n        <DialogContent className={css({ display: \"flex\" })}>\n          {props.parentNode.children.length === 0 && (\n            <>\n              <FormControl variant=\"filled\" className={css({ minWidth: 120 })}>\n                <InputLabel id=\"select-type-label\">Type</InputLabel>\n                <Select\n                  labelId=\"select-type-label\"\n                  value={draftNode.valueNode?.type ?? \"\"}\n                  onChange={(event) => {\n                    const newType: RefinedType = event.target.value as RefinedType;\n                    setDraftNode({\n                      valueNode: defaultNodeValue(newType, props.parentNode),\n                    });\n                  }}\n                  fullWidth\n                >\n                  <MenuItem value={RefinedType.String}>Text</MenuItem>\n                  <MenuItem value={RefinedType.Number}>Number</MenuItem>\n                  <MenuItem value={RefinedType.Date}>Date</MenuItem>\n                </Select>\n              </FormControl>\n              <HorizontalSpace s1 />\n            </>\n          )}\n          <EditValueInput node={draftNode} onChange={setDraftNode} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsDialogOpen(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              if (draftNode.valueNode !== null) {\n                const newParentnode = {\n                  ...props.parentNode,\n                  children: [...props.parentNode.children, draftNode.valueNode.key],\n                };\n                updateNodes([\n                  ...(draftNode.childNodes ?? []),\n                  draftNode.valueNode,\n                  newParentnode,\n                ]);\n              }\n              setDraftNode({ valueNode: templateNode });\n              setIsDialogOpen(false);\n            }}\n            color=\"primary\"\n          >\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import { Close, Minimize } from \"@material-ui/icons\";\nimport EditValueInput, { DraftNode } from \"../EditValueInput\";\nimport { HorizontalSpace, VerticalSpace } from \"../../../../core/Spacing\";\nimport { IconButton, useTheme } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport {\n  RefinedType,\n  TObjectNode,\n  defaultNodeValue,\n} from \"../../../../../utils/normalization\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { css } from \"@emotion/css\";\nimport useDecodedDataContext from \"../../../useDecodedDataContext\";\n\nexport default function NewFieldDialogButton(props: { parentNode: TObjectNode }) {\n  const theme = useTheme();\n  const { updateNodes } = useDecodedDataContext();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [draftNode, setDraftNode] = useState<DraftNode>({\n    valueNode: defaultNodeValue(RefinedType.String, props.parentNode),\n  });\n  const [fieldName, setFieldName] = useState<string>(\"\");\n  if (updateNodes === null) {\n    return null;\n  }\n  const closeAndClearDialog = () => {\n    setIsDialogOpen(false);\n    setDraftNode({\n      valueNode: defaultNodeValue(RefinedType.String, props.parentNode),\n    });\n    setFieldName(\"\");\n  };\n  return (\n    <span\n      className={css({ margin: theme.spacing(1), display: \"flex\" })}\n      onClick={(event) => event.stopPropagation()}\n    >\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => setIsDialogOpen(true)}\n        startIcon={<AddIcon />}\n      >\n        Add\n      </Button>\n      <Dialog\n        open={isDialogOpen}\n        onClose={() => setIsDialogOpen(false)}\n        aria-labelledby=\"new-item-dialog-title\"\n        fullWidth\n        maxWidth=\"xs\"\n      >\n        <DialogTitle id=\"new-item-dialog-title\">Add New Item</DialogTitle>\n        <div\n          className={css({\n            position: \"absolute\",\n            display: \"flex\",\n            alignItems: \"center\",\n            right: theme.spacing(1),\n            top: theme.spacing(1),\n          })}\n        >\n          <IconButton aria-label=\"minimize\" onClick={() => setIsDialogOpen(false)}>\n            <Minimize className={css({ transform: \"translate(0px, -7px)\" })} />\n          </IconButton>\n          <IconButton aria-label=\"close\" onClick={closeAndClearDialog}>\n            <Close />\n          </IconButton>\n        </div>\n        <DialogContent dividers className={css({ minHeight: 180 })}>\n          <div className={css({ display: \"flex\" })}>\n            <FormControl variant=\"filled\" className={css({ minWidth: 120 })}>\n              <InputLabel>Type</InputLabel>\n              <Select\n                label=\"Type\"\n                value={draftNode.valueNode?.type ?? \"\"}\n                onChange={(event) => {\n                  const newType: RefinedType = event.target.value as RefinedType;\n                  setDraftNode({\n                    valueNode: defaultNodeValue(newType, props.parentNode),\n                  });\n                }}\n              >\n                <MenuItem value={RefinedType.List}>List</MenuItem>\n                <MenuItem value={RefinedType.Boolean}>Question</MenuItem>\n                <MenuItem value={RefinedType.Date}>Date</MenuItem>\n                <MenuItem value={RefinedType.Number}>Number</MenuItem>\n                <MenuItem value={RefinedType.Object}>Folder</MenuItem>\n                <MenuItem value={RefinedType.String}>Text</MenuItem>\n              </Select>\n            </FormControl>\n            <HorizontalSpace s1 />\n            <TextField\n              label=\"Name\"\n              variant=\"filled\"\n              type=\"string\"\n              autoFocus\n              value={fieldName}\n              onChange={(event) => setFieldName(event.target.value)}\n              fullWidth\n            />\n          </div>\n          <VerticalSpace />\n          <EditValueInput node={draftNode} onChange={setDraftNode} />\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => {\n              if (draftNode.valueNode) {\n                const newParentNode: TObjectNode = {\n                  ...props.parentNode,\n                  fields: [\n                    ...props.parentNode.fields,\n                    {\n                      name: fieldName,\n                      value: draftNode.valueNode.key,\n                      parentKey: draftNode.valueNode.parentKey,\n                    },\n                  ],\n                };\n                updateNodes([\n                  ...(draftNode.childNodes ?? []),\n                  draftNode.valueNode,\n                  newParentNode,\n                ]);\n              }\n              closeAndClearDialog();\n            }}\n            disabled={fieldName === \"\"}\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </span>\n  );\n}\n","import Dialog, { DialogProps } from \"@material-ui/core/Dialog\";\nimport EditValueInput, { DraftNode } from \"../EditValueInput\";\nimport { HorizontalSpace, VerticalSpace } from \"../../../../core/Spacing\";\nimport React, { useState } from \"react\";\nimport { RefinedType, TObjectField } from \"../../../../../utils/normalization\";\n\nimport Button from \"@material-ui/core/Button\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport useDecodedDataContext from \"../../../useDecodedDataContext\";\n\ntype Props = {\n  objectFieldNode: TObjectField;\n  dialogProps: DialogProps;\n  closeDialog: () => void;\n};\nexport default function ObjectFieldEditDialog({\n  objectFieldNode: { name, value, parentKey },\n  dialogProps,\n  closeDialog,\n}: Props) {\n  const { store, updateNodes } = useDecodedDataContext();\n  const oldValueNode = store.nodes[value];\n  const oldChildNodes =\n    oldValueNode.type === RefinedType.List\n      ? oldValueNode.children.map((child) => store.nodes[child])\n      : undefined;\n  const oldParentNode = store.nodes[parentKey];\n  const [draftNode, setDraftNode] = useState<DraftNode>({\n    valueNode: oldValueNode,\n    childNodes: oldChildNodes,\n  });\n  const [newFieldName, setNewFieldName] = useState(name);\n  if (updateNodes === null || oldParentNode.type !== RefinedType.Object) {\n    return null;\n  }\n  return (\n    <Dialog\n      {...dialogProps}\n      aria-labelledby=\"edit-dialog-title\"\n      fullWidth\n      maxWidth=\"xs\"\n    >\n      <DialogTitle id=\"edit-dialog-title\">Edit</DialogTitle>\n      <DialogContent>\n        <TextField\n          label=\"Name\"\n          variant=\"filled\"\n          type=\"string\"\n          autoFocus\n          value={newFieldName}\n          onChange={(event) => setNewFieldName(event.target.value)}\n          fullWidth\n        />\n        <VerticalSpace s1 />\n        <EditValueInput node={draftNode} onChange={setDraftNode} />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            const newParentNode = {\n              ...oldParentNode,\n              fields: oldParentNode.fields.filter(\n                (originalField) => originalField.value !== value,\n              ),\n            };\n            updateNodes([newParentNode]);\n            closeDialog();\n          }}\n        >\n          Delete\n        </Button>\n        <HorizontalSpace s1 grow />\n        <Button onClick={closeDialog}>Cancel</Button>\n        <Button\n          color=\"primary\"\n          onClick={() => {\n            if (draftNode.valueNode) {\n              const newParentNode = {\n                ...oldParentNode,\n                fields: oldParentNode.fields.map((originalField) =>\n                  originalField.value !== value\n                    ? originalField\n                    : { ...originalField, name: newFieldName },\n                ),\n              };\n              updateNodes([\n                ...(draftNode.childNodes ?? []),\n                draftNode.valueNode,\n                newParentNode,\n              ]);\n            }\n            closeDialog();\n          }}\n        >\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport { IconButton } from \"@material-ui/core\";\nimport ObjectFieldEditDialog from \"./ObjectFieldEditDialog\";\nimport { TObjectField } from \"../../../../../utils/normalization\";\n\nexport default function ObjectFieldEditButton(props: TObjectField) {\n  const [isEditting, setIsEditting] = useState(false);\n  return (\n    <>\n      <IconButton\n        onClick={(e) => {\n          e.stopPropagation();\n          setIsEditting(true);\n        }}\n      >\n        <CreateIcon fontSize=\"small\" />\n      </IconButton>\n      {isEditting && (\n        <span onClick={(e) => e.stopPropagation()}>\n          <ObjectFieldEditDialog\n            objectFieldNode={props}\n            dialogProps={{\n              open: isEditting,\n              onClose: () => setIsEditting(false),\n            }}\n            closeDialog={() => setIsEditting(false)}\n          />\n        </span>\n      )}\n    </>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport ObjectFieldEditDialog from \"./ObjectFieldEditDialog\";\nimport { TObjectField } from \"../../../../../utils/normalization\";\nimport { css } from \"@emotion/css\";\nimport { useTheme } from \"@material-ui/core\";\n\nexport default function ObjectFieldPopoverEditButton(props: TObjectField) {\n  const theme = useTheme();\n  const [isEditting, setIsEditting] = useState(false);\n  return (\n    <>\n      <Button\n        classes={{\n          root: css({\n            flexShrink: 0,\n            display: \"flex\",\n            borderRadius: 0,\n            borderInlineStartWidth: 1,\n            borderInlineStartColor: theme.palette.divider,\n            borderInlineStartStyle: \"solid\",\n          }),\n        }}\n        onClick={(e) => {\n          e.stopPropagation();\n          setIsEditting(true);\n        }}\n      >\n        <CreateIcon fontSize=\"small\" />\n      </Button>\n      {isEditting && (\n        <ObjectFieldEditDialog\n          objectFieldNode={props}\n          dialogProps={{\n            open: isEditting,\n            onClose: () => setIsEditting(false),\n          }}\n          closeDialog={() => setIsEditting(false)}\n        />\n      )}\n    </>\n  );\n}\n","import React, { useContext, useRef, useState } from \"react\";\nimport {\n  RefinedType,\n  TObjectField,\n  TObjectNode,\n} from \"../../../../../utils/normalization\";\n\nimport { DraggableItemsContext } from \"../../../useDraggableItemsContext\";\nimport useDecodedDataContext from \"../../../useDecodedDataContext\";\nimport { useEditingContext } from \"../../EditingProvider\";\nimport { useTheme } from \"@material-ui/core\";\n\ntype useDragObjectFieldReturn = {\n  draggableContainerProps: {\n    draggable: boolean;\n    style?: React.CSSProperties;\n    onDragStart?(event: React.DragEvent<any>): void;\n    onDragEnd?(event: React.DragEvent<any>): void;\n  };\n  dropTargetProps: {\n    ref?: React.Ref<HTMLDivElement>;\n    style: React.CSSProperties;\n    onDrop?(event: React.DragEvent<HTMLDivElement>): void;\n    onDragOver?(event: React.DragEvent<HTMLDivElement>): void;\n    onDragLeave?(event: React.DragEvent<HTMLDivElement>): void;\n  };\n};\n\nexport default function useDragObjectField(\n  item: TObjectField,\n): useDragObjectFieldReturn {\n  const ref = useRef<HTMLDivElement>(null);\n  const { isEditing } = useEditingContext();\n  const theme = useTheme();\n  const { store, updateNodes } = useDecodedDataContext();\n  const [hoverStatus, setHover] = useState<\"AFTER\" | \"BEFORE\" | null>(null);\n  const context = useContext(DraggableItemsContext);\n  if (updateNodes === null || context === null || !isEditing) {\n    return {\n      draggableContainerProps: {\n        draggable: false,\n      },\n      dropTargetProps: {\n        style: { display: \"none\" },\n      },\n    };\n  }\n  const { draggedItem, setDraggedItem } = context;\n  const isBeingDragged = item.value === draggedItem?.value;\n  return {\n    draggableContainerProps: {\n      draggable: true,\n      style: { position: \"relative\" },\n      onDragStart: (event) => {\n        setDraggedItem(item);\n        event.stopPropagation();\n      },\n      onDragEnd: () => setDraggedItem(null),\n    },\n    dropTargetProps: {\n      ref,\n      style: {\n        position: \"absolute\",\n        display: draggedItem === null ? \"none\" : undefined,\n        zIndex: 1,\n        borderColor: theme.palette.primary.main,\n        ...(isBeingDragged\n          ? {\n              left: -2,\n              right: -2,\n              top: -2,\n              bottom: -2,\n              borderWidth: 2,\n              borderRadius: theme.shape.borderRadius,\n              borderStyle: \"dashed\",\n            }\n          : {\n              top: 4,\n              bottom: 4,\n              left: -11,\n              right: -11,\n              borderWidth: 4,\n              borderLeftStyle: hoverStatus === \"BEFORE\" ? \"solid\" : \"none\",\n              borderRightStyle: hoverStatus === \"AFTER\" ? \"solid\" : \"none\",\n              borderTopStyle: \"none\",\n              borderBottomStyle: \"none\",\n            }),\n      },\n      onDrop: () => {\n        if (hoverStatus === null || draggedItem === null) {\n          return;\n        }\n        const sourceParent = store.nodes[draggedItem.parentKey];\n        const targetParent = store.nodes[item.parentKey];\n        if (\n          sourceParent.type !== RefinedType.Object ||\n          targetParent.type !== RefinedType.Object\n        ) {\n          // we can only drag a field into an object from an object\n          return;\n        }\n\n        // remove item from source\n        const newSourceParent: TObjectNode = {\n          ...sourceParent,\n          fields: sourceParent.fields.filter((f) => f.value !== draggedItem.value),\n        };\n        if (item.parentKey === draggedItem.parentKey) {\n          updateNodes([\n            insertIntoPlace(newSourceParent, draggedItem, item, hoverStatus),\n          ]);\n        } else {\n          updateNodes([\n            newSourceParent,\n            insertIntoPlace(targetParent, draggedItem, item, hoverStatus),\n          ]);\n        }\n        setHover(null);\n        setDraggedItem(null);\n      },\n      onDragOver: (event) => {\n        if (ref.current == null || isBeingDragged) {\n          return;\n        }\n        const boundingBox = ref.current.getBoundingClientRect();\n        const halfWidth = boundingBox.width / 2;\n        const centerX = boundingBox.left + halfWidth;\n        setHover(event.pageX > centerX ? \"AFTER\" : \"BEFORE\");\n        event.preventDefault();\n      },\n      onDragLeave: () => {\n        setHover(null);\n      },\n    },\n  };\n}\n\nfunction insertIntoPlace(\n  parentNode: TObjectNode,\n  draggedItem: TObjectField,\n  droppedItem: TObjectField,\n  hoverStatus: \"AFTER\" | \"BEFORE\",\n): TObjectNode {\n  const offset = hoverStatus === \"AFTER\" ? 1 : 0;\n  const newPosition =\n    parentNode.fields.findIndex((f) => f.value === droppedItem.value) + offset;\n  return {\n    ...parentNode,\n    fields: [\n      ...parentNode.fields.slice(0, newPosition),\n      draggedItem,\n      ...parentNode.fields.slice(newPosition),\n    ],\n  };\n}\n","import {\n  Button,\n  Grow,\n  Paper,\n  Popover,\n  PopoverProps,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport React, { ReactNode, useRef, useState } from \"react\";\nimport { RefinedType, TObjectField } from \"../../../../../utils/normalization\";\n\nimport CardView from \"../CardView\";\nimport { FileCopy } from \"@material-ui/icons\";\nimport { HorizontalSpace } from \"../../../../core/Spacing\";\nimport NodeTypeIcon from \"../NodeTypeIcon\";\nimport ObjectFieldEditButton from \"./ObjectFieldEditButton\";\nimport ObjectFieldPopoverEditButton from \"./ObjectFieldPopoverEditButton\";\nimport { css } from \"@emotion/css\";\nimport textValueFromNode from \"../textValueFromNode\";\nimport { useBreadcrumbsContext } from \"../../BreadcrumbsProvider\";\nimport useDecodedDataContext from \"../../../useDecodedDataContext\";\nimport useDragObjectField from \"./useDragObjectField\";\nimport { useEditingContext } from \"../../EditingProvider\";\n\ntype Props = {\n  objectField: TObjectField;\n  position: number;\n};\nexport default function ObjectFieldNodeCardView({ objectField, position }: Props) {\n  const { isEditing } = useEditingContext();\n  const theme = useTheme();\n  const { setBreadcrumbs } = useBreadcrumbsContext();\n  const { store } = useDecodedDataContext();\n  const nodeValue = store.nodes[objectField.value];\n  const { draggableContainerProps, dropTargetProps } = useDragObjectField(\n    objectField,\n  );\n  const [isExpanded, setIsExpanded] = useState(false);\n  const anchorRef = useRef(null);\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <Grow in={true} timeout={position * 200} style={{ transformOrigin: \"0 0 0\" }}>\n        <Paper\n          {...draggableContainerProps}\n          variant=\"outlined\"\n          onClick={(e) => {\n            e.stopPropagation();\n            if (\n              nodeValue.type === RefinedType.Object ||\n              nodeValue.type === RefinedType.List\n            ) {\n              if (isEditing) {\n                setIsExpanded((old) => !old);\n              } else {\n                setBreadcrumbs((old) => [...old, objectField]);\n              }\n            } else {\n              setOpen((isOpen) => !isOpen);\n            }\n          }}\n          ref={anchorRef}\n          classes={{\n            root: css([\n              {\n                maxWidth: 450,\n                cursor: \"pointer\",\n                margin: theme.spacing(1),\n                padding: `${theme.spacing(1)}px ${theme.spacing(2)}px`,\n              },\n              !isEditing && { flexGrow: 1, flexBasis: 150 },\n              isEditing && isExpanded && { flexBasis: \"100%\", maxWidth: \"100%\" },\n            ]),\n          }}\n        >\n          <div {...dropTargetProps} />\n          <div className={css({ display: \"flex\", alignItems: \"center\" })}>\n            <NodeTypeIcon nodeKey={objectField.value} />\n            <HorizontalSpace s1 />\n            <Typography\n              variant=\"body2\"\n              classes={{\n                root: css({\n                  whiteSpace: \"nowrap\",\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                }),\n              }}\n            >\n              {objectField.name}\n            </Typography>\n            <HorizontalSpace s1 grow />\n            {isEditing && isExpanded && <ObjectFieldEditButton {...objectField} />}\n          </div>\n          {isExpanded && isEditing && <CardView nodeKey={objectField.value} />}\n        </Paper>\n      </Grow>\n      <ValuePreviewPopover\n        popoverProps={{\n          open,\n          onClose: () => setOpen(false),\n          anchorEl: anchorRef.current,\n        }}\n        objectField={objectField}\n      >\n        {isEditing && <ObjectFieldPopoverEditButton {...objectField} />}\n        <CopyValueToClipboardButton\n          objectField={objectField}\n          onDone={() => setOpen(false)}\n        />\n      </ValuePreviewPopover>\n    </>\n  );\n}\n\ntype ValuePreviewPopoverProps = {\n  children?: ReactNode;\n  popoverProps: PopoverProps;\n  objectField: TObjectField;\n};\nfunction ValuePreviewPopover({\n  children,\n  popoverProps,\n  objectField,\n}: ValuePreviewPopoverProps) {\n  const { store } = useDecodedDataContext();\n  const theme = useTheme();\n  return (\n    <Popover\n      anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\n      transformOrigin={{ vertical: \"top\", horizontal: \"left\" }}\n      {...popoverProps}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <Paper\n        className={css({\n          maxWidth: 450,\n          display: \"flex\",\n          backgroundColor: theme.palette.background.default,\n        })}\n      >\n        <span className={css({ margin: theme.spacing(2), minWidth: 150 })}>\n          {textValueFromNode(store, objectField.value)}\n        </span>\n        <HorizontalSpace s1 grow />\n        {children}\n      </Paper>\n    </Popover>\n  );\n}\n\ntype CopyValueToClipboardButtonProps = {\n  objectField: TObjectField;\n  onDone: () => void;\n};\nfunction CopyValueToClipboardButton({\n  objectField,\n  onDone,\n}: CopyValueToClipboardButtonProps) {\n  const theme = useTheme();\n  const { store } = useDecodedDataContext();\n  return (\n    <Button\n      className={css({\n        flexShrink: 0,\n        display: \"flex\",\n        borderRadius: \"0 4px 4px 0\",\n        borderInlineStartWidth: 1,\n        borderInlineStartColor: theme.palette.divider,\n        borderInlineStartStyle: \"solid\",\n      })}\n      onClick={(e) => {\n        navigator.clipboard\n          .writeText(textValueFromNode(store, objectField.value))\n          .then(onDone);\n      }}\n    >\n      <FileCopy fontSize=\"small\" />\n    </Button>\n  );\n}\n","import { OutlinedInput, Typography } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport CardView from \"../CardView\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport NewFieldDialogButton from \"./NewFieldDialogButton\";\nimport ObjectFieldNodeCardView from \"./ObjectFieldNodeCardView\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { TObjectNode } from \"../../../../../utils/normalization\";\nimport { VerticalSpace } from \"../../../../core/Spacing\";\nimport { css } from \"@emotion/css\";\nimport { useBreadcrumbsContext } from \"../../BreadcrumbsProvider\";\nimport { useEditingContext } from \"../../EditingProvider\";\nimport useSearchTextOnNodeRecursively from \"./useSearchTextOnNodeRecursively\";\n\ntype Props = {\n  node: TObjectNode;\n};\nexport default function ObjectNodeCardView({ node }: Props) {\n  const { isEditing } = useEditingContext();\n  const { breadcrumbs } = useBreadcrumbsContext();\n  const [searchValue, setSearchValue] = useState(\"\");\n  const searchMatches = useSearchTextOnNodeRecursively(searchValue);\n  const [searchHasFocus, setSearchHasFocus] = useState(false);\n  const expandedField = node.fields.find(\n    (field) => breadcrumbs.findIndex((f) => f.value === field.value) >= 0,\n  );\n  if (expandedField != null) {\n    return (\n      <>\n        <VerticalSpace s1 />\n        <div\n          onClick={(event) => event.stopPropagation()}\n          className={css({\n            display: \"flex\",\n            flexWrap: \"wrap\",\n          })}\n        >\n          <CardView nodeKey={expandedField.value} />\n        </div>\n      </>\n    );\n  }\n  return (\n    <>\n      <VerticalSpace s1 />\n      {node.fields.length > 7 && (\n        <>\n          <FormControl\n            size=\"small\"\n            variant=\"outlined\"\n            fullWidth={searchHasFocus || searchValue !== \"\"}\n          >\n            <OutlinedInput\n              onKeyDown={(event) => {\n                if (event.key === \" \") {\n                  // You've seen nothing\n                  event.preventDefault();\n                  setSearchValue((v) => v + \" \");\n                  // I will stop remove this mess later\n                }\n              }}\n              onFocus={() => setSearchHasFocus(true)}\n              onBlur={() => setSearchHasFocus(false)}\n              placeholder=\"Search ...\"\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              startAdornment={\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n          <VerticalSpace s2 />\n        </>\n      )}\n      {!isEditing && node.fields.length === 0 ? (\n        <Typography variant=\"body1\">Folder is empty</Typography>\n      ) : (\n        <div\n          className={css({\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            margin: \"-6px\",\n          })}\n        >\n          {node.fields\n            .filter(\n              (field) =>\n                field.name\n                  .toLocaleLowerCase()\n                  .includes(searchValue.toLocaleLowerCase()) ||\n                searchMatches(field.value),\n            )\n            .map((field, index) => (\n              <ObjectFieldNodeCardView\n                objectField={field}\n                position={index}\n                key={field.value}\n              />\n            ))}\n          {isEditing && <NewFieldDialogButton parentNode={node} />}\n          <span className={css({ flex: \"1 0 50%\", minWidth: 320 })} />\n        </div>\n      )}\n    </>\n  );\n}\n","import ListNodeCardView from \"./List/ListNodeCardView\";\nimport ObjectNodeCardView from \"./Object/ObjectNodeCardView\";\nimport React from \"react\";\nimport { RefinedType } from \"../../../../utils/normalization\";\nimport { Typography } from \"@material-ui/core\";\nimport { css } from \"@emotion/css\";\nimport textValueFromNode from \"./textValueFromNode\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\n\ntype Props = { nodeKey: string };\nexport default function CardView({ nodeKey }: Props) {\n  const { store } = useDecodedDataContext();\n  const node = store.nodes[nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n    case RefinedType.Date:\n    case RefinedType.Null:\n    case RefinedType.Number:\n    case RefinedType.String:\n      return (\n        <Typography\n          variant=\"body2\"\n          color=\"textSecondary\"\n          display=\"inline\"\n          onClick={(e) => e.stopPropagation()}\n          className={css({ userSelect: \"text\", minWidth: 20 })}\n        >\n          {textValueFromNode(store, nodeKey)}\n        </Typography>\n      );\n    case RefinedType.Object:\n      return <ObjectNodeCardView node={node} />;\n    case RefinedType.List:\n      return <ListNodeCardView node={node} />;\n  }\n}\n","import { createContext, useContext, useState } from \"react\";\n\nimport { TObjectField } from \"../../utils/normalization\";\n\ntype TDraggableItemsContext = {\n  draggedItem: TObjectField | null;\n  setDraggedItem(item: TObjectField | null): void;\n};\nexport const DraggableItemsContext = createContext<TDraggableItemsContext | null>(\n  null,\n);\nexport function useDraggableItemsContext() {\n  const context = useContext(DraggableItemsContext);\n  if (context == null) {\n    throw new Error(\"missing DraggableItemsContext.Provider\");\n  }\n  return context;\n}\n\nexport default function useDraggableItemsProvider() {\n  const [draggedItem, setDraggedItem] = useState<TObjectField | null>(null);\n  return {\n    draggedItem,\n    setDraggedItem,\n  };\n}\n"],"sourceRoot":""}