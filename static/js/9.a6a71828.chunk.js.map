{"version":3,"sources":["utils/normalization.ts","pages/memory/useDecodedDataContext.tsx","utils/data-manipulation.ts","utils/encryption.ts","pages/memory/cards/Date/DateNodeCardView.tsx","pages/memory/cards/Boolean/BooleanNodeCardView.tsx","pages/memory/cards/Boolean/EditBooleanInput.tsx","pages/memory/cards/Date/EditDateInput.tsx","pages/memory/cards/Number/EditNumberInput.tsx","pages/memory/cards/String/EditStringInput.tsx","pages/memory/cards/EditValueInput.tsx","pages/memory/cards/NodeTypeIcon.tsx","pages/memory/cards/Object/useSearchTextOnNodeRecursively.ts","pages/memory/cards/List/ListNodeCardView.tsx","pages/memory/cards/Null/NullNodeCardView.tsx","pages/memory/cards/Number/NumberNodeCardView.tsx","pages/memory/cards/Object/NewFieldDialogButton.tsx","pages/memory/cards/Object/useDragObjectField.tsx","pages/memory/cards/Object/ObjectFieldNodeCardView.tsx","pages/memory/cards/Object/ObjectNodeCardView.tsx","pages/memory/cards/String/StringNodeCardView.tsx","pages/memory/cards/CardView.tsx","pages/memory/useDraggableItemsContext.tsx","components/BlurredBar.tsx","pages/memory/cards/CardInfo.tsx","pages/memory/cards/CardRoot.tsx","pages/memory/create/MemoryVaultCreateForm.tsx","pages/memory/create/DragAndDrop.tsx","pages/memory/cards/PreviewCardRoot.tsx","pages/memory/MemoryPage.tsx"],"names":["RefinedType","ROOT_KEY","normalizeRoot","decodedData","overrides","parsedDate","JSON","parse","title","created","Date","updated","key","encryptionKey","values","nodes","rootNodeValue","recursivelyAddNodes","rootNode","value","parentKey","data","node","uuid","Array","children","map","child","type","List","RegExp","test","isDate","date","String","Number","Boolean","Null","fields","Object","keys","name","getNode","denormalizeRoot","store","stringify","recursivelyDenormalizeNode","nodeKey","toISOString","childKey","object","forEach","field","defaultNodeValue","parentNode","DecodedDataContext","createContext","useDecodedDataContext","context","useContext","Error","arraybuffer2stringUTF16","buf","fromCharCode","apply","Uint16Array","string2arraybufferUTF16","str","bufffer","ArrayBuffer","length","bufView","i","strLen","charCodeAt","arraybuffer2stringUTF8","Uint8Array","arraybuffer2base64UTF8","aUTF8CodeUnits","prototype","call","_","idx","arr","btoa","buffer","btoaUTF8","base642arraybufferUTF8","str64","string2arraybufferUTF8","sBinaryString","atob","aBinaryView","atobUTF8","arraybuffer2base64UTF16","aUTF16CodeUnits","btoaUTF16","base642arraybufferUTF16","atobUTF16","plainText","a","iv","window","crypto","getRandomValues","subtle","importKey","cryptoKey","encrypt","cypher","split","encryptedMessage","decrypt","decryptedData","createKey","generateKey","exportKey","exportedKey","isKeyValid","useDataAsStore","useState","setStore","useEffect","updateNodes","newNodes","newStore","useDataDecryption","initialData","setDecryptedData","hasFailed","setHasFailed","then","catch","encryptData","onComplete","DateNodeCardView","props","date2HumanValue","year","getFullYear","toString","month","getMonth","padStart","day","getDate","BooleanNodeCardView","Typography","variant","color","component","EditBooleanInput","onChange","FormControl","fullWidth","InputLabel","Select","label","target","MenuItem","EditDateInput","disableToolbar","inputVariant","format","KeyboardButtonProps","EditNumberInput","TextField","id","event","isNaN","EditStringInput","EditValueInput","NodeTypeIcon","useSearchTextOnNodeRecursively","searchValue","searchTextOnNodeRecursively","toLocaleLowerCase","startKey","includes","some","ListNodeCardView","setSearchValue","searchMatches","onClick","e","stopPropagation","Input","placeholder","startAdornment","InputAdornment","position","filter","ListItem","button","ListItemIcon","ListItemText","primary","CardView","NewListItemDialogButton","templateNode","isDialogOpen","setIsDialogOpen","valueNode","setValueNode","Button","size","startIcon","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","labelId","newType","DialogActions","newParentnode","NullNodeCardView","NumberNodeCardView","NewFieldDialogButton","theme","useTheme","fieldName","setFieldName","closeAndClearDialog","style","display","alignItems","IconButton","fontSize","maxWidth","right","spacing","top","aria-label","Minimize","transform","Close","dividers","minHeight","minWidth","width","autoFocus","height","newParentNode","insertIntoPlace","draggedItem","droppedItem","hoverStatus","offset","newPosition","findIndex","f","slice","ObjectFieldNodeCardView","item","ref","useRef","setHover","DraggableItemsContext","draggableContainerProps","draggable","dropTargetProps","setDraggedItem","isBeingDragged","onDragStart","onDragEnd","undefined","zIndex","borderColor","palette","main","left","bottom","borderWidth","borderRadius","shape","borderStyle","borderLeftStyle","borderRightStyle","borderTopStyle","borderBottomStyle","onDrop","sourceParent","targetParent","newSourceParent","onDragOver","current","boundingBox","getBoundingClientRect","halfWidth","centerX","pageX","preventDefault","onDragLeave","useDragObjectField","needsToExpand","useNeedsToExpand","isMinimized","setIsMinimized","Grid","xs","sm","md","lg","xl","Card","v","CardActionArea","disableRipple","CardContent","gutterBottom","whiteSpace","overflow","textOverflow","flexGrow","EditFieldDialog","BlurredBar","marginTop","newFieldName","setNewFieldName","oldValueNode","oldParentNode","isEditting","setIsEditting","originalField","ObjectNodeCardView","searchHasFocus","setSearchHasFocus","OutlinedInput","onKeyDown","onFocus","onBlur","container","StringNodeCardView","userSelect","useDraggableItemsProvider","backgroundColor","text","opacity","CardInfo","isKeyHidden","setIsKeyHidden","subheader","placement","onDoubleClick","href","download","element","document","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","CardRoot","isReadOnly","initialValues","draggableData","Provider","padding","arrow","DataOptions","DragAndDrop","dataTransfer","files","onDragEnter","MemoryVaultCreateForm","standardProposal","onSubmit","onCancel","initialCardData","cardData","setCardData","CreateCardTitleInput","setTitle","newTitle","newCardData","CreateCardKeyInput","setEncryptionKey","newEncryptionKey","CreateCardDataSection","setInitialData","newInitialData","align","disabled","Add","margin","autoComplete","file","readFile","error","required","InputProps","endAdornment","Tooltip","Cached","expanded","setExpanded","STANDARD","dataOption","selectDataOption","encryptedData","setEncryptedData","justifyContent","aria-expanded","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","FormLabel","RadioGroup","CUSTOM","EMPTY","FormControlLabel","control","Radio","version","HelpOutline","textTransform","outlineWidth","outlineStyle","outlineColor","secondary","GetApp","Done","hidden","onDone","reader","FileReader","onloadend","result","readAsText","PreviewCardRoot","Paper","background","default","QUERY","gql","MemoryPage","cardFromUrl","search","useLocation","params","queryString","isOpen","readOnly","cardProps","join","useCardFromUrl","cards","setCards","previewCard","setPreviewCard","allCards","isCreating","setIsCreating","useQuery","MemoryPageLayout","leftNav","card","oldCards","c","Drafts","Mail","primaryTypographyProps","secondaryTypographyProps","Divider","newCard","old","flex","borderRightColor","divider","borderRightWidth"],"mappings":"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","file":"static/js/9.a6a71828.chunk.js","sourcesContent":["import { v4 as uuid } from \"uuid\";\n\nexport type StoreKey = string;\ntype NodesStore = {\n  [key: string]: TNode;\n};\nexport type Store = {\n  rootNode: RootNode;\n  nodes: NodesStore;\n};\nexport type TNode =\n  | TObjectNode\n  | TListNode\n  | TDateNode\n  | TStringNode\n  | TBooleanNode\n  | TNumberNode\n  | TNullNode;\n\nexport interface TNodeWithKeys<T extends RefinedType> {\n  type: T;\n  key: StoreKey;\n  parentKey: StoreKey;\n}\nexport type TObjectField = {\n  name: string;\n  value: StoreKey;\n  parentKey: StoreKey;\n};\nexport interface TObjectNode extends TNodeWithKeys<RefinedType.Object> {\n  fields: TObjectField[];\n}\nexport interface TListNode extends TNodeWithKeys<RefinedType.List> {\n  children: StoreKey[];\n}\nexport interface TDateNode extends TNodeWithKeys<RefinedType.Date> {\n  date: Date;\n}\nexport interface TStringNode extends TNodeWithKeys<RefinedType.String> {\n  value: string;\n}\nexport interface TBooleanNode extends TNodeWithKeys<RefinedType.Boolean> {\n  value: boolean;\n}\nexport interface TNumberNode extends TNodeWithKeys<RefinedType.Number> {\n  value: number;\n}\nexport interface TNullNode extends TNodeWithKeys<RefinedType.Null> {}\n\nexport enum RefinedType {\n  List = \"List\",\n  Object = \"Object\",\n  Number = \"Number\",\n  Boolean = \"Boolean\",\n  String = \"String\",\n  Date = \"Date\",\n  Null = \"Null\",\n}\n\nconst ROOT_KEY = \"ROOT\";\nexport type RootNode = {\n  title: string;\n  encryptionKey: string;\n  created: Date;\n  updated: Date;\n  key: string;\n  value: StoreKey;\n};\n\nexport function normalizeRoot(\n  decodedData: string,\n  overrides: {\n    encryptionKey?: string;\n    title?: string;\n  },\n): Store {\n  const parsedDate = JSON.parse(decodedData);\n  const {\n    title,\n    created = new Date(),\n    updated = new Date(),\n    key = ROOT_KEY,\n    encryptionKey,\n    ...values\n  } = parsedDate;\n  const nodes = {};\n  const rootNodeValue = recursivelyAddNodes(nodes, ROOT_KEY, values);\n  const store: Store = {\n    rootNode: {\n      title: overrides.title ?? title ?? \"Primary\",\n      encryptionKey: overrides.encryptionKey ?? encryptionKey,\n      created: new Date(created),\n      updated: new Date(updated),\n      key,\n      value: rootNodeValue.key,\n    },\n    nodes,\n  };\n  return store;\n}\n\nfunction recursivelyAddNodes(\n  nodes: NodesStore,\n  parentKey: StoreKey,\n  data: any,\n): TNode {\n  const node = getNode(nodes, parentKey, data);\n  nodes[node.key] = node;\n  return node;\n}\n\nfunction getNode(nodes: NodesStore, parentKey: StoreKey, value: any): TNode {\n  const key = uuid();\n  if (value instanceof Array) {\n    const childrenNodes = value.map((child: any) =>\n      recursivelyAddNodes(nodes, parentKey, child),\n    );\n    const children = childrenNodes.map((node) => node.key);\n    return { type: RefinedType.List, key, parentKey, children };\n  }\n  switch (typeof value) {\n    case \"string\": {\n      if (isDate(value)) {\n        const date = new Date(value);\n        return { type: RefinedType.Date, key, parentKey, date };\n      } else {\n        return { type: RefinedType.String, key, parentKey, value };\n      }\n    }\n    case \"number\":\n      return { type: RefinedType.Number, key, parentKey, value };\n    case \"boolean\":\n      return { type: RefinedType.Boolean, key, parentKey, value };\n    case \"object\":\n    default: {\n      if (value == null) {\n        return { type: RefinedType.Null, key, parentKey };\n      } else {\n        const fields = Object.keys(value).map((name) => ({\n          name,\n          value: recursivelyAddNodes(nodes, key, value[name]).key,\n          parentKey: key,\n        }));\n        return { type: RefinedType.Object, key, parentKey, fields };\n      }\n    }\n  }\n}\n\nexport function denormalizeRoot(store: Store): string {\n  return JSON.stringify({\n    title: store.rootNode.title,\n    created: store.rootNode.created,\n    updated: store.rootNode.updated,\n    key: store.rootNode.key,\n    ...recursivelyDenormalizeNode(store.nodes, store.rootNode.value),\n  });\n}\n\nexport function recursivelyDenormalizeNode(\n  nodes: NodesStore,\n  nodeKey: StoreKey,\n): any {\n  const node = nodes[nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return node.value;\n    case RefinedType.Date:\n      return node.date.toISOString();\n    case RefinedType.List:\n      return node.children.map((childKey) =>\n        recursivelyDenormalizeNode(nodes, childKey),\n      );\n    case RefinedType.Null:\n      return null;\n    case RefinedType.Number:\n      return node.value;\n    case RefinedType.Object:\n      const object: { [name: string]: any } = {};\n      node.fields.forEach((field) => {\n        object[field.name] = recursivelyDenormalizeNode(nodes, field.value);\n      });\n      return object;\n    case RefinedType.String:\n      return node.value;\n  }\n}\n\nexport function defaultNodeValue(\n  type: RefinedType,\n  parentNode: TObjectNode | TListNode,\n): TNode {\n  const key = uuid();\n  const parentKey = parentNode.key;\n  switch (type) {\n    case RefinedType.List:\n      return { type, parentKey, key, children: [] };\n    case RefinedType.Boolean:\n      return { type, parentKey, key, value: true };\n    case RefinedType.Date:\n      return { type, parentKey, key, date: new Date() };\n    case RefinedType.Null:\n      return { type, parentKey, key };\n    case RefinedType.Number:\n      return { type, parentKey, key, value: 0 };\n    case RefinedType.Object:\n      return { type, parentKey, key, fields: [] };\n    case RefinedType.String:\n      return { type, parentKey, key, value: \"\" };\n  }\n}\n\nfunction isDate(value: string): boolean {\n  const regex = RegExp(\n    /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/,\n  );\n  return regex.test(value);\n}\n","import { Store, TNode } from \"../../utils/normalization\";\nimport { createContext, useContext } from \"react\";\n\ntype TDecodedDataContext = {\n  store: Store;\n  updateNodes: ((nodes: TNode[]) => void) | null;\n};\nexport const DecodedDataContext = createContext<TDecodedDataContext | null>(null);\n\nexport default function useDecodedDataContext() {\n  const context = useContext(DecodedDataContext);\n  if (context == null) {\n    throw new Error(\"missing DecodedDataContext.Provider\");\n  }\n  return context;\n}\n","/**\n * ArrayBuffer to String UTF 16 and 8 helpers\n */\nexport function arraybuffer2stringUTF16(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\n\nexport function string2arraybufferUTF16(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  const bufView = new Uint16Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\nexport function arraybuffer2stringUTF8(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint8Array(buf) as any);\n}\n\nexport function string2arraybufferUTF8(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\n/**\n * Base 64 <-> array buffer UTF 16 and 8\n */\nexport function arraybuffer2base64UTF8(buf: ArrayBuffer): string {\n  return btoaUTF8(arraybuffer2stringUTF8(buf));\n}\n\nexport function base642arraybufferUTF8(str64: string): ArrayBuffer {\n  return string2arraybufferUTF8(atobUTF8(str64));\n}\n\nexport function arraybuffer2base64UTF16(buf: ArrayBuffer): string {\n  return btoaUTF16(arraybuffer2stringUTF16(buf));\n}\n\nexport function base642arraybufferUTF16(str64: string): ArrayBuffer {\n  return string2arraybufferUTF16(atobUTF16(str64));\n}\n\n/**\n * Base 64  <-> String UTF 16 and 8\n */\n\nfunction btoaUTF16(str: string): string {\n  const aUTF16CodeUnits = new Uint16Array(str.length);\n  Array.prototype.forEach.call(aUTF16CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF16CodeUnits.buffer));\n}\n\nfunction atobUTF16(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF16(aBinaryView.buffer);\n}\n\nfunction btoaUTF8(str: string): string {\n  const aUTF8CodeUnits = new Uint8Array(str.length);\n  Array.prototype.forEach.call(aUTF8CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF8CodeUnits.buffer));\n}\n\nfunction atobUTF8(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF8(aBinaryView.buffer);\n}\n","/**\n * Set of methods used to encrypt and decrypt the data, all operating on base 64\n * TODO: remove redundant conversions for more direct mappings.\n */\n\nimport { Store, TNode, denormalizeRoot, normalizeRoot } from \"./normalization\";\nimport {\n  arraybuffer2base64UTF16,\n  arraybuffer2base64UTF8,\n  arraybuffer2stringUTF16,\n  base642arraybufferUTF16,\n  base642arraybufferUTF8,\n  string2arraybufferUTF16,\n} from \"./data-manipulation\";\nimport { useEffect, useState } from \"react\";\n\n/**\n * Encrypts the data together with iv on base 64 format\n * @param {string} plainText: plain UTF 16 text\n * @param {string} key: encrypted on base 64 format\n */\nexport async function encrypt(plainText: string, key: string): Promise<string> {\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const cypher = await window.crypto.subtle.encrypt(\n    { name: \"AES-GCM\", iv: iv },\n    cryptoKey,\n    string2arraybufferUTF16(plainText),\n  );\n\n  // join iv and message\n  return `${arraybuffer2base64UTF8(iv)}!${arraybuffer2base64UTF16(cypher)}`;\n}\n\n/**\n * Decrypts the data to plain text\n * @param {string} data: encrypted on base 64 format\n * @param {string} key: encrypted on base 64 format\n */\nexport async function decrypt(data: string, key: string): Promise<string> {\n  // split iv from message\n  const [iv, encryptedMessage] = data.split(\"!\");\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const decryptedData = await window.crypto.subtle.decrypt(\n    { name: \"AES-GCM\", iv: base642arraybufferUTF8(iv) },\n    cryptoKey,\n    base642arraybufferUTF16(encryptedMessage),\n  );\n  return arraybuffer2stringUTF16(decryptedData);\n}\n\n/**\n * Creates an unique base 64 key for all encryptions\n */\nexport async function createKey(): Promise<string> {\n  const key = await window.crypto.subtle.generateKey(\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const exportedKey = await window.crypto.subtle.exportKey(\"raw\", key);\n  return arraybuffer2base64UTF16(exportedKey);\n}\n\nexport function isKeyValid(key: string): boolean {\n  const base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n  return base64regex.test(key) && key.length === 44;\n}\n\nexport function useDataAsStore(\n  decodedData: string | null,\n  encryptionKey?: string,\n  title?: string,\n): {\n  store: Store;\n  updateNodes: (nodes: TNode[]) => void;\n} | null {\n  const [store, setStore] = useState<Store | null>(null);\n  useEffect(() => {\n    if (decodedData === null) {\n      return;\n    }\n    setStore(normalizeRoot(decodedData, { title, encryptionKey }));\n  }, [decodedData, encryptionKey, title]);\n\n  if (store === null) {\n    return null;\n  }\n\n  return {\n    store,\n    updateNodes: (nodes: TNode[]) => {\n      const newNodes = { ...store.nodes };\n      nodes.forEach((node) => (newNodes[node.key] = node));\n      const newStore = {\n        rootNode: {\n          ...store.rootNode,\n          updated: new Date(),\n        },\n        nodes: newNodes,\n      };\n      setStore(newStore);\n    },\n  };\n}\n\nexport function useDataDecryption(initialData: string, encryptionKey: string) {\n  const [decryptedData, setDecryptedData] = useState<string | null>(null);\n  const [hasFailed, setHasFailed] = useState<boolean>(false);\n  useEffect(() => {\n    const isDecryptedAlready = initialData[0] === \"{\";\n    if (isDecryptedAlready) {\n      setDecryptedData(initialData);\n      setHasFailed(false);\n    } else {\n      decrypt(initialData, encryptionKey)\n        .then((data) => {\n          setDecryptedData(data);\n          setHasFailed(false);\n        })\n        .catch(() => {\n          setHasFailed(true);\n          setDecryptedData(\"{}\");\n        });\n    }\n  }, [initialData, encryptionKey]);\n  return { decryptedData, hasFailed };\n}\n\nexport function useDataEncryption(store: Store) {\n  const [encryptedData, setEncryptedData] = useState<string | null>(null);\n  useEffect(() => {\n    encryptData(store, setEncryptedData);\n  }, [store, store.rootNode.encryptionKey]);\n  return encryptedData;\n}\n\nexport function encryptData(\n  store: Store,\n  onComplete: (encryptedData: string) => void,\n) {\n  const plainText = denormalizeRoot(store);\n  encrypt(plainText, store.rootNode.encryptionKey).then(onComplete);\n}\n","import { TDateNode } from \"../../../../utils/normalization\";\n\nexport default function DateNodeCardView(props: { node: TDateNode }) {\n  return <span>{date2HumanValue(props.node.date)}</span>;\n}\n\nexport function date2HumanValue(date: Date): string {\n  const year = date.getFullYear().toString();\n  const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getDate().toString().padStart(2, \"0\");\n  return `${month}-${day}-${year}`;\n}\n","import React from \"react\";\nimport { TBooleanNode } from \"../../../../utils/normalization\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function BooleanNodeCardView(props: { node: TBooleanNode }) {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n      {props.node.value ? \"Yes\" : \"No\"}\n    </Typography>\n  );\n}\n","import { FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport { TBooleanNode, TNode } from \"../../../../utils/normalization\";\n\nimport React from \"react\";\n\ntype Props = {\n  node: TBooleanNode;\n  onChange(node: TNode): void;\n};\nexport default function EditBooleanInput({ node, onChange }: Props) {\n  return (\n    <FormControl variant=\"filled\" fullWidth>\n      <InputLabel>Initial value</InputLabel>\n      <Select\n        label=\"Type\"\n        value={node.value}\n        onChange={({ target: { value } }) => {\n          onChange({\n            ...node,\n            value: value === \"true\" ? true : false,\n          });\n        }}\n      >\n        <MenuItem value=\"true\">Yes</MenuItem>\n        <MenuItem value=\"false\">No</MenuItem>\n      </Select>\n    </FormControl>\n  );\n}\n","import { TDateNode, TNode } from \"../../../../utils/normalization\";\n\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport React from \"react\";\n\ntype Props = {\n  node: TDateNode;\n  onChange(node: TNode): void;\n};\nexport default function EditDateInput({ node, onChange }: Props) {\n  return (\n    <KeyboardDatePicker\n      disableToolbar\n      variant=\"inline\"\n      inputVariant=\"filled\"\n      fullWidth\n      format=\"MM/dd/yyyy\"\n      label=\"Initial Date\"\n      value={node.date}\n      onChange={(date: Date | null) => {\n        onChange({\n          ...node,\n          date: date ?? new Date(),\n        });\n      }}\n      KeyboardButtonProps={{\n        \"aria-label\": \"change date\",\n      }}\n    />\n  );\n}\n","import { TNode, TNumberNode } from \"../../../../utils/normalization\";\n\nimport React from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\ntype Props = {\n  node: TNumberNode;\n  onChange(node: TNode): void;\n};\nexport default function EditNumberInput({ node, onChange }: Props) {\n  return (\n    <TextField\n      variant=\"filled\"\n      id=\"name\"\n      label=\"Initial Value\"\n      type=\"number\"\n      value={node.value}\n      onChange={(event) => {\n        onChange({\n          ...node,\n          value: !isNaN(Number(event.target.value))\n            ? Number(event.target.value)\n            : node.value,\n        });\n      }}\n      fullWidth\n    />\n  );\n}\n","import { TNode, TStringNode } from \"../../../../utils/normalization\";\n\nimport React from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\ntype Props = {\n  node: TStringNode;\n  onChange(node: TNode): void;\n};\nexport default function EditStringInput({ node, onChange }: Props) {\n  return (\n    <TextField\n      id=\"name\"\n      label=\"Initial Value\"\n      variant=\"filled\"\n      type=\"string\"\n      value={node.value}\n      onChange={(event) => {\n        onChange({\n          ...node,\n          value: event.target.value,\n        });\n      }}\n      fullWidth\n    />\n  );\n}\n","import { RefinedType, TNode } from \"../../../utils/normalization\";\n\nimport EditBooleanInput from \"./Boolean/EditBooleanInput\";\nimport EditDateInput from \"./Date/EditDateInput\";\nimport EditNumberInput from \"./Number/EditNumberInput\";\nimport EditStringInput from \"./String/EditStringInput\";\nimport React from \"react\";\n\ntype Props = {\n  node: TNode | null;\n  onChange(node: TNode): void;\n};\nexport default function EditValueInput({ node, onChange }: Props) {\n  if (node === null) {\n    return null;\n  }\n  switch (node.type) {\n    case RefinedType.List:\n      return null;\n    case RefinedType.Boolean:\n      return <EditBooleanInput node={node} onChange={onChange} />;\n    case RefinedType.Date:\n      return <EditDateInput node={node} onChange={onChange} />;\n    case RefinedType.Null:\n      throw Error(\"Impossible\");\n    case RefinedType.Number:\n      return <EditNumberInput node={node} onChange={onChange} />;\n    case RefinedType.Object:\n      return null;\n    case RefinedType.String:\n      return <EditStringInput node={node} onChange={onChange} />;\n  }\n}\n","import Filter1OutlinedIcon from \"@material-ui/icons/Filter1Outlined\";\nimport FolderOpenOutlinedIcon from \"@material-ui/icons/FolderOpenOutlined\";\nimport HelpOutlineOutlinedIcon from \"@material-ui/icons/HelpOutlineOutlined\";\nimport ListOutlinedIcon from \"@material-ui/icons/ListOutlined\";\nimport React from \"react\";\nimport { RefinedType } from \"../../../utils/normalization\";\nimport SubjectOutlinedIcon from \"@material-ui/icons/SubjectOutlined\";\nimport TodayOutlinedIcon from \"@material-ui/icons/TodayOutlined\";\nimport ToggleOnOutlinedIcon from \"@material-ui/icons/ToggleOnOutlined\";\nimport useDecodedDataContext from \"../useDecodedDataContext\";\n\nfunction NodeTypeIcon(props: { nodeKey: string }) {\n  const { store } = useDecodedDataContext();\n  const node = store.nodes[props.nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return <ToggleOnOutlinedIcon />;\n    case RefinedType.Date:\n      return <TodayOutlinedIcon />;\n    case RefinedType.List:\n      return <ListOutlinedIcon />;\n    case RefinedType.Null:\n      return <HelpOutlineOutlinedIcon />;\n    case RefinedType.Number:\n      return <Filter1OutlinedIcon />;\n    case RefinedType.Object:\n      return <FolderOpenOutlinedIcon />;\n    case RefinedType.String:\n      return <SubjectOutlinedIcon />;\n  }\n}\n\nexport default NodeTypeIcon;\n","import { RefinedType, Store, StoreKey } from \"../../../../utils/normalization\";\n\nimport { date2HumanValue } from \"../Date/DateNodeCardView\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\n\ntype FilterFn = (value: string) => boolean;\n\nexport default function useSearchTextOnNodeRecursively(\n  searchValue: string,\n): FilterFn {\n  const { store } = useDecodedDataContext();\n  return function searchMatches(key: string) {\n    if (searchValue === \"\") {\n      return true;\n    }\n    return searchTextOnNodeRecursively(store, key, searchValue.toLocaleLowerCase());\n  };\n}\n\nfunction searchTextOnNodeRecursively(\n  store: Store,\n  startKey: StoreKey,\n  searchValue: string,\n): boolean {\n  const node = store.nodes[startKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return false;\n    case RefinedType.Date:\n      return date2HumanValue(node.date).toLocaleLowerCase().includes(searchValue);\n    case RefinedType.List:\n      return node.children.some((key) =>\n        searchTextOnNodeRecursively(store, key, searchValue),\n      );\n    case RefinedType.Null:\n      return searchValue === \"null\";\n    case RefinedType.Number:\n      return node.value.toString().toLocaleLowerCase().includes(searchValue);\n    case RefinedType.Object:\n      return node.fields.some(\n        (field) =>\n          field.name.toLocaleLowerCase().includes(searchValue) ||\n          searchTextOnNodeRecursively(store, field.value, searchValue),\n      );\n    case RefinedType.String:\n      return node.value.toLocaleLowerCase().includes(searchValue);\n  }\n}\n","import React, { useState } from \"react\";\nimport {\n  RefinedType,\n  TListNode,\n  TNode,\n  defaultNodeValue,\n} from \"../../../../utils/normalization\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Button from \"@material-ui/core/Button\";\nimport CardView from \"../CardView\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport EditValueInput from \"../EditValueInput\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport NodeTypeIcon from \"../NodeTypeIcon\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Select from \"@material-ui/core/Select\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\nimport useSearchTextOnNodeRecursively from \"../Object/useSearchTextOnNodeRecursively\";\n\nexport default function ListNodeCardView(props: { node: TListNode }) {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const searchMatches = useSearchTextOnNodeRecursively(searchValue);\n  return (\n    <div>\n      <div onClick={(e) => e.stopPropagation()}>\n        {props.node.children.length > 7 ? (\n          <FormControl>\n            <Input\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              placeholder=\"Search ...\"\n              startAdornment={\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n        ) : null}\n      </div>\n      <List>\n        {props.node.children.filter(searchMatches).map((key) => (\n          <ListItem button>\n            <ListItemIcon>\n              <NodeTypeIcon nodeKey={key} />\n            </ListItemIcon>\n            <ListItemText primary={<CardView nodeKey={key} />} />\n          </ListItem>\n        ))}\n        <ListItem>\n          <ListItemText\n            onClick={(e) => e.stopPropagation()}\n            primary={<NewListItemDialogButton parentNode={props.node} />}\n          />\n        </ListItem>\n      </List>\n    </div>\n  );\n}\n\nfunction NewListItemDialogButton(props: { parentNode: TListNode }) {\n  const { store, updateNodes } = useDecodedDataContext();\n  const templateNode =\n    props.parentNode.children.length > 0\n      ? defaultNodeValue(\n          store.nodes[props.parentNode.children[0]].type,\n          props.parentNode,\n        )\n      : null;\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [valueNode, setValueNode] = useState<TNode | null>(templateNode);\n  if (updateNodes == null) {\n    return null;\n  }\n  return (\n    <>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => setIsDialogOpen(true)}\n        startIcon={<AddIcon />}\n      >\n        Add{\" \"}\n      </Button>\n      <Dialog\n        open={isDialogOpen}\n        onClose={() => setIsDialogOpen(false)}\n        aria-labelledby=\"new-field-dialog-title\"\n      >\n        <DialogTitle id=\"new-field-dialog-title\">Add New List Item</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            All items on a list must have the same type.\n          </DialogContentText>\n          {!templateNode && (\n            <FormControl>\n              <InputLabel id=\"select-type-label\">Type</InputLabel>\n              <Select\n                labelId=\"select-type-label\"\n                value={valueNode?.type ?? \"\"}\n                onChange={(event) => {\n                  const newType: RefinedType = event.target.value as RefinedType;\n                  setValueNode(defaultNodeValue(newType, props.parentNode));\n                }}\n                fullWidth\n              >\n                <MenuItem value={RefinedType.Boolean}>Boolean</MenuItem>\n                <MenuItem value={RefinedType.Date}>Date</MenuItem>\n                <MenuItem value={RefinedType.Number}>Number</MenuItem>\n                <MenuItem value={RefinedType.Object}>Object</MenuItem>\n                <MenuItem value={RefinedType.String}>String</MenuItem>\n              </Select>\n            </FormControl>\n          )}\n          <EditValueInput node={valueNode} onChange={setValueNode} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsDialogOpen(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              if (valueNode !== null) {\n                const newParentnode = {\n                  ...props.parentNode,\n                  children: [...props.parentNode.children, valueNode.key],\n                };\n                updateNodes([valueNode, newParentnode]);\n              }\n              setValueNode(templateNode);\n              setIsDialogOpen(false);\n            }}\n            color=\"primary\"\n          >\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import React from \"react\";\nimport { TNullNode } from \"../../../../utils/normalization\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function NullNodeCardView(props: { node: TNullNode }) {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n      Null\n    </Typography>\n  );\n}\n","import React from \"react\";\nimport { TNumberNode } from \"../../../../utils/normalization\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function NumberNodeCardView(props: { node: TNumberNode }) {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n      {props.node.value}\n    </Typography>\n  );\n}\n","import { Close, Minimize } from \"@material-ui/icons\";\nimport { IconButton, useTheme } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport {\n  RefinedType,\n  TNode,\n  TObjectNode,\n  defaultNodeValue,\n} from \"../../../../utils/normalization\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport EditValueInput from \"../EditValueInput\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport TextField from \"@material-ui/core/TextField\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\n\nexport default function NewFieldDialogButton(props: { parentNode: TObjectNode }) {\n  const theme = useTheme();\n  const { updateNodes } = useDecodedDataContext();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [valueNode, setValueNode] = useState<TNode>(\n    defaultNodeValue(RefinedType.String, props.parentNode),\n  );\n  const [fieldName, setFieldName] = useState<string>(\"\");\n  if (updateNodes === null) {\n    return null;\n  }\n  const closeAndClearDialog = () => {\n    setIsDialogOpen(false);\n    setValueNode(defaultNodeValue(RefinedType.String, props.parentNode));\n    setFieldName(\"\");\n  };\n  return (\n    <span\n      style={{ display: \"flex\", alignItems: \"center\" }}\n      onClick={(event) => event.stopPropagation()}\n    >\n      <IconButton\n        onClick={(e) => {\n          setIsDialogOpen(true);\n        }}\n      >\n        <AddIcon fontSize=\"large\" />\n      </IconButton>\n      <Dialog\n        open={isDialogOpen}\n        onClose={() => setIsDialogOpen(false)}\n        aria-labelledby=\"new-item-dialog-title\"\n        fullWidth\n        maxWidth=\"xs\"\n      >\n        <DialogTitle id=\"new-item-dialog-title\">Add New Item</DialogTitle>\n        <div\n          style={{\n            position: \"absolute\",\n            display: \"flex\",\n            alignItems: \"center\",\n            right: theme.spacing(1),\n            top: theme.spacing(1),\n          }}\n        >\n          <IconButton aria-label=\"minimize\" onClick={() => setIsDialogOpen(false)}>\n            <Minimize style={{ transform: \"translate(0px, -7px)\" }} />\n          </IconButton>\n          <IconButton aria-label=\"close\" onClick={closeAndClearDialog}>\n            <Close />\n          </IconButton>\n        </div>\n        <DialogContent dividers style={{ minHeight: 180 }}>\n          <div style={{ display: \"flex\" }}>\n            <FormControl variant=\"filled\" style={{ minWidth: 120 }}>\n              <InputLabel>Type</InputLabel>\n              <Select\n                label=\"Type\"\n                value={valueNode.type}\n                onChange={(event) => {\n                  const newType: RefinedType = event.target.value as RefinedType;\n                  setValueNode(defaultNodeValue(newType, props.parentNode));\n                }}\n              >\n                <MenuItem value={RefinedType.List}>List</MenuItem>\n                <MenuItem value={RefinedType.Boolean}>Question</MenuItem>\n                <MenuItem value={RefinedType.Date}>Date</MenuItem>\n                <MenuItem value={RefinedType.Number}>Number</MenuItem>\n                <MenuItem value={RefinedType.Object}>Folder</MenuItem>\n                <MenuItem value={RefinedType.String}>Text</MenuItem>\n              </Select>\n            </FormControl>\n            <span style={{ width: theme.spacing(1) }} />\n            <TextField\n              label=\"Name\"\n              variant=\"filled\"\n              type=\"string\"\n              autoFocus\n              value={fieldName}\n              onChange={(event) => setFieldName(event.target.value)}\n              fullWidth\n            />\n          </div>\n          <div style={{ height: theme.spacing(1) }} />\n          <EditValueInput node={valueNode} onChange={setValueNode} />\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => {\n              if (valueNode) {\n                const newParentNode: TObjectNode = {\n                  ...props.parentNode,\n                  fields: [\n                    ...props.parentNode.fields,\n                    {\n                      name: fieldName,\n                      value: valueNode.key,\n                      parentKey: valueNode.parentKey,\n                    },\n                  ],\n                };\n                updateNodes([valueNode, newParentNode]);\n              }\n              closeAndClearDialog();\n            }}\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </span>\n  );\n}\n","import React, { useContext, useRef, useState } from \"react\";\nimport {\n  RefinedType,\n  TObjectField,\n  TObjectNode,\n} from \"../../../../utils/normalization\";\n\nimport { DraggableItemsContext } from \"../../useDraggableItemsContext\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\nimport { useTheme } from \"@material-ui/core\";\n\ntype useDragObjectFieldReturn = {\n  draggableContainerProps: {\n    draggable: boolean;\n    style?: React.CSSProperties;\n    onDragStart?(event: React.DragEvent<HTMLDivElement>): void;\n    onDragEnd?(event: React.DragEvent<HTMLDivElement>): void;\n  };\n  dropTargetProps: {\n    ref?: React.Ref<HTMLDivElement>;\n    style: React.CSSProperties;\n    onDrop?(event: React.DragEvent<HTMLDivElement>): void;\n    onDragOver?(event: React.DragEvent<HTMLDivElement>): void;\n    onDragLeave?(event: React.DragEvent<HTMLDivElement>): void;\n  };\n};\n\nexport default function useDragObjectField(\n  item: TObjectField,\n): useDragObjectFieldReturn {\n  const ref = useRef<HTMLDivElement>(null);\n  const theme = useTheme();\n  const { store, updateNodes } = useDecodedDataContext();\n  const [hoverStatus, setHover] = useState<\"AFTER\" | \"BEFORE\" | null>(null);\n  const context = useContext(DraggableItemsContext);\n  if (updateNodes === null || context === null) {\n    return {\n      draggableContainerProps: {\n        draggable: false,\n      },\n      dropTargetProps: {\n        style: { display: \"none\" },\n      },\n    };\n  }\n  const { draggedItem, setDraggedItem } = context;\n  const isBeingDragged = item.value === draggedItem?.value;\n  return {\n    draggableContainerProps: {\n      draggable: true,\n      style: { position: \"relative\" },\n      onDragStart: (event) => {\n        setDraggedItem(item);\n        event.stopPropagation();\n      },\n      onDragEnd: () => setDraggedItem(null),\n    },\n    dropTargetProps: {\n      ref,\n      style: {\n        position: \"absolute\",\n        display: draggedItem === null ? \"none\" : undefined,\n        zIndex: 1,\n        borderColor: theme.palette.primary.main,\n        ...(isBeingDragged\n          ? {\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0,\n              borderWidth: 2,\n              borderRadius: theme.shape.borderRadius,\n              borderStyle: \"dashed\",\n            }\n          : {\n              top: 4,\n              bottom: 4,\n              left: -2,\n              right: -2,\n              borderWidth: 4,\n              borderLeftStyle: hoverStatus === \"BEFORE\" ? \"solid\" : \"none\",\n              borderRightStyle: hoverStatus === \"AFTER\" ? \"solid\" : \"none\",\n              borderTopStyle: \"none\",\n              borderBottomStyle: \"none\",\n            }),\n      },\n      onDrop: () => {\n        if (hoverStatus === null || draggedItem === null) {\n          return;\n        }\n        const sourceParent = store.nodes[draggedItem.parentKey];\n        const targetParent = store.nodes[item.parentKey];\n        if (\n          sourceParent.type !== RefinedType.Object ||\n          targetParent.type !== RefinedType.Object\n        ) {\n          // we can only drag a field into an object from an object\n          return;\n        }\n\n        // remove item from source\n        const newSourceParent: TObjectNode = {\n          ...sourceParent,\n          fields: sourceParent.fields.filter((f) => f.value !== draggedItem.value),\n        };\n        if (item.parentKey === draggedItem.parentKey) {\n          updateNodes([\n            insertIntoPlace(newSourceParent, draggedItem, item, hoverStatus),\n          ]);\n        } else {\n          updateNodes([\n            newSourceParent,\n            insertIntoPlace(targetParent, draggedItem, item, hoverStatus),\n          ]);\n        }\n        setHover(null);\n        setDraggedItem(null);\n      },\n      onDragOver: (event) => {\n        if (ref.current == null || isBeingDragged) {\n          return;\n        }\n        const boundingBox = ref.current.getBoundingClientRect();\n        const halfWidth = boundingBox.width / 2;\n        const centerX = boundingBox.left + halfWidth;\n        setHover(event.pageX > centerX ? \"AFTER\" : \"BEFORE\");\n        event.preventDefault();\n      },\n      onDragLeave: () => {\n        setHover(null);\n      },\n    },\n  };\n}\n\nfunction insertIntoPlace(\n  parentNode: TObjectNode,\n  draggedItem: TObjectField,\n  droppedItem: TObjectField,\n  hoverStatus: \"AFTER\" | \"BEFORE\",\n): TObjectNode {\n  const offset = hoverStatus === \"AFTER\" ? 1 : 0;\n  const newPosition =\n    parentNode.fields.findIndex((f) => f.value === droppedItem.value) + offset;\n  return {\n    ...parentNode,\n    fields: [\n      ...parentNode.fields.slice(0, newPosition),\n      draggedItem,\n      ...parentNode.fields.slice(newPosition),\n    ],\n  };\n}\n","import { Card, CardActionArea, CardContent, useTheme } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { RefinedType, TObjectField } from \"../../../../utils/normalization\";\n\nimport BlurredBar from \"../../../../components/BlurredBar\";\nimport Button from \"@material-ui/core/Button\";\nimport CardView from \"../CardView\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport EditValueInput from \"../EditValueInput\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NodeTypeIcon from \"../NodeTypeIcon\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\nimport useDragObjectField from \"./useDragObjectField\";\n\n// replace this generic grow to show with something better by type\n// Maybe open a preview Dialog ?\n// when entering a folder put a dark background on top of parent?\nexport default function ObjectFieldNodeCardView({\n  name,\n  value,\n  parentKey,\n}: TObjectField) {\n  const theme = useTheme();\n  const { draggableContainerProps, dropTargetProps } = useDragObjectField({\n    name,\n    value,\n    parentKey,\n  });\n  const needsToExpand = useNeedsToExpand(name, value);\n  const [isMinimized, setIsMinimized] = useState(true);\n  return (\n    <Grid\n      item\n      xs={12}\n      sm={12}\n      md={isMinimized || !needsToExpand ? 6 : 12}\n      lg={isMinimized || !needsToExpand ? 3 : 12}\n      xl={isMinimized || !needsToExpand ? 2 : 12}\n      {...draggableContainerProps}\n    >\n      <div {...dropTargetProps} />\n      <Card\n        onClick={(e) => {\n          e.stopPropagation();\n          setIsMinimized((v) => !v);\n        }}\n        variant=\"outlined\"\n      >\n        <CardActionArea disableRipple>\n          <CardContent>\n            <Typography\n              gutterBottom\n              variant=\"h6\"\n              style={{ display: \"flex\", alignItems: \"center\" }}\n            >\n              <NodeTypeIcon nodeKey={value} />\n              <span style={{ width: theme.spacing(1) }} />\n              <span\n                style={\n                  isMinimized\n                    ? {\n                        whiteSpace: \"nowrap\",\n                        overflow: \"hidden\",\n                        textOverflow: \"ellipsis\",\n                        flexGrow: 1,\n                      }\n                    : { flexGrow: 1 }\n                }\n              >\n                {name}\n              </span>\n              {!isMinimized && (\n                <span onClick={(e) => e.stopPropagation()}>\n                  <EditFieldDialog name={name} value={value} parentKey={parentKey} />\n                </span>\n              )}\n            </Typography>\n            {isMinimized ? (\n              <BlurredBar\n                style={{\n                  width: \"80%\",\n                  height: 11,\n                  marginTop: theme.spacing(2),\n                  display: \"block\",\n                }}\n              />\n            ) : (\n              <CardView nodeKey={value} />\n            )}\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </Grid>\n  );\n}\n\nfunction useNeedsToExpand(name: string, nodeKey: string): boolean {\n  const { store } = useDecodedDataContext();\n  if (name.length > 20) {\n    return true;\n  }\n  const node = store.nodes[nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return false;\n    case RefinedType.Date:\n      return false;\n    case RefinedType.List:\n      return true;\n    case RefinedType.Null:\n      return false;\n    case RefinedType.Number:\n      return node.value.toString().length > 30;\n    case RefinedType.Object:\n      return true;\n    case RefinedType.String:\n      return node.value.length > 30;\n  }\n}\n\nfunction EditFieldDialog({ name, value, parentKey }: TObjectField) {\n  const theme = useTheme();\n  const { store, updateNodes } = useDecodedDataContext();\n  const [newFieldName, setNewFieldName] = useState(name);\n  const oldValueNode = store.nodes[value];\n  const oldParentNode = store.nodes[parentKey];\n  const [valueNode, setValueNode] = useState(oldValueNode);\n  const [isEditting, setIsEditting] = useState(false);\n\n  // refresh if new values are passed.\n  useEffect(() => {\n    setNewFieldName(name);\n    setValueNode(oldValueNode);\n  }, [name, oldValueNode, oldParentNode]);\n  if (updateNodes === null || oldParentNode.type !== RefinedType.Object) {\n    return null;\n  }\n  return (\n    <>\n      <IconButton onClick={() => setIsEditting(true)} size=\"small\">\n        <CreateIcon fontSize=\"small\" />\n      </IconButton>\n      {isEditting && (\n        <Dialog\n          open={isEditting}\n          onClose={() => setIsEditting(false)}\n          aria-labelledby=\"edit-dialog-title\"\n          fullWidth\n          maxWidth=\"xs\"\n        >\n          <DialogTitle id=\"edit-dialog-title\">Edit</DialogTitle>\n          <DialogContent>\n            <TextField\n              label=\"Name\"\n              variant=\"outlined\"\n              type=\"string\"\n              autoFocus\n              value={newFieldName}\n              onChange={(event) => setNewFieldName(event.target.value)}\n              fullWidth\n            />\n            <span style={{ width: theme.spacing(1) }} />\n            <EditValueInput node={valueNode} onChange={setValueNode} />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setIsEditting(false)}>Cancel</Button>\n            <Button\n              onClick={() => {\n                const newParentNode = {\n                  ...oldParentNode,\n                  fields: oldParentNode.fields.map((originalField) =>\n                    originalField.value !== value\n                      ? originalField\n                      : { ...originalField, name: newFieldName },\n                  ),\n                };\n                updateNodes([valueNode, newParentNode]);\n                setIsEditting(false);\n              }}\n            >\n              Save\n            </Button>\n          </DialogActions>\n        </Dialog>\n      )}\n    </>\n  );\n}\n","import { OutlinedInput, useTheme } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport NewFieldDialogButton from \"./NewFieldDialogButton\";\nimport ObjectFieldNodeCardView from \"./ObjectFieldNodeCardView\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { TObjectNode } from \"../../../../utils/normalization\";\nimport useSearchTextOnNodeRecursively from \"./useSearchTextOnNodeRecursively\";\n\ntype Props = { node: TObjectNode };\nexport default function ObjectNodeCardView({ node }: Props) {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const searchMatches = useSearchTextOnNodeRecursively(searchValue);\n  const theme = useTheme();\n  const [searchHasFocus, setSearchHasFocus] = useState(false);\n  return (\n    <>\n      {node.fields.length > 7 ? (\n        <Grid item xs={12} sm={searchHasFocus ? 6 : 4} md={searchHasFocus ? 4 : 3}>\n          <FormControl\n            variant=\"outlined\"\n            fullWidth={searchHasFocus || searchValue !== \"\"}\n          >\n            <OutlinedInput\n              onKeyDown={(event) => {\n                if (event.key === \" \") {\n                  // You've seen nothing\n                  event.preventDefault();\n                  setSearchValue((v) => v + \" \");\n                  // I will stop remove this mess later\n                }\n              }}\n              onFocus={() => setSearchHasFocus(true)}\n              onBlur={() => setSearchHasFocus(false)}\n              placeholder=\"Search ...\"\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              startAdornment={\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n          <div style={{ height: theme.spacing(2) }} />\n        </Grid>\n      ) : null}\n      <Grid container spacing={1} onClick={(event) => event.stopPropagation()}>\n        {node.fields\n          .filter(\n            (field) =>\n              field.name\n                .toLocaleLowerCase()\n                .includes(searchValue.toLocaleLowerCase()) ||\n              searchMatches(field.value),\n          )\n          .map((field) => (\n            <ObjectFieldNodeCardView\n              name={field.name}\n              value={field.value}\n              parentKey={node.key}\n              key={field.value}\n            />\n          ))}\n        <NewFieldDialogButton parentNode={node} />\n      </Grid>\n    </>\n  );\n}\n","import React from \"react\";\nimport { TStringNode } from \"../../../../utils/normalization\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function StringNodeCardView(props: { node: TStringNode }) {\n  return (\n    <Typography\n      variant=\"body2\"\n      color=\"textSecondary\"\n      display=\"inline\"\n      onClick={(e) => e.stopPropagation()}\n      style={{ userSelect: \"text\", minWidth: 20 }}\n    >\n      {props.node.value === \"\" ? \"Ø\" : props.node.value}\n    </Typography>\n  );\n}\n","import BooleanNodeCardView from \"./Boolean/BooleanNodeCardView\";\nimport DateNodeCardView from \"./Date/DateNodeCardView\";\nimport ListNodeCardView from \"./List/ListNodeCardView\";\nimport NullNodeCardView from \"./Null/NullNodeCardView\";\nimport NumberNodeCardView from \"./Number/NumberNodeCardView\";\nimport ObjectNodeCardView from \"./Object/ObjectNodeCardView\";\nimport React from \"react\";\nimport { RefinedType } from \"../../../utils/normalization\";\nimport StringNodeCardView from \"./String/StringNodeCardView\";\nimport useDecodedDataContext from \"../useDecodedDataContext\";\n\ntype Props = { nodeKey: string };\nexport default function CardView({ nodeKey }: Props) {\n  const { store } = useDecodedDataContext();\n  const node = store.nodes[nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return <BooleanNodeCardView node={node} />;\n    case RefinedType.Date:\n      return <DateNodeCardView node={node} />;\n    case RefinedType.List:\n      return <ListNodeCardView node={node} />;\n    case RefinedType.Null:\n      return <NullNodeCardView node={node} />;\n    case RefinedType.Number:\n      return <NumberNodeCardView node={node} />;\n    case RefinedType.Object:\n      return <ObjectNodeCardView node={node} />;\n    case RefinedType.String:\n      return <StringNodeCardView node={node} />;\n  }\n}\n","import { createContext, useContext, useState } from \"react\";\n\nimport { TObjectField } from \"../../utils/normalization\";\n\ntype TDraggableItemsContext = {\n  draggedItem: TObjectField | null;\n  setDraggedItem(item: TObjectField | null): void;\n};\nexport const DraggableItemsContext = createContext<TDraggableItemsContext | null>(\n  null,\n);\nexport function useDraggableItemsContext() {\n  const context = useContext(DraggableItemsContext);\n  if (context == null) {\n    throw new Error(\"missing DraggableItemsContext.Provider\");\n  }\n  return context;\n}\n\nexport default function useDraggableItemsProvider() {\n  const [draggedItem, setDraggedItem] = useState<TObjectField | null>(null);\n  return {\n    draggedItem,\n    setDraggedItem,\n  };\n}\n","import React, { CSSProperties } from \"react\";\n\nimport { useTheme } from \"@material-ui/core\";\n\ntype Props = {\n  style?: CSSProperties;\n};\nexport default function BlurredBar({ style }: Props) {\n  const theme = useTheme();\n  return (\n    <span\n      style={{\n        backgroundColor: theme.palette.text.primary,\n        opacity: 0.1,\n        filter: \"blur(4px)\",\n        ...style,\n      }}\n    />\n  );\n}\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Grid,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport BlurredBar from \"../../../components/BlurredBar\";\nimport { date2HumanValue } from \"./Date/DateNodeCardView\";\nimport { encryptData } from \"../../../utils/encryption\";\nimport useDecodedDataContext from \"../useDecodedDataContext\";\n\nexport default function CardInfo() {\n  const [isKeyHidden, setIsKeyHidden] = useState(true);\n  const { store } = useDecodedDataContext();\n  return (\n    <Card style={{ maxWidth: 400 }} variant=\"outlined\">\n      <CardHeader\n        title={store.rootNode.title}\n        subheader={\n          <Tooltip title=\"double click to show\" placement=\"top\">\n            <Typography\n              variant=\"body2\"\n              color=\"textSecondary\"\n              gutterBottom\n              onDoubleClick={() => setIsKeyHidden((v) => !v)}\n            >\n              {!isKeyHidden ? (\n                store.rootNode.encryptionKey\n              ) : (\n                <BlurredBar\n                  style={{\n                    height: 12,\n                    width: \"100%\",\n                    marginTop: 8,\n                    display: \"block\",\n                  }}\n                />\n              )}\n            </Typography>\n          </Tooltip>\n        }\n      />\n      <CardContent>\n        <Grid container spacing={1}>\n          <Grid item xs={6}>\n            <Typography variant=\"body2\">Created</Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n              {date2HumanValue(store.rootNode.created)}\n            </Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography variant=\"body2\">Last Updated</Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n              {date2HumanValue(store.rootNode.updated)}\n            </Typography>\n          </Grid>\n        </Grid>\n      </CardContent>\n      <CardActions>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          href={`data:text/plain;charset=base64,${store.rootNode.encryptionKey}`}\n          download=\"key.ish\"\n        >\n          Save Key\n        </Button>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          onClick={() => {\n            encryptData(store, (data) => {\n              const element = document.createElement(\"a\");\n              element.setAttribute(\n                \"href\",\n                \"data:text/plain;charset=base64,\" + encodeURIComponent(data),\n              );\n              element.setAttribute(\"download\", \"data.ish\");\n              element.style.display = \"none\";\n              document.body.appendChild(element);\n              element.click();\n              document.body.removeChild(element);\n            });\n          }}\n        >\n          Save Data\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import { IconButton, Paper, Tooltip, useTheme } from \"@material-ui/core\";\nimport { useDataAsStore, useDataDecryption } from \"../../../utils/encryption\";\nimport useDraggableItemsProvider, {\n  DraggableItemsContext,\n} from \"../useDraggableItemsContext\";\n\nimport CardInfo from \"./CardInfo\";\nimport CardView from \"./CardView\";\nimport { Close } from \"@material-ui/icons\";\nimport { DecodedDataContext } from \"../useDecodedDataContext\";\nimport React from \"react\";\nimport { Store } from \"../../../utils/normalization\";\n\nexport type CardDataProps = {\n  children?(store: Store): void;\n  title?: string;\n  isReadOnly?: boolean;\n  initialValues: {\n    encryptionKey: string;\n    initialData: string;\n  };\n};\ntype Props = CardDataProps & {\n  onClose: () => void;\n};\nexport default function CardRoot({\n  children,\n  title,\n  isReadOnly = false,\n  initialValues: { encryptionKey, initialData },\n  onClose,\n}: Props) {\n  const theme = useTheme();\n  const draggableData = useDraggableItemsProvider();\n  const { decryptedData } = useDataDecryption(initialData, encryptionKey);\n  const data = useDataAsStore(decryptedData, encryptionKey, title);\n  if (!data) {\n    return null;\n  }\n  const { store, updateNodes } = data;\n  return (\n    <DraggableItemsContext.Provider value={draggableData}>\n      <DecodedDataContext.Provider\n        value={{ store, updateNodes: isReadOnly ? null : updateNodes }}\n      >\n        <Paper style={{ position: \"relative\", padding: theme.spacing(3) }}>\n          <div\n            style={{\n              position: \"absolute\",\n              right: theme.spacing(1),\n              top: theme.spacing(1),\n            }}\n          >\n            <Tooltip title=\"Did you save? Just checking\" arrow>\n              <IconButton aria-label=\"close card\" onClick={onClose}>\n                <Close />\n              </IconButton>\n            </Tooltip>\n          </div>\n          <CardInfo />\n          <div style={{ height: theme.spacing(3) }} />\n          <CardView nodeKey={store.rootNode.value} />\n          {children && children(store)}\n        </Paper>\n      </DecodedDataContext.Provider>\n    </DraggableItemsContext.Provider>\n  );\n}\n","import {\n  Add,\n  Cached,\n  Done,\n  ExpandLess,\n  ExpandMore,\n  GetApp,\n  HelpOutline,\n} from \"@material-ui/icons\";\nimport {\n  Button,\n  Collapse,\n  FormControlLabel,\n  FormLabel,\n  IconButton,\n  InputAdornment,\n  Radio,\n  RadioGroup,\n  TextField,\n  Tooltip,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { createKey, isKeyValid, useDataDecryption } from \"../../../utils/encryption\";\n\nimport { CardDataProps } from \"../cards/CardRoot\";\nimport DragAndDrop from \"./DragAndDrop\";\n\nenum DataOptions {\n  STANDARD = \"STANDARD\",\n  EMPTY = \"EMPTY\",\n  CUSTOM = \"CUSTOM\",\n}\ntype Props = {\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n  onChange(card: CardDataProps): void;\n  onSubmit(card: CardDataProps): void;\n  onCancel(): void;\n};\nexport default function MemoryVaultCreateForm({\n  standardProposal,\n  onSubmit,\n  onChange,\n  onCancel,\n}: Props) {\n  const theme = useTheme();\n  const initialCardData = {\n    title: \"\",\n    initialValues: {\n      encryptionKey: \"\",\n      initialData: standardProposal.data,\n    },\n  };\n  const [cardData, setCardData] = useState<CardDataProps>(initialCardData);\n\n  function setEncryptionKey(newEncryptionKey: string) {\n    const newCardData = {\n      ...cardData,\n      initialValues: {\n        ...cardData.initialValues,\n        encryptionKey: newEncryptionKey,\n      },\n    };\n    setCardData(newCardData);\n    onChange(newCardData);\n  }\n\n  function setInitialData(newInitialData: string) {\n    const newCardData = {\n      ...cardData,\n      initialValues: {\n        ...cardData.initialValues,\n        initialData: newInitialData,\n      },\n    };\n    setCardData(newCardData);\n    onChange(newCardData);\n  }\n\n  function setTitle(newTitle: string) {\n    const newCardData = { ...cardData, title: newTitle };\n    setCardData(newCardData);\n    onChange(newCardData);\n  }\n\n  const { hasFailed } = useDataDecryption(\n    cardData.initialValues.initialData,\n    cardData.initialValues.encryptionKey,\n  );\n  const { encryptionKey, initialData } = cardData.initialValues;\n  return (\n    <div style={{ padding: theme.spacing(2) }}>\n      <CreateCardTitleInput title={cardData.title ?? \"\"} setTitle={setTitle} />\n      <CreateCardKeyInput\n        encryptionKey={encryptionKey}\n        setEncryptionKey={setEncryptionKey}\n      />\n      <CreateCardDataSection\n        standardProposal={standardProposal}\n        setInitialData={setInitialData}\n      />\n      <div style={{ height: theme.spacing(2) }} />\n      {initialData !== \"\" && encryptionKey !== null && hasFailed && (\n        <Typography variant=\"body2\" color=\"error\" align=\"center\">\n          Key and data don't match\n        </Typography>\n      )}\n      <Button\n        fullWidth\n        variant=\"contained\"\n        disabled={hasFailed || encryptionKey.length === 0}\n        color=\"primary\"\n        size=\"small\"\n        startIcon={<Add />}\n        onClick={() => {\n          onSubmit(cardData);\n          setCardData(initialCardData);\n        }}\n      >\n        Open\n      </Button>\n      <Button fullWidth size=\"small\" onClick={onCancel}>\n        Cancel\n      </Button>\n    </div>\n  );\n}\n\ntype CreateCardTitleInputProps = {\n  title: string;\n  setTitle: (title: string) => void;\n};\nfunction CreateCardTitleInput({ title, setTitle }: CreateCardTitleInputProps) {\n  return (\n    <TextField\n      variant=\"outlined\"\n      margin=\"dense\"\n      fullWidth\n      label=\"Title\"\n      autoComplete=\"title\"\n      value={title}\n      onChange={(e) => setTitle(e.target.value)}\n      autoFocus\n    />\n  );\n}\n\ntype CreateCardKeyInputProps = {\n  encryptionKey: string;\n  setEncryptionKey: (encryptionKey: string) => void;\n};\nfunction CreateCardKeyInput({\n  encryptionKey,\n  setEncryptionKey,\n}: CreateCardKeyInputProps) {\n  return (\n    <DragAndDrop onDrop={(file) => readFile(file, setEncryptionKey)}>\n      <TextField\n        variant=\"outlined\"\n        margin=\"dense\"\n        error={encryptionKey.length > 0 && !isKeyValid(encryptionKey)}\n        required\n        fullWidth\n        label=\"Encryption Key\"\n        type=\"password\"\n        autoComplete=\"current-encryption-key\"\n        value={encryptionKey}\n        onChange={(e) => setEncryptionKey(e.target.value)}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Tooltip title=\"Generate key\" arrow>\n                <IconButton\n                  aria-label=\"generate encryption Key\"\n                  onClick={() => createKey().then(setEncryptionKey)}\n                >\n                  <Cached fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </InputAdornment>\n          ),\n        }}\n      />\n    </DragAndDrop>\n  );\n}\n\ntype CreateCardDataSectionProps = {\n  setInitialData: (initialData: string) => void;\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n};\nfunction CreateCardDataSection({\n  standardProposal,\n  setInitialData,\n}: CreateCardDataSectionProps) {\n  const theme = useTheme();\n  const [expanded, setExpanded] = useState(false);\n  const [dataOption, selectDataOption] = useState<DataOptions>(DataOptions.STANDARD);\n  const [encryptedData, setEncryptedData] = useState<string | null>(null);\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Typography variant=\"body1\">Data Options</Typography>\n        <IconButton\n          onClick={() => setExpanded((e) => !e)}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          {expanded ? <ExpandLess /> : <ExpandMore />}\n        </IconButton>\n      </div>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <FormLabel component=\"legend\">Initial Data</FormLabel>\n        <RadioGroup\n          aria-label=\"Initial data\"\n          value={dataOption}\n          onChange={(event) => {\n            const dataOption: DataOptions = (event.target as HTMLInputElement)\n              .value as DataOptions;\n            selectDataOption(dataOption);\n            switch (dataOption) {\n              case DataOptions.CUSTOM:\n                return setInitialData(encryptedData ?? \"\");\n              case DataOptions.EMPTY:\n                return setInitialData(\"{}\");\n              case DataOptions.STANDARD:\n                return setInitialData(standardProposal.data);\n            }\n          }}\n        >\n          <FormControlLabel\n            value={DataOptions.STANDARD}\n            control={<Radio size=\"small\" />}\n            label={`Standard v${standardProposal.version}`}\n          />\n          <FormControlLabel\n            value={DataOptions.EMPTY}\n            control={<Radio size=\"small\" />}\n            label=\"Empty\"\n          />\n          <FormControlLabel\n            value={DataOptions.CUSTOM}\n            control={<Radio size=\"small\" />}\n            label={\n              <span\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                }}\n              >\n                My own <span style={{ width: theme.spacing(1) }} />\n                <Tooltip\n                  title=\"Your encrypted data or a strigfied json\"\n                  placement=\"top\"\n                >\n                  <HelpOutline fontSize=\"inherit\" />\n                </Tooltip>\n              </span>\n            }\n          />\n        </RadioGroup>\n        {DataOptions.CUSTOM === dataOption && (\n          <DragAndDrop\n            onDrop={(file) =>\n              readFile(file, (data) => {\n                setEncryptedData(data);\n                if (dataOption === DataOptions.CUSTOM) {\n                  setInitialData(data);\n                }\n              })\n            }\n          >\n            <Button\n              component=\"label\"\n              fullWidth\n              style={{\n                textTransform: \"none\",\n                outlineWidth: 2,\n                outlineStyle: \"dashed\",\n                outlineColor: theme.palette.secondary.main,\n              }}\n              startIcon={encryptedData === null ? <GetApp /> : <Done />}\n            >\n              <input\n                hidden\n                type=\"file\"\n                onChange={(e) =>\n                  readFile(e.target.files?.[0], (data) => {\n                    setEncryptedData(data);\n                    if (dataOption === DataOptions.CUSTOM) {\n                      setInitialData(data);\n                    }\n                  })\n                }\n              />\n              {encryptedData === null ? (\n                <Typography variant=\"body1\">Drag or upload your data</Typography>\n              ) : (\n                <Typography variant=\"body1\">Done</Typography>\n              )}\n            </Button>\n          </DragAndDrop>\n        )}\n      </Collapse>\n    </>\n  );\n}\n\nfunction readFile(file: File | null | undefined, onDone: (reuslt: string) => void) {\n  if (!file) return;\n  const reader = new FileReader();\n  reader.onloadend = () => {\n    if (typeof reader.result === \"string\") {\n      onDone(reader.result);\n    }\n  };\n  reader.readAsText(file);\n}\n","import { ReactNode } from \"react\";\n\ntype Props = {\n  children: ReactNode;\n  onDrop(file: File | null | undefined): void;\n};\nexport default function DragAndDrop({ children, onDrop }: Props) {\n  return (\n    <div\n      onDrop={(event) => {\n        event.preventDefault();\n        onDrop(event.dataTransfer.files[0]);\n      }}\n      onDragOver={(event) => {\n        event.preventDefault();\n      }}\n      onDragEnter={(event) => {\n        event.preventDefault();\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n","import { Paper, Typography, useTheme } from \"@material-ui/core\";\nimport { useDataAsStore, useDataDecryption } from \"../../../utils/encryption\";\n\nimport CardInfo from \"./CardInfo\";\nimport CardView from \"./CardView\";\nimport { DecodedDataContext } from \"../useDecodedDataContext\";\nimport React from \"react\";\n\ntype Props = {\n  title?: string;\n  initialValues: {\n    encryptionKey: string;\n    initialData: string;\n  };\n};\nexport default function PreviewCardRoot({\n  title,\n  initialValues: { encryptionKey, initialData },\n}: Props) {\n  const theme = useTheme();\n  const { decryptedData, hasFailed } = useDataDecryption(initialData, encryptionKey);\n  const data = useDataAsStore(decryptedData, encryptionKey, title);\n  if (!data) {\n    return null;\n  }\n  const { store } = data;\n  return (\n    <DecodedDataContext.Provider value={{ store, updateNodes: null }}>\n      <Paper\n        style={{\n          position: \"relative\",\n          overflow: \"hidden\",\n          padding: theme.spacing(3),\n        }}\n      >\n        <div\n          style={{\n            backgroundColor: theme.palette.background.default,\n            opacity: 0.8,\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            zIndex: 1,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Typography variant=\"h3\">Preview</Typography>\n        </div>\n        <CardInfo />\n        <div style={{ height: theme.spacing(3) }} />\n        {!hasFailed ? (\n          <CardView nodeKey={store.rootNode.value} />\n        ) : (\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Data mismatch\n          </Typography>\n        )}\n      </Paper>\n    </DecodedDataContext.Provider>\n  );\n}\n","import { Add, Drafts, Mail } from \"@material-ui/icons\";\nimport CardRoot, { CardDataProps } from \"./cards/CardRoot\";\nimport {\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  useTheme,\n} from \"@material-ui/core\";\nimport React, { ReactNode, useState } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nimport MemoryVaultCreateForm from \"./create/MemoryVaultCreateForm\";\nimport PreviewCardRoot from \"./cards/PreviewCardRoot\";\nimport queryString from \"query-string\";\nimport { useLocation } from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\n\ntype MemoryPageResponse = {\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n};\nconst QUERY = gql`\n  query MemoryPage {\n    standardProposal {\n      version\n      data\n    }\n  }\n`;\n\ntype CardItem = {\n  cardProps: CardDataProps;\n  id: string;\n  isOpen: boolean;\n  isReadOnly: boolean;\n};\nexport default function MemoryPage() {\n  const theme = useTheme();\n  const cardFromUrl = useCardFromUrl();\n  const [cards, setCards] = useState<CardItem[]>(cardFromUrl ? [cardFromUrl] : []);\n  const [previewCard, setPreviewCard] = useState<CardItem | null>(null);\n  const allCards = previewCard ? [previewCard, ...cards] : cards;\n  const [isCreating, setIsCreating] = useState(false);\n  const { data } = useQuery<MemoryPageResponse>(QUERY);\n  return (\n    <MemoryPageLayout\n      leftNav={\n        <>\n          {allCards.length > 0 && (\n            <>\n              <List component=\"nav\">\n                {allCards.map((card) => (\n                  <ListItem\n                    button\n                    key={card.cardProps.initialValues.encryptionKey}\n                    onClick={() =>\n                      setCards((oldCards) =>\n                        oldCards.map((c) =>\n                          card.id === c.id ? { ...c, isOpen: !c.isOpen } : c,\n                        ),\n                      )\n                    }\n                  >\n                    <ListItemIcon>\n                      {card.isOpen ? <Drafts /> : <Mail />}\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={\n                        card.cardProps.title !== \"\" ? card.cardProps.title : \"Title\"\n                      }\n                      primaryTypographyProps={{\n                        style: { overflow: \"hidden\", textOverflow: \"ellipsis\" },\n                      }}\n                      secondary={\n                        card.cardProps.initialValues.encryptionKey !== \"\"\n                          ? card.cardProps.initialValues.encryptionKey\n                          : \"key\"\n                      }\n                      secondaryTypographyProps={{\n                        style: { overflow: \"hidden\", textOverflow: \"ellipsis\" },\n                      }}\n                    />\n                  </ListItem>\n                ))}\n              </List>\n              <Divider />{\" \"}\n            </>\n          )}\n          <List component=\"nav\">\n            {isCreating && data ? (\n              <MemoryVaultCreateForm\n                standardProposal={data.standardProposal}\n                onChange={(card) => {\n                  setPreviewCard({\n                    cardProps: card,\n                    isOpen: true,\n                    id: \"preview\",\n                    isReadOnly: true,\n                  });\n                }}\n                onSubmit={(newCard) => {\n                  setIsCreating(false);\n                  setPreviewCard(null);\n                  setCards((old) => [\n                    {\n                      cardProps: newCard,\n                      isOpen: true,\n                      isReadOnly: false,\n                      id: uuid(),\n                    },\n                    ...old,\n                  ]);\n                }}\n                onCancel={() => {\n                  setIsCreating(false);\n                  setPreviewCard(null);\n                }}\n              />\n            ) : (\n              <ListItem button onClick={() => setIsCreating(true)}>\n                <ListItemIcon>\n                  <Add />\n                </ListItemIcon>\n                <ListItemText primary=\"Open\" />\n              </ListItem>\n            )}\n          </List>\n        </>\n      }\n      body={\n        <>\n          {previewCard && (\n            <>\n              <PreviewCardRoot {...previewCard.cardProps} />\n              <div style={{ height: theme.spacing(2) }} />\n            </>\n          )}\n          {cards\n            .filter((c) => c.isOpen)\n            .map((card) => (\n              <div key={card.id}>\n                <CardRoot\n                  {...card.cardProps}\n                  isReadOnly={card.isReadOnly}\n                  onClose={() => setCards(cards.filter((c) => card.id !== c.id))}\n                />\n                <div style={{ height: theme.spacing(2) }} />\n              </div>\n            ))}\n        </>\n      }\n    />\n  );\n}\ntype RouteParams = {\n  title?: string;\n  key?: string;\n  data?: string;\n  readOnly?: string;\n};\nfunction useCardFromUrl(): CardItem | null {\n  const { search } = useLocation();\n  const params: RouteParams = queryString.parse(search);\n  if (params.key == null || params.data == null) {\n    return null;\n  }\n  return {\n    id: uuid(),\n    isOpen: true,\n    isReadOnly: params.readOnly !== \"false\",\n    cardProps: {\n      title: params.title,\n      initialValues: {\n        encryptionKey: params.key.split(\" \").join(\"+\"),\n        initialData: params.data.split(\" \").join(\"+\"),\n      },\n    },\n  };\n}\nfunction MemoryPageLayout({\n  leftNav,\n  body,\n}: {\n  leftNav: ReactNode;\n  body: ReactNode;\n}) {\n  const theme = useTheme();\n  return (\n    <Grid container style={{ flex: 1 }}>\n      <Grid\n        item\n        xs={12}\n        sm={4}\n        md={3}\n        lg={2}\n        style={{\n          borderRightColor: theme.palette.divider,\n          borderRightWidth: 1,\n          borderRightStyle: \"solid\",\n        }}\n      >\n        {leftNav}\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sm={8}\n        md={9}\n        lg={10}\n        style={{\n          padding: theme.spacing(2),\n        }}\n      >\n        {body}\n      </Grid>\n    </Grid>\n  );\n}\n"],"sourceRoot":""}