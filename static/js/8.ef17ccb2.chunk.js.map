{"version":3,"sources":["utils/normalization.ts","pages/memory/useDecodedDataContext.tsx","pages/memory/cards/Date/DateNodeCardView.tsx","pages/memory/useDraggableItemsContext.tsx","components/BlurredBar.tsx","pages/memory/cards/Boolean/BooleanNodeCardView.tsx","pages/memory/cards/Boolean/EditBooleanInput.tsx","pages/memory/cards/Date/EditDateInput.tsx","pages/memory/cards/Number/EditNumberInput.tsx","pages/memory/cards/String/EditStringInput.tsx","pages/memory/cards/EditValueInput.tsx","pages/memory/cards/NodeTypeIcon.tsx","pages/memory/cards/Object/useSearchTextOnNodeRecursively.ts","pages/memory/cards/List/ListNodeCardView.tsx","pages/memory/cards/Null/NullNodeCardView.tsx","pages/memory/cards/Number/NumberNodeCardView.tsx","pages/memory/cards/Object/NewFieldDialogButton.tsx","pages/memory/cards/Object/useDragObjectField.tsx","pages/memory/cards/Object/ObjectFieldNodeCardView.tsx","pages/memory/cards/Object/ObjectNodeCardView.tsx","pages/memory/cards/String/StringNodeCardView.tsx","pages/memory/cards/CardView.tsx","utils/data-manipulation.ts","utils/encryption.ts","pages/memory/cards/CardInfo.tsx","pages/memory/cards/CardViewRoot.tsx","pages/memory/create/DragAndDrop.tsx","pages/memory/create/MemoryVaultCreateForm.tsx","pages/memory/MemoryPage.tsx"],"names":["RefinedType","ROOT_KEY","normalizeRoot","decodedData","overrides","parsedDate","JSON","parse","title","created","Date","updated","key","encryptionKey","values","nodes","rootNodeValue","recursivelyAddNodes","rootNode","value","parentKey","data","node","uuid","Array","children","map","child","type","List","RegExp","test","isDate","date","String","Number","Boolean","Null","fields","Object","keys","name","getNode","denormalizeRoot","store","stringify","recursivelyDenormalizeNode","nodeKey","toISOString","childKey","object","forEach","field","defaultNodeValue","parentNode","DecodedDataContext","createContext","useDecodedDataContext","context","useContext","Error","DateNodeCardView","props","date2HumanValue","year","getFullYear","toString","month","getMonth","padStart","day","getDate","DraggableItemsContext","useDraggableItemsProvider","useState","draggedItem","setDraggedItem","BlurredBar","style","theme","useTheme","backgroundColor","palette","text","primary","opacity","filter","BooleanNodeCardView","Typography","variant","color","component","EditBooleanInput","onChange","FormControl","fullWidth","InputLabel","Select","label","target","MenuItem","EditDateInput","disableToolbar","inputVariant","format","KeyboardButtonProps","EditNumberInput","TextField","id","event","isNaN","EditStringInput","EditValueInput","NodeTypeIcon","useSearchTextOnNodeRecursively","searchValue","searchTextOnNodeRecursively","toLocaleLowerCase","startKey","includes","some","ListNodeCardView","setSearchValue","searchMatches","onClick","e","stopPropagation","length","Input","placeholder","startAdornment","InputAdornment","position","ListItem","button","ListItemIcon","ListItemText","CardView","NewListItemDialogButton","updateNodes","templateNode","isDialogOpen","setIsDialogOpen","valueNode","setValueNode","Button","size","startIcon","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","labelId","newType","DialogActions","newParentnode","NullNodeCardView","NumberNodeCardView","NewFieldDialogButton","fieldName","setFieldName","closeAndClearDialog","display","alignItems","IconButton","fontSize","maxWidth","right","spacing","top","aria-label","Minimize","transform","Close","dividers","minHeight","minWidth","width","autoFocus","height","newParentNode","insertIntoPlace","droppedItem","hoverStatus","offset","newPosition","findIndex","f","slice","ObjectFieldNodeCardView","item","ref","useRef","setHover","draggableContainerProps","draggable","dropTargetProps","isBeingDragged","onDragStart","onDragEnd","undefined","zIndex","borderColor","main","left","bottom","borderWidth","borderRadius","shape","borderStyle","borderLeftStyle","borderRightStyle","borderTopStyle","borderBottomStyle","onDrop","sourceParent","targetParent","newSourceParent","onDragOver","current","boundingBox","getBoundingClientRect","halfWidth","centerX","console","log","pageX","preventDefault","onDragLeave","useDragObjectField","needsToExpand","useNeedsToExpand","isMinimized","setIsMinimized","Grid","xs","sm","md","Card","v","CardActionArea","disableRipple","CardContent","gutterBottom","EditFieldDialog","marginTop","newFieldName","setNewFieldName","oldValueNode","oldParentNode","isEditting","setIsEditting","useEffect","originalField","ObjectNodeCardView","searchHasFocus","setSearchHasFocus","OutlinedInput","onKeyDown","onFocus","onBlur","container","StringNodeCardView","arraybuffer2stringUTF16","buf","fromCharCode","apply","Uint16Array","string2arraybufferUTF16","str","bufffer","ArrayBuffer","bufView","i","strLen","charCodeAt","arraybuffer2stringUTF8","Uint8Array","arraybuffer2base64UTF8","aUTF8CodeUnits","prototype","call","_","idx","arr","btoa","buffer","btoaUTF8","base642arraybufferUTF8","str64","string2arraybufferUTF8","sBinaryString","atob","aBinaryView","atobUTF8","arraybuffer2base64UTF16","aUTF16CodeUnits","btoaUTF16","base642arraybufferUTF16","atobUTF16","plainText","a","iv","window","crypto","getRandomValues","subtle","importKey","cryptoKey","encrypt","cypher","split","encryptedMessage","decrypt","decryptedData","createKey","generateKey","exportKey","exportedKey","useDataEncryptionInSync","initialData","isProbablyJson","initialStore","setStore","initialEncryptedData","then","message","encryptedData","setEncryptedData","newNodes","newStore","CardInfo","isKeyHidden","setIsKeyHidden","CardHeader","Tooltip","placement","onDoubleClick","CardActions","href","download","disabled","CardViewRoot","initialValues","draggableData","Provider","Paper","padding","arrow","DragAndDrop","dataTransfer","files","onDragEnter","DataOptions","QUERY","gql","MemoryVaultCreateForm","onSubmit","setInitialData","setTitle","setEncryptionKey","useQuery","onCompleted","standardProposal","margin","align","CreateCardTitleInput","CreateCardKeyInput","CreateCardDataSection","Add","autoComplete","file","readFile","required","InputProps","endAdornment","Cached","expanded","setExpanded","STANDARD","dataOption","selectDataOption","justifyContent","aria-expanded","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","FormLabel","RadioGroup","CUSTOM","EMPTY","FormControlLabel","control","Radio","version","textTransform","outlineWidth","outlineStyle","outlineColor","secondary","GetApp","Done","hidden","onDone","reader","FileReader","onloadend","result","readAsText","MemoryPage","cards","setCards","isCreating","setIsCreating","card","c","newCard","old"],"mappings":"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","file":"static/js/8.ef17ccb2.chunk.js","sourcesContent":["import { v4 as uuid } from \"uuid\";\n\nexport type StoreKey = string;\ntype NodesStore = {\n  [key: string]: TNode;\n};\nexport type Store = {\n  rootNode: RootNode;\n  nodes: NodesStore;\n};\nexport type TNode =\n  | TObjectNode\n  | TListNode\n  | TDateNode\n  | TStringNode\n  | TBooleanNode\n  | TNumberNode\n  | TNullNode;\n\nexport interface TNodeWithKeys<T extends RefinedType> {\n  type: T;\n  key: StoreKey;\n  parentKey: StoreKey;\n}\nexport type TObjectField = {\n  name: string;\n  value: StoreKey;\n  parentKey: StoreKey;\n};\nexport interface TObjectNode extends TNodeWithKeys<RefinedType.Object> {\n  fields: TObjectField[];\n}\nexport interface TListNode extends TNodeWithKeys<RefinedType.List> {\n  children: StoreKey[];\n}\nexport interface TDateNode extends TNodeWithKeys<RefinedType.Date> {\n  date: Date;\n}\nexport interface TStringNode extends TNodeWithKeys<RefinedType.String> {\n  value: string;\n}\nexport interface TBooleanNode extends TNodeWithKeys<RefinedType.Boolean> {\n  value: boolean;\n}\nexport interface TNumberNode extends TNodeWithKeys<RefinedType.Number> {\n  value: number;\n}\nexport interface TNullNode extends TNodeWithKeys<RefinedType.Null> {}\n\nexport enum RefinedType {\n  List = \"List\",\n  Object = \"Object\",\n  Number = \"Number\",\n  Boolean = \"Boolean\",\n  String = \"String\",\n  Date = \"Date\",\n  Null = \"Null\",\n}\n\nconst ROOT_KEY = \"ROOT\";\nexport type RootNode = {\n  title: string;\n  encryptionKey: string;\n  created: Date;\n  updated: Date;\n  key: string;\n  value: StoreKey;\n};\n\nexport function normalizeRoot(\n  decodedData: string,\n  overrides: {\n    encryptionKey?: string;\n    title?: string;\n  },\n): Store {\n  const parsedDate = JSON.parse(decodedData);\n  const {\n    title = overrides.title ?? \"Primary\",\n    created = new Date(),\n    updated = new Date(),\n    key = ROOT_KEY,\n    encryptionKey = overrides.encryptionKey,\n    ...values\n  } = parsedDate;\n  const nodes = {};\n  const rootNodeValue = recursivelyAddNodes(nodes, ROOT_KEY, values);\n  const store: Store = {\n    rootNode: {\n      title,\n      encryptionKey,\n      created: new Date(created),\n      updated: new Date(updated),\n      key,\n      value: rootNodeValue.key,\n    },\n    nodes,\n  };\n  return store;\n}\n\nfunction recursivelyAddNodes(\n  nodes: NodesStore,\n  parentKey: StoreKey,\n  data: any,\n): TNode {\n  const node = getNode(nodes, parentKey, data);\n  nodes[node.key] = node;\n  return node;\n}\n\nfunction getNode(nodes: NodesStore, parentKey: StoreKey, value: any): TNode {\n  const key = uuid();\n  if (value instanceof Array) {\n    const childrenNodes = value.map((child: any) =>\n      recursivelyAddNodes(nodes, parentKey, child),\n    );\n    const children = childrenNodes.map((node) => node.key);\n    return { type: RefinedType.List, key, parentKey, children };\n  }\n  switch (typeof value) {\n    case \"string\": {\n      if (isDate(value)) {\n        const date = new Date(value);\n        return { type: RefinedType.Date, key, parentKey, date };\n      } else {\n        return { type: RefinedType.String, key, parentKey, value };\n      }\n    }\n    case \"number\":\n      return { type: RefinedType.Number, key, parentKey, value };\n    case \"boolean\":\n      return { type: RefinedType.Boolean, key, parentKey, value };\n    case \"object\":\n    default: {\n      if (value == null) {\n        return { type: RefinedType.Null, key, parentKey };\n      } else {\n        const fields = Object.keys(value).map((name) => ({\n          name,\n          value: recursivelyAddNodes(nodes, key, value[name]).key,\n          parentKey: key,\n        }));\n        return { type: RefinedType.Object, key, parentKey, fields };\n      }\n    }\n  }\n}\n\nexport function denormalizeRoot(store: Store): string {\n  return JSON.stringify({\n    title: store.rootNode.title,\n    created: store.rootNode.created,\n    updated: store.rootNode.updated,\n    key: store.rootNode.key,\n    ...recursivelyDenormalizeNode(store.nodes, store.rootNode.value),\n  });\n}\n\nexport function recursivelyDenormalizeNode(\n  nodes: NodesStore,\n  nodeKey: StoreKey,\n): any {\n  const node = nodes[nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return node.value;\n    case RefinedType.Date:\n      return node.date.toISOString();\n    case RefinedType.List:\n      return node.children.map((childKey) =>\n        recursivelyDenormalizeNode(nodes, childKey),\n      );\n    case RefinedType.Null:\n      return null;\n    case RefinedType.Number:\n      return node.value;\n    case RefinedType.Object:\n      const object: { [name: string]: any } = {};\n      node.fields.forEach((field) => {\n        object[field.name] = recursivelyDenormalizeNode(nodes, field.value);\n      });\n      return object;\n    case RefinedType.String:\n      return node.value;\n  }\n}\n\nexport function defaultNodeValue(\n  type: RefinedType,\n  parentNode: TObjectNode | TListNode,\n): TNode {\n  const key = uuid();\n  const parentKey = parentNode.key;\n  switch (type) {\n    case RefinedType.List:\n      return { type, parentKey, key, children: [] };\n    case RefinedType.Boolean:\n      return { type, parentKey, key, value: true };\n    case RefinedType.Date:\n      return { type, parentKey, key, date: new Date() };\n    case RefinedType.Null:\n      return { type, parentKey, key };\n    case RefinedType.Number:\n      return { type, parentKey, key, value: 0 };\n    case RefinedType.Object:\n      return { type, parentKey, key, fields: [] };\n    case RefinedType.String:\n      return { type, parentKey, key, value: \"\" };\n  }\n}\n\nfunction isDate(value: string): boolean {\n  const regex = RegExp(\n    /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/,\n  );\n  return regex.test(value);\n}\n","import { Store, TNode } from \"../../utils/normalization\";\nimport { createContext, useContext } from \"react\";\n\ntype TDecodedDataContext = {\n  store: Store;\n  updateNodes: ((nodes: TNode[]) => void) | null;\n};\nexport const DecodedDataContext = createContext<TDecodedDataContext | null>(null);\n\nexport default function useDecodedDataContext() {\n  const context = useContext(DecodedDataContext);\n  if (context == null) {\n    throw new Error(\"missing DecodedDataContext.Provider\");\n  }\n  return context;\n}\n","import { TDateNode } from \"../../../../utils/normalization\";\n\nexport default function DateNodeCardView(props: { node: TDateNode }) {\n  return <span>{date2HumanValue(props.node.date)}</span>;\n}\n\nexport function date2HumanValue(date: Date): string {\n  const year = date.getFullYear().toString();\n  const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getDate().toString().padStart(2, \"0\");\n  return `${month}-${day}-${year}`;\n}\n","import { createContext, useContext, useState } from \"react\";\n\nimport { TObjectField } from \"../../utils/normalization\";\n\ntype TDraggableItemsContext = {\n  draggedItem: TObjectField | null;\n  setDraggedItem(item: TObjectField | null): void;\n};\nexport const DraggableItemsContext = createContext<TDraggableItemsContext | null>(\n  null,\n);\nexport function useDraggableItemsContext() {\n  const context = useContext(DraggableItemsContext);\n  if (context == null) {\n    throw new Error(\"missing DraggableItemsContext.Provider\");\n  }\n  return context;\n}\n\nexport default function useDraggableItemsProvider() {\n  const [draggedItem, setDraggedItem] = useState<TObjectField | null>(null);\n  return {\n    draggedItem,\n    setDraggedItem,\n  };\n}\n","import React, { CSSProperties } from \"react\";\n\nimport { useTheme } from \"@material-ui/core\";\n\ntype Props = {\n  style?: CSSProperties;\n};\nexport default function BlurredBar({ style }: Props) {\n  const theme = useTheme();\n  return (\n    <div\n      style={{\n        backgroundColor: theme.palette.text.primary,\n        opacity: 0.1,\n        filter: \"blur(4px)\",\n        ...style,\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { TBooleanNode } from \"../../../../utils/normalization\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function BooleanNodeCardView(props: { node: TBooleanNode }) {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n      {props.node.value ? \"Yes\" : \"No\"}\n    </Typography>\n  );\n}\n","import { FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport { TBooleanNode, TNode } from \"../../../../utils/normalization\";\n\nimport React from \"react\";\n\ntype Props = {\n  node: TBooleanNode;\n  onChange(node: TNode): void;\n};\nexport default function EditBooleanInput({ node, onChange }: Props) {\n  return (\n    <FormControl variant=\"filled\" fullWidth>\n      <InputLabel>Initial value</InputLabel>\n      <Select\n        label=\"Type\"\n        value={node.value}\n        onChange={({ target: { value } }) => {\n          onChange({\n            ...node,\n            value: value === \"true\" ? true : false,\n          });\n        }}\n      >\n        <MenuItem value=\"true\">Yes</MenuItem>\n        <MenuItem value=\"false\">No</MenuItem>\n      </Select>\n    </FormControl>\n  );\n}\n","import { TDateNode, TNode } from \"../../../../utils/normalization\";\n\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport React from \"react\";\n\ntype Props = {\n  node: TDateNode;\n  onChange(node: TNode): void;\n};\nexport default function EditDateInput({ node, onChange }: Props) {\n  return (\n    <KeyboardDatePicker\n      disableToolbar\n      variant=\"inline\"\n      inputVariant=\"filled\"\n      fullWidth\n      format=\"MM/dd/yyyy\"\n      label=\"Initial Date\"\n      value={node.date}\n      onChange={(date: Date | null) => {\n        onChange({\n          ...node,\n          date: date ?? new Date(),\n        });\n      }}\n      KeyboardButtonProps={{\n        \"aria-label\": \"change date\",\n      }}\n    />\n  );\n}\n","import { TNode, TNumberNode } from \"../../../../utils/normalization\";\n\nimport React from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\ntype Props = {\n  node: TNumberNode;\n  onChange(node: TNode): void;\n};\nexport default function EditNumberInput({ node, onChange }: Props) {\n  return (\n    <TextField\n      variant=\"filled\"\n      id=\"name\"\n      label=\"Initial Value\"\n      type=\"number\"\n      value={node.value}\n      onChange={(event) => {\n        onChange({\n          ...node,\n          value: !isNaN(Number(event.target.value))\n            ? Number(event.target.value)\n            : node.value,\n        });\n      }}\n      fullWidth\n    />\n  );\n}\n","import { TNode, TStringNode } from \"../../../../utils/normalization\";\n\nimport React from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\ntype Props = {\n  node: TStringNode;\n  onChange(node: TNode): void;\n};\nexport default function EditStringInput({ node, onChange }: Props) {\n  return (\n    <TextField\n      id=\"name\"\n      label=\"Initial Value\"\n      variant=\"filled\"\n      type=\"string\"\n      value={node.value}\n      onChange={(event) => {\n        onChange({\n          ...node,\n          value: event.target.value,\n        });\n      }}\n      fullWidth\n    />\n  );\n}\n","import { RefinedType, TNode } from \"../../../utils/normalization\";\n\nimport EditBooleanInput from \"./Boolean/EditBooleanInput\";\nimport EditDateInput from \"./Date/EditDateInput\";\nimport EditNumberInput from \"./Number/EditNumberInput\";\nimport EditStringInput from \"./String/EditStringInput\";\nimport React from \"react\";\n\ntype Props = {\n  node: TNode | null;\n  onChange(node: TNode): void;\n};\nexport default function EditValueInput({ node, onChange }: Props) {\n  if (node === null) {\n    return null;\n  }\n  switch (node.type) {\n    case RefinedType.List:\n      return null;\n    case RefinedType.Boolean:\n      return <EditBooleanInput node={node} onChange={onChange} />;\n    case RefinedType.Date:\n      return <EditDateInput node={node} onChange={onChange} />;\n    case RefinedType.Null:\n      throw Error(\"Impossible\");\n    case RefinedType.Number:\n      return <EditNumberInput node={node} onChange={onChange} />;\n    case RefinedType.Object:\n      return null;\n    case RefinedType.String:\n      return <EditStringInput node={node} onChange={onChange} />;\n  }\n}\n","import Filter1OutlinedIcon from \"@material-ui/icons/Filter1Outlined\";\nimport FolderOpenOutlinedIcon from \"@material-ui/icons/FolderOpenOutlined\";\nimport HelpOutlineOutlinedIcon from \"@material-ui/icons/HelpOutlineOutlined\";\nimport ListOutlinedIcon from \"@material-ui/icons/ListOutlined\";\nimport React from \"react\";\nimport { RefinedType } from \"../../../utils/normalization\";\nimport SubjectOutlinedIcon from \"@material-ui/icons/SubjectOutlined\";\nimport TodayOutlinedIcon from \"@material-ui/icons/TodayOutlined\";\nimport ToggleOnOutlinedIcon from \"@material-ui/icons/ToggleOnOutlined\";\nimport useDecodedDataContext from \"../useDecodedDataContext\";\n\nfunction NodeTypeIcon(props: { nodeKey: string }) {\n  const { store } = useDecodedDataContext();\n  const node = store.nodes[props.nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return <ToggleOnOutlinedIcon />;\n    case RefinedType.Date:\n      return <TodayOutlinedIcon />;\n    case RefinedType.List:\n      return <ListOutlinedIcon />;\n    case RefinedType.Null:\n      return <HelpOutlineOutlinedIcon />;\n    case RefinedType.Number:\n      return <Filter1OutlinedIcon />;\n    case RefinedType.Object:\n      return <FolderOpenOutlinedIcon />;\n    case RefinedType.String:\n      return <SubjectOutlinedIcon />;\n  }\n}\n\nexport default NodeTypeIcon;\n","import { RefinedType, Store, StoreKey } from \"../../../../utils/normalization\";\n\nimport { date2HumanValue } from \"../Date/DateNodeCardView\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\n\ntype FilterFn = (value: string) => boolean;\n\nexport default function useSearchTextOnNodeRecursively(\n  searchValue: string,\n): FilterFn {\n  const { store } = useDecodedDataContext();\n  return function searchMatches(key: string) {\n    if (searchValue === \"\") {\n      return true;\n    }\n    return searchTextOnNodeRecursively(store, key, searchValue.toLocaleLowerCase());\n  };\n}\n\nfunction searchTextOnNodeRecursively(\n  store: Store,\n  startKey: StoreKey,\n  searchValue: string,\n): boolean {\n  const node = store.nodes[startKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return false;\n    case RefinedType.Date:\n      return date2HumanValue(node.date).toLocaleLowerCase().includes(searchValue);\n    case RefinedType.List:\n      return node.children.some((key) =>\n        searchTextOnNodeRecursively(store, key, searchValue),\n      );\n    case RefinedType.Null:\n      return searchValue === \"null\";\n    case RefinedType.Number:\n      return node.value.toString().toLocaleLowerCase().includes(searchValue);\n    case RefinedType.Object:\n      return node.fields.some(\n        (field) =>\n          field.name.toLocaleLowerCase().includes(searchValue) ||\n          searchTextOnNodeRecursively(store, field.value, searchValue),\n      );\n    case RefinedType.String:\n      return node.value.toLocaleLowerCase().includes(searchValue);\n  }\n}\n","import React, { useState } from \"react\";\nimport {\n  RefinedType,\n  TListNode,\n  TNode,\n  defaultNodeValue,\n} from \"../../../../utils/normalization\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Button from \"@material-ui/core/Button\";\nimport CardView from \"../CardView\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport EditValueInput from \"../EditValueInput\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport NodeTypeIcon from \"../NodeTypeIcon\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Select from \"@material-ui/core/Select\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\nimport useSearchTextOnNodeRecursively from \"../Object/useSearchTextOnNodeRecursively\";\n\nexport default function ListNodeCardView(props: { node: TListNode }) {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const searchMatches = useSearchTextOnNodeRecursively(searchValue);\n  return (\n    <div>\n      <div onClick={(e) => e.stopPropagation()}>\n        {props.node.children.length > 7 ? (\n          <FormControl>\n            <Input\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              placeholder=\"Search ...\"\n              startAdornment={\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n        ) : null}\n      </div>\n      <List>\n        {props.node.children.filter(searchMatches).map((key) => (\n          <ListItem button>\n            <ListItemIcon>\n              <NodeTypeIcon nodeKey={key} />\n            </ListItemIcon>\n            <ListItemText primary={<CardView nodeKey={key} />} />\n          </ListItem>\n        ))}\n        <ListItem>\n          <ListItemText\n            onClick={(e) => e.stopPropagation()}\n            primary={<NewListItemDialogButton parentNode={props.node} />}\n          />\n        </ListItem>\n      </List>\n    </div>\n  );\n}\n\nfunction NewListItemDialogButton(props: { parentNode: TListNode }) {\n  const { store, updateNodes } = useDecodedDataContext();\n  const templateNode =\n    props.parentNode.children.length > 0\n      ? defaultNodeValue(\n          store.nodes[props.parentNode.children[0]].type,\n          props.parentNode,\n        )\n      : null;\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [valueNode, setValueNode] = useState<TNode | null>(templateNode);\n  if (updateNodes == null) {\n    return null;\n  }\n  return (\n    <>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => setIsDialogOpen(true)}\n        startIcon={<AddIcon />}\n      >\n        Add{\" \"}\n      </Button>\n      <Dialog\n        open={isDialogOpen}\n        onClose={() => setIsDialogOpen(false)}\n        aria-labelledby=\"new-field-dialog-title\"\n      >\n        <DialogTitle id=\"new-field-dialog-title\">Add New List Item</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            All items on a list must have the same type.\n          </DialogContentText>\n          {!templateNode && (\n            <FormControl>\n              <InputLabel id=\"select-type-label\">Type</InputLabel>\n              <Select\n                labelId=\"select-type-label\"\n                value={valueNode?.type ?? \"\"}\n                onChange={(event) => {\n                  const newType: RefinedType = event.target.value as RefinedType;\n                  setValueNode(defaultNodeValue(newType, props.parentNode));\n                }}\n                fullWidth\n              >\n                <MenuItem value={RefinedType.Boolean}>Boolean</MenuItem>\n                <MenuItem value={RefinedType.Date}>Date</MenuItem>\n                <MenuItem value={RefinedType.Number}>Number</MenuItem>\n                <MenuItem value={RefinedType.Object}>Object</MenuItem>\n                <MenuItem value={RefinedType.String}>String</MenuItem>\n              </Select>\n            </FormControl>\n          )}\n          <EditValueInput node={valueNode} onChange={setValueNode} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsDialogOpen(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              if (valueNode !== null) {\n                const newParentnode = {\n                  ...props.parentNode,\n                  children: [...props.parentNode.children, valueNode.key],\n                };\n                updateNodes([valueNode, newParentnode]);\n              }\n              setValueNode(templateNode);\n              setIsDialogOpen(false);\n            }}\n            color=\"primary\"\n          >\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import React from \"react\";\nimport { TNullNode } from \"../../../../utils/normalization\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function NullNodeCardView(props: { node: TNullNode }) {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n      Null\n    </Typography>\n  );\n}\n","import React from \"react\";\nimport { TNumberNode } from \"../../../../utils/normalization\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function NumberNodeCardView(props: { node: TNumberNode }) {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n      {props.node.value}\n    </Typography>\n  );\n}\n","import { Close, Minimize } from \"@material-ui/icons\";\nimport { IconButton, useTheme } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport {\n  RefinedType,\n  TNode,\n  TObjectNode,\n  defaultNodeValue,\n} from \"../../../../utils/normalization\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport EditValueInput from \"../EditValueInput\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport TextField from \"@material-ui/core/TextField\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\n\nexport default function NewFieldDialogButton(props: { parentNode: TObjectNode }) {\n  const theme = useTheme();\n  const { updateNodes } = useDecodedDataContext();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [valueNode, setValueNode] = useState<TNode>(\n    defaultNodeValue(RefinedType.String, props.parentNode),\n  );\n  const [fieldName, setFieldName] = useState<string>(\"\");\n  if (updateNodes === null) {\n    return null;\n  }\n  const closeAndClearDialog = () => {\n    setIsDialogOpen(false);\n    setValueNode(defaultNodeValue(RefinedType.String, props.parentNode));\n    setFieldName(\"\");\n  };\n  return (\n    <span\n      style={{ display: \"flex\", alignItems: \"center\" }}\n      onClick={(event) => event.stopPropagation()}\n    >\n      <IconButton\n        onClick={(e) => {\n          setIsDialogOpen(true);\n        }}\n      >\n        <AddIcon fontSize=\"large\" />\n      </IconButton>\n      <Dialog\n        open={isDialogOpen}\n        onClose={() => setIsDialogOpen(false)}\n        aria-labelledby=\"new-item-dialog-title\"\n        fullWidth\n        maxWidth=\"xs\"\n      >\n        <DialogTitle id=\"new-item-dialog-title\">Add New Item</DialogTitle>\n        <div\n          style={{\n            position: \"absolute\",\n            display: \"flex\",\n            alignItems: \"center\",\n            right: theme.spacing(1),\n            top: theme.spacing(1),\n          }}\n        >\n          <IconButton aria-label=\"minimize\" onClick={() => setIsDialogOpen(false)}>\n            <Minimize style={{ transform: \"translate(0px, -7px)\" }} />\n          </IconButton>\n          <IconButton aria-label=\"close\" onClick={closeAndClearDialog}>\n            <Close />\n          </IconButton>\n        </div>\n        <DialogContent dividers style={{ minHeight: 180 }}>\n          <div style={{ display: \"flex\" }}>\n            <FormControl variant=\"filled\" style={{ minWidth: 120 }}>\n              <InputLabel>Type</InputLabel>\n              <Select\n                label=\"Type\"\n                value={valueNode.type}\n                onChange={(event) => {\n                  const newType: RefinedType = event.target.value as RefinedType;\n                  setValueNode(defaultNodeValue(newType, props.parentNode));\n                }}\n              >\n                <MenuItem value={RefinedType.List}>List</MenuItem>\n                <MenuItem value={RefinedType.Boolean}>Question</MenuItem>\n                <MenuItem value={RefinedType.Date}>Date</MenuItem>\n                <MenuItem value={RefinedType.Number}>Number</MenuItem>\n                <MenuItem value={RefinedType.Object}>Folder</MenuItem>\n                <MenuItem value={RefinedType.String}>Text</MenuItem>\n              </Select>\n            </FormControl>\n            <span style={{ width: theme.spacing(1) }} />\n            <TextField\n              label=\"Name\"\n              variant=\"filled\"\n              type=\"string\"\n              autoFocus\n              value={fieldName}\n              onChange={(event) => setFieldName(event.target.value)}\n              fullWidth\n            />\n          </div>\n          <div style={{ height: theme.spacing(1) }} />\n          <EditValueInput node={valueNode} onChange={setValueNode} />\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => {\n              if (valueNode) {\n                const newParentNode: TObjectNode = {\n                  ...props.parentNode,\n                  fields: [\n                    ...props.parentNode.fields,\n                    {\n                      name: fieldName,\n                      value: valueNode.key,\n                      parentKey: valueNode.parentKey,\n                    },\n                  ],\n                };\n                updateNodes([valueNode, newParentNode]);\n              }\n              closeAndClearDialog();\n            }}\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </span>\n  );\n}\n","import React, { useContext, useRef, useState } from \"react\";\nimport {\n  RefinedType,\n  TObjectField,\n  TObjectNode,\n} from \"../../../../utils/normalization\";\n\nimport { DraggableItemsContext } from \"../../useDraggableItemsContext\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\nimport { useTheme } from \"@material-ui/core\";\n\ntype useDragObjectFieldReturn = {\n  draggableContainerProps: {\n    draggable: boolean;\n    style?: React.CSSProperties;\n    onDragStart?(event: React.DragEvent<HTMLDivElement>): void;\n    onDragEnd?(event: React.DragEvent<HTMLDivElement>): void;\n  };\n  dropTargetProps: {\n    ref?: React.Ref<HTMLDivElement>;\n    style: React.CSSProperties;\n    onDrop?(event: React.DragEvent<HTMLDivElement>): void;\n    onDragOver?(event: React.DragEvent<HTMLDivElement>): void;\n    onDragLeave?(event: React.DragEvent<HTMLDivElement>): void;\n  };\n};\n\nexport default function useDragObjectField(\n  item: TObjectField,\n): useDragObjectFieldReturn {\n  const ref = useRef<HTMLDivElement>(null);\n  const theme = useTheme();\n  const { store, updateNodes } = useDecodedDataContext();\n  const [hoverStatus, setHover] = useState<\"AFTER\" | \"BEFORE\" | null>(null);\n  const context = useContext(DraggableItemsContext);\n  if (updateNodes === null || context === null) {\n    return {\n      draggableContainerProps: {\n        draggable: false,\n      },\n      dropTargetProps: {\n        style: { display: \"none\" },\n      },\n    };\n  }\n  const { draggedItem, setDraggedItem } = context;\n  const isBeingDragged = item.value === draggedItem?.value;\n  return {\n    draggableContainerProps: {\n      draggable: true,\n      style: { position: \"relative\" },\n      onDragStart: (event) => {\n        setDraggedItem(item);\n        event.stopPropagation();\n      },\n      onDragEnd: () => setDraggedItem(null),\n    },\n    dropTargetProps: {\n      ref,\n      style: {\n        position: \"absolute\",\n        display: draggedItem === null ? \"none\" : undefined,\n        zIndex: 1,\n        borderColor: theme.palette.primary.main,\n        ...(isBeingDragged\n          ? {\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0,\n              borderWidth: 2,\n              borderRadius: theme.shape.borderRadius,\n              borderStyle: \"dashed\",\n            }\n          : {\n              top: 4,\n              bottom: 4,\n              left: -2,\n              right: -2,\n              borderWidth: 4,\n              borderLeftStyle: hoverStatus === \"BEFORE\" ? \"solid\" : \"none\",\n              borderRightStyle: hoverStatus === \"AFTER\" ? \"solid\" : \"none\",\n              borderTopStyle: \"none\",\n              borderBottomStyle: \"none\",\n            }),\n      },\n      onDrop: () => {\n        if (hoverStatus === null || draggedItem === null) {\n          return;\n        }\n        const sourceParent = store.nodes[draggedItem.parentKey];\n        const targetParent = store.nodes[item.parentKey];\n        if (\n          sourceParent.type !== RefinedType.Object ||\n          targetParent.type !== RefinedType.Object\n        ) {\n          // we can only drag a field into an object from an object\n          return;\n        }\n\n        // remove item from source\n        const newSourceParent: TObjectNode = {\n          ...sourceParent,\n          fields: sourceParent.fields.filter((f) => f.value !== draggedItem.value),\n        };\n        if (item.parentKey === draggedItem.parentKey) {\n          updateNodes([\n            insertIntoPlace(newSourceParent, draggedItem, item, hoverStatus),\n          ]);\n        } else {\n          updateNodes([\n            newSourceParent,\n            insertIntoPlace(targetParent, draggedItem, item, hoverStatus),\n          ]);\n        }\n        setHover(null);\n        setDraggedItem(null);\n      },\n      onDragOver: (event) => {\n        if (ref.current == null || isBeingDragged) {\n          return;\n        }\n        const boundingBox = ref.current.getBoundingClientRect();\n        const halfWidth = boundingBox.width / 2;\n        const centerX = boundingBox.left + halfWidth;\n        console.log(\"is happening\");\n        setHover(event.pageX > centerX ? \"AFTER\" : \"BEFORE\");\n        event.preventDefault();\n      },\n      onDragLeave: () => {\n        setHover(null);\n      },\n    },\n  };\n}\n\nfunction insertIntoPlace(\n  parentNode: TObjectNode,\n  draggedItem: TObjectField,\n  droppedItem: TObjectField,\n  hoverStatus: \"AFTER\" | \"BEFORE\",\n): TObjectNode {\n  const offset = hoverStatus === \"AFTER\" ? 1 : 0;\n  const newPosition =\n    parentNode.fields.findIndex((f) => f.value === droppedItem.value) + offset;\n  return {\n    ...parentNode,\n    fields: [\n      ...parentNode.fields.slice(0, newPosition),\n      draggedItem,\n      ...parentNode.fields.slice(newPosition),\n    ],\n  };\n}\n","import { Card, CardActionArea, CardContent, useTheme } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { RefinedType, TObjectField } from \"../../../../utils/normalization\";\n\nimport BlurredBar from \"../../../../components/BlurredBar\";\nimport Button from \"@material-ui/core/Button\";\nimport CardView from \"../CardView\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport EditValueInput from \"../EditValueInput\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NodeTypeIcon from \"../NodeTypeIcon\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\nimport useDragObjectField from \"./useDragObjectField\";\n\n// replace this generic grow to show with something better by type\n// Maybe open a preview Dialog ?\n// when entering a folder put a dark background on top of parent?\nexport default function ObjectFieldNodeCardView({\n  name,\n  value,\n  parentKey,\n}: TObjectField) {\n  const theme = useTheme();\n  const { draggableContainerProps, dropTargetProps } = useDragObjectField({\n    name,\n    value,\n    parentKey,\n  });\n  const needsToExpand = useNeedsToExpand(name, value);\n  const [isMinimized, setIsMinimized] = useState(!needsToExpand);\n  return (\n    <Grid\n      item\n      xs={12}\n      sm={isMinimized || !needsToExpand ? 6 : 12}\n      md={isMinimized || !needsToExpand ? 4 : 12}\n      {...draggableContainerProps}\n    >\n      <div {...dropTargetProps} />\n      <Card\n        onClick={(e) => {\n          e.stopPropagation();\n          setIsMinimized((v) => !v);\n        }}\n        variant=\"outlined\"\n      >\n        <CardActionArea disableRipple>\n          <CardContent>\n            <Typography\n              gutterBottom\n              variant=\"h6\"\n              style={{ display: \"flex\", alignItems: \"center\" }}\n            >\n              <NodeTypeIcon nodeKey={value} />\n              <span style={{ width: theme.spacing(1) }} />\n              {isMinimized && name.length > 19 ? `${name.slice(0, 18)}...` : name}\n            </Typography>\n            {!isMinimized && (\n              <span\n                onClick={(e) => e.stopPropagation()}\n                style={{\n                  position: \"absolute\",\n                  top: theme.spacing(2),\n                  right: theme.spacing(2),\n                }}\n              >\n                <EditFieldDialog name={name} value={value} parentKey={parentKey} />\n              </span>\n            )}\n            {isMinimized ? (\n              <BlurredBar\n                style={{ width: \"80%\", height: 12, marginTop: theme.spacing(2) }}\n              />\n            ) : (\n              <div onClick={(e) => e.stopPropagation()}>\n                <CardView nodeKey={value} />\n              </div>\n            )}\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </Grid>\n  );\n}\n\nfunction useNeedsToExpand(name: string, nodeKey: string): boolean {\n  const { store } = useDecodedDataContext();\n  if (name.length > 20) {\n    return true;\n  }\n  const node = store.nodes[nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return false;\n    case RefinedType.Date:\n      return false;\n    case RefinedType.List:\n      return true;\n    case RefinedType.Null:\n      return false;\n    case RefinedType.Number:\n      return node.value.toString().length > 30;\n    case RefinedType.Object:\n      return true;\n    case RefinedType.String:\n      return node.value.length > 30;\n  }\n}\n\nfunction EditFieldDialog({ name, value, parentKey }: TObjectField) {\n  const theme = useTheme();\n  const { store, updateNodes } = useDecodedDataContext();\n  const [newFieldName, setNewFieldName] = useState(name);\n  const oldValueNode = store.nodes[value];\n  const oldParentNode = store.nodes[parentKey];\n  const [valueNode, setValueNode] = useState(oldValueNode);\n  const [isEditting, setIsEditting] = useState(false);\n\n  // refresh if new values are passed.\n  useEffect(() => {\n    setNewFieldName(name);\n    setValueNode(oldValueNode);\n  }, [name, oldValueNode, oldParentNode]);\n  if (updateNodes === null || oldParentNode.type !== RefinedType.Object) {\n    return null;\n  }\n  return (\n    <>\n      <IconButton onClick={() => setIsEditting(true)} size=\"small\">\n        <CreateIcon fontSize=\"small\" />\n      </IconButton>\n      {isEditting && (\n        <Dialog\n          open={isEditting}\n          onClose={() => setIsEditting(false)}\n          aria-labelledby=\"edit-dialog-title\"\n          fullWidth\n          maxWidth=\"xs\"\n        >\n          <DialogTitle id=\"edit-dialog-title\">Edit</DialogTitle>\n          <DialogContent>\n            <TextField\n              label=\"Name\"\n              variant=\"outlined\"\n              type=\"string\"\n              autoFocus\n              value={newFieldName}\n              onChange={(event) => setNewFieldName(event.target.value)}\n              fullWidth\n            />\n            <span style={{ width: theme.spacing(1) }} />\n            <EditValueInput node={valueNode} onChange={setValueNode} />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setIsEditting(false)}>Cancel</Button>\n            <Button\n              onClick={() => {\n                const newParentNode = {\n                  ...oldParentNode,\n                  fields: oldParentNode.fields.map((originalField) =>\n                    originalField.value !== value\n                      ? originalField\n                      : { ...originalField, name: newFieldName },\n                  ),\n                };\n                updateNodes([valueNode, newParentNode]);\n                setIsEditting(false);\n              }}\n            >\n              Save\n            </Button>\n          </DialogActions>\n        </Dialog>\n      )}\n    </>\n  );\n}\n","import { OutlinedInput, useTheme } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport NewFieldDialogButton from \"./NewFieldDialogButton\";\nimport ObjectFieldNodeCardView from \"./ObjectFieldNodeCardView\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { TObjectNode } from \"../../../../utils/normalization\";\nimport useSearchTextOnNodeRecursively from \"./useSearchTextOnNodeRecursively\";\n\ntype Props = { node: TObjectNode };\nexport default function ObjectNodeCardView({ node }: Props) {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const searchMatches = useSearchTextOnNodeRecursively(searchValue);\n  const theme = useTheme();\n  const [searchHasFocus, setSearchHasFocus] = useState(false);\n  return (\n    <>\n      {node.fields.length > 7 ? (\n        <Grid item xs={12} sm={searchHasFocus ? 6 : 4} md={searchHasFocus ? 4 : 3}>\n          <FormControl\n            variant=\"outlined\"\n            fullWidth={searchHasFocus || searchValue !== \"\"}\n          >\n            <OutlinedInput\n              onKeyDown={(event) => {\n                if (event.key === \" \") {\n                  // You've seen nothing\n                  event.preventDefault();\n                  setSearchValue((v) => v + \" \");\n                  // I will stop remove this mess later\n                }\n              }}\n              onFocus={() => setSearchHasFocus(true)}\n              onBlur={() => setSearchHasFocus(false)}\n              placeholder=\"Search ...\"\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              startAdornment={\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n          <div style={{ height: theme.spacing(2) }} />\n        </Grid>\n      ) : null}\n      <Grid container spacing={1} onClick={(event) => event.stopPropagation()}>\n        {node.fields\n          .filter(\n            (field) =>\n              field.name\n                .toLocaleLowerCase()\n                .includes(searchValue.toLocaleLowerCase()) ||\n              searchMatches(field.value),\n          )\n          .map((field) => (\n            <ObjectFieldNodeCardView\n              name={field.name}\n              value={field.value}\n              parentKey={node.key}\n              key={field.value}\n            />\n          ))}\n        <Grid item xs={12} sm={6} md={4} style={{ display: \"flex\" }}>\n          <NewFieldDialogButton parentNode={node} />\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","import React from \"react\";\nimport { TStringNode } from \"../../../../utils/normalization\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function StringNodeCardView(props: { node: TStringNode }) {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n      {props.node.value}\n    </Typography>\n  );\n}\n","import BooleanNodeCardView from \"./Boolean/BooleanNodeCardView\";\nimport DateNodeCardView from \"./Date/DateNodeCardView\";\nimport ListNodeCardView from \"./List/ListNodeCardView\";\nimport NullNodeCardView from \"./Null/NullNodeCardView\";\nimport NumberNodeCardView from \"./Number/NumberNodeCardView\";\nimport ObjectNodeCardView from \"./Object/ObjectNodeCardView\";\nimport React from \"react\";\nimport { RefinedType } from \"../../../utils/normalization\";\nimport StringNodeCardView from \"./String/StringNodeCardView\";\nimport useDecodedDataContext from \"../useDecodedDataContext\";\n\ntype Props = { nodeKey: string };\nexport default function CardView({ nodeKey }: Props) {\n  const { store } = useDecodedDataContext();\n  const node = store.nodes[nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return <BooleanNodeCardView node={node} />;\n    case RefinedType.Date:\n      return <DateNodeCardView node={node} />;\n    case RefinedType.List:\n      return <ListNodeCardView node={node} />;\n    case RefinedType.Null:\n      return <NullNodeCardView node={node} />;\n    case RefinedType.Number:\n      return <NumberNodeCardView node={node} />;\n    case RefinedType.Object:\n      return <ObjectNodeCardView node={node} />;\n    case RefinedType.String:\n      return <StringNodeCardView node={node} />;\n  }\n}\n","/**\n * ArrayBuffer to String UTF 16 and 8 helpers\n */\nexport function arraybuffer2stringUTF16(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\n\nexport function string2arraybufferUTF16(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  const bufView = new Uint16Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\nexport function arraybuffer2stringUTF8(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint8Array(buf) as any);\n}\n\nexport function string2arraybufferUTF8(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\n/**\n * Base 64 <-> array buffer UTF 16 and 8\n */\nexport function arraybuffer2base64UTF8(buf: ArrayBuffer): string {\n  return btoaUTF8(arraybuffer2stringUTF8(buf));\n}\n\nexport function base642arraybufferUTF8(str64: string): ArrayBuffer {\n  return string2arraybufferUTF8(atobUTF8(str64));\n}\n\nexport function arraybuffer2base64UTF16(buf: ArrayBuffer): string {\n  return btoaUTF16(arraybuffer2stringUTF16(buf));\n}\n\nexport function base642arraybufferUTF16(str64: string): ArrayBuffer {\n  return string2arraybufferUTF16(atobUTF16(str64));\n}\n\n/**\n * Base 64  <-> String UTF 16 and 8\n */\n\nfunction btoaUTF16(str: string): string {\n  const aUTF16CodeUnits = new Uint16Array(str.length);\n  Array.prototype.forEach.call(aUTF16CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF16CodeUnits.buffer));\n}\n\nfunction atobUTF16(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF16(aBinaryView.buffer);\n}\n\nfunction btoaUTF8(str: string): string {\n  const aUTF8CodeUnits = new Uint8Array(str.length);\n  Array.prototype.forEach.call(aUTF8CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF8CodeUnits.buffer));\n}\n\nfunction atobUTF8(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF8(aBinaryView.buffer);\n}\n","/**\n * Set of methods used to encrypt and decrypt the data, all operating on base 64\n * TODO: remove redundant conversions for more direct mappings.\n */\n\nimport { Store, TNode, denormalizeRoot, normalizeRoot } from \"./normalization\";\nimport {\n  arraybuffer2base64UTF16,\n  arraybuffer2base64UTF8,\n  arraybuffer2stringUTF16,\n  base642arraybufferUTF16,\n  base642arraybufferUTF8,\n  string2arraybufferUTF16,\n} from \"./data-manipulation\";\nimport { useEffect, useState } from \"react\";\n\n/**\n * Encrypts the data together with iv on base 64 format\n * @param {string} plainText: plain UTF 16 text\n * @param {string} key: encrypted on base 64 format\n */\nexport async function encrypt(plainText: string, key: string): Promise<string> {\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const cypher = await window.crypto.subtle.encrypt(\n    { name: \"AES-GCM\", iv: iv },\n    cryptoKey,\n    string2arraybufferUTF16(plainText),\n  );\n\n  // join iv and message\n  return `${arraybuffer2base64UTF8(iv)}!${arraybuffer2base64UTF16(cypher)}`;\n}\n\n/**\n * Decrypts the data to plain text\n * @param {string} data: encrypted on base 64 format\n * @param {string} key: encrypted on base 64 format\n */\nexport async function decrypt(data: string, key: string): Promise<string> {\n  // split iv from message\n  const [iv, encryptedMessage] = data.split(\"!\");\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const decryptedData = await window.crypto.subtle.decrypt(\n    { name: \"AES-GCM\", iv: base642arraybufferUTF8(iv) },\n    cryptoKey,\n    base642arraybufferUTF16(encryptedMessage),\n  );\n  return arraybuffer2stringUTF16(decryptedData);\n}\n\n/**\n * Creates an unique base 64 key for all encryptions\n */\nexport async function createKey(): Promise<string> {\n  const key = await window.crypto.subtle.generateKey(\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const exportedKey = await window.crypto.subtle.exportKey(\"raw\", key);\n  return arraybuffer2base64UTF16(exportedKey);\n}\n\nexport function useDataEncryptionInSync(\n  title: string,\n  encryptionKey: string,\n  initialData: string,\n): {\n  store: Store;\n  updateNodes: (nodes: TNode[]) => void;\n  encryptedData: string;\n} | null {\n  const isProbablyJson = initialData[0] === \"{\";\n\n  const initialStore = isProbablyJson\n    ? () => normalizeRoot(initialData, { title, encryptionKey })\n    : null;\n  const [store, setStore] = useState<Store | null>(initialStore);\n\n  // decrypted initial encryption data\n  const initialEncryptedData = isProbablyJson ? null : initialData;\n  useEffect(() => {\n    if (initialEncryptedData == null) {\n      return;\n    }\n    decrypt(initialEncryptedData, encryptionKey).then((message) => {\n      setStore(normalizeRoot(message, { title, encryptionKey }));\n    });\n  }, [initialEncryptedData, encryptionKey, title]);\n\n  // keep store always encrypted\n  const [encryptedData, setEncryptedData] = useState<string | null>(null);\n  useEffect(() => {\n    if (store == null) {\n      return;\n    }\n    encrypt(denormalizeRoot(store), encryptionKey).then(setEncryptedData);\n  }, [store, encryptionKey]);\n\n  if (store === null || encryptedData === null) {\n    return null;\n  }\n\n  return {\n    store,\n    updateNodes: (nodes: TNode[]) => {\n      const newNodes = { ...store.nodes };\n      nodes.forEach((node) => (newNodes[node.key] = node));\n      const newStore = {\n        rootNode: {\n          ...store.rootNode,\n          updated: new Date(),\n        },\n        nodes: newNodes,\n      };\n      setStore(newStore);\n    },\n    encryptedData,\n  };\n}\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport BlurredBar from \"../../../components/BlurredBar\";\nimport { RootNode } from \"../../../utils/normalization\";\nimport { date2HumanValue } from \"./Date/DateNodeCardView\";\n\ntype Props = {\n  rootNode: RootNode;\n  encryptedData: string | null;\n};\nexport default function CardInfo({ rootNode, encryptedData }: Props) {\n  const [isKeyHidden, setIsKeyHidden] = useState(true);\n\n  return (\n    <Card style={{ maxWidth: 400 }} variant=\"outlined\">\n      <CardHeader title=\"Details\" />\n      <CardContent>\n        <Typography variant=\"body2\">Title</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n          {rootNode.title}\n        </Typography>\n        <Typography variant=\"body2\">Encrypted key</Typography>\n        <Tooltip title=\"double click to show\" placement=\"top\">\n          <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n            gutterBottom\n            onDoubleClick={() => setIsKeyHidden((v) => !v)}\n          >\n            {!isKeyHidden ? (\n              rootNode.encryptionKey\n            ) : (\n              <BlurredBar style={{ height: 12, width: \"100%\", marginTop: 8 }} />\n            )}\n          </Typography>\n        </Tooltip>\n        <Typography variant=\"body2\">Created</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n          {date2HumanValue(rootNode.created)}\n        </Typography>\n        <Typography variant=\"body2\">Last Updated</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n          {date2HumanValue(rootNode.updated)}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          href={`data:text/plain;charset=base64,${rootNode.encryptionKey}`}\n          download=\"key.ish\"\n        >\n          Save Key\n        </Button>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          disabled={encryptedData == null}\n          href={`data:text/plain;charset=base64,${encryptedData}`}\n          download=\"data.ish\"\n        >\n          Save Data\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import { IconButton, Paper, Tooltip, Typography, useTheme } from \"@material-ui/core\";\nimport useDraggableItemsProvider, {\n  DraggableItemsContext,\n} from \"../useDraggableItemsContext\";\n\nimport CardInfo from \"./CardInfo\";\nimport CardView from \"./CardView\";\nimport { Close } from \"@material-ui/icons\";\nimport { DecodedDataContext } from \"../useDecodedDataContext\";\nimport React from \"react\";\nimport { Store } from \"../../../utils/normalization\";\nimport { useDataEncryptionInSync } from \"../../../utils/encryption\";\n\nexport type CardDataProps = {\n  children?(store: Store): void;\n  title: string;\n  initialValues: {\n    encryptionKey: string;\n    initialData: string;\n  };\n};\ntype Props = CardDataProps & {\n  onClose: () => void;\n};\nexport default function CardViewRoot({\n  children,\n  title,\n  initialValues: { encryptionKey, initialData },\n  onClose,\n}: Props) {\n  const theme = useTheme();\n  const draggableData = useDraggableItemsProvider();\n  const data = useDataEncryptionInSync(title, encryptionKey, initialData);\n  if (!data) {\n    return null;\n  }\n  const { store, updateNodes, encryptedData } = data;\n  return (\n    <DraggableItemsContext.Provider value={draggableData}>\n      <DecodedDataContext.Provider value={{ store, updateNodes }}>\n        <Paper style={{ position: \"relative\", padding: theme.spacing(3) }}>\n          <div\n            style={{\n              position: \"absolute\",\n              right: theme.spacing(1),\n              top: theme.spacing(1),\n            }}\n          >\n            <Tooltip title=\"Did you save? Just checking\" arrow>\n              <IconButton aria-label=\"close card\" onClick={onClose}>\n                <Close />\n              </IconButton>\n            </Tooltip>\n          </div>\n          <CardInfo rootNode={store.rootNode} encryptedData={encryptedData} />\n          <div style={{ height: theme.spacing(3) }} />\n          <Typography variant=\"h2\">Data</Typography>\n          <CardView nodeKey={store.rootNode.value} />\n          {children && children(store)}\n        </Paper>\n      </DecodedDataContext.Provider>\n    </DraggableItemsContext.Provider>\n  );\n}\n","import { ReactNode } from \"react\";\n\ntype Props = {\n  children: ReactNode;\n  onDrop(file: File | null | undefined): void;\n};\nexport default function DragAndDrop({ children, onDrop }: Props) {\n  return (\n    <div\n      onDrop={(event) => {\n        event.preventDefault();\n        onDrop(event.dataTransfer.files[0]);\n      }}\n      onDragOver={(event) => {\n        event.preventDefault();\n      }}\n      onDragEnter={(event) => {\n        event.preventDefault();\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n","import {\n  Add,\n  Cached,\n  Done,\n  ExpandLess,\n  ExpandMore,\n  GetApp,\n} from \"@material-ui/icons\";\nimport {\n  Button,\n  Collapse,\n  FormControlLabel,\n  FormLabel,\n  IconButton,\n  InputAdornment,\n  Paper,\n  Radio,\n  RadioGroup,\n  TextField,\n  Tooltip,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nimport { CardDataProps } from \"../cards/CardViewRoot\";\nimport DragAndDrop from \"./DragAndDrop\";\nimport { createKey } from \"../../../utils/encryption\";\n\ntype OfflinePageResponse = {\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n};\nconst QUERY = gql`\n  query OfflinePage {\n    standardProposal {\n      version\n      data\n    }\n  }\n`;\n\nenum DataOptions {\n  STANDARD = \"STANDARD\",\n  EMPTY = \"EMPTY\",\n  CUSTOM = \"CUSTOM\",\n}\ntype Props = {\n  onSubmit(card: CardDataProps): void;\n};\nexport default function MemoryVaultCreateForm({ onSubmit }: Props) {\n  const theme = useTheme();\n  const [initialData, setInitialData] = useState<string | null>(null);\n  const [title, setTitle] = useState(\"\");\n  const [encryptionKey, setEncryptionKey] = useState(\"\");\n  const { data } = useQuery<OfflinePageResponse>(QUERY, {\n    onCompleted: (data) => {\n      setInitialData(data.standardProposal.data);\n    },\n  });\n  if (data == null) {\n    return null;\n  }\n  return (\n    <Paper\n      style={{\n        padding: theme.spacing(4),\n        margin: \"auto\",\n        maxWidth: 480,\n        width: \"100%\",\n      }}\n    >\n      <Typography align=\"center\" variant=\"h3\">\n        Start\n      </Typography>\n      <div style={{ height: theme.spacing(4) }} />\n      <CreateCardTitleInput title={title} setTitle={setTitle} />\n      <CreateCardKeyInput\n        encryptionKey={encryptionKey}\n        setEncryptionKey={setEncryptionKey}\n      />\n      <CreateCardDataSection\n        standardProposal={data.standardProposal}\n        setInitialData={setInitialData}\n      />\n      <div style={{ height: theme.spacing(1) }} />\n      <Button\n        fullWidth\n        variant=\"contained\"\n        disabled={encryptionKey === \"\" || initialData === null}\n        color=\"primary\"\n        size=\"large\"\n        startIcon={<Add />}\n        onClick={() => {\n          onSubmit({\n            title: title !== \"\" ? title : \"Primary\",\n            initialValues: {\n              encryptionKey,\n              initialData: initialData as string,\n            },\n          });\n        }}\n      >\n        Open\n      </Button>\n    </Paper>\n  );\n}\n\ntype CreateCardTitleInputProps = {\n  title: string;\n  setTitle: (title: string) => void;\n};\nfunction CreateCardTitleInput({ title, setTitle }: CreateCardTitleInputProps) {\n  return (\n    <TextField\n      variant=\"outlined\"\n      margin=\"normal\"\n      fullWidth\n      label=\"Title\"\n      autoComplete=\"title\"\n      value={title}\n      onChange={(e) => setTitle(e.target.value)}\n      autoFocus\n    />\n  );\n}\n\ntype CreateCardKeyInputProps = {\n  encryptionKey: string;\n  setEncryptionKey: (encryptionKey: string) => void;\n};\nfunction CreateCardKeyInput({\n  encryptionKey,\n  setEncryptionKey,\n}: CreateCardKeyInputProps) {\n  return (\n    <DragAndDrop onDrop={(file) => readFile(file, setEncryptionKey)}>\n      <TextField\n        variant=\"outlined\"\n        margin=\"normal\"\n        required\n        fullWidth\n        label=\"Encryption Key\"\n        type=\"password\"\n        autoComplete=\"current-encryption-key\"\n        value={encryptionKey}\n        onChange={(e) => setEncryptionKey(e.target.value)}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Tooltip title=\"Generate key\" arrow>\n                <IconButton\n                  aria-label=\"generate encryption Key\"\n                  onClick={() => createKey().then(setEncryptionKey)}\n                >\n                  <Cached />\n                </IconButton>\n              </Tooltip>\n            </InputAdornment>\n          ),\n        }}\n      />\n    </DragAndDrop>\n  );\n}\n\ntype CreateCardDataSectionProps = {\n  setInitialData: (initialData: string | null) => void;\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n};\nfunction CreateCardDataSection({\n  standardProposal,\n  setInitialData,\n}: CreateCardDataSectionProps) {\n  const theme = useTheme();\n  const [expanded, setExpanded] = useState(false);\n  const [dataOption, selectDataOption] = useState<DataOptions>(DataOptions.STANDARD);\n  const [encryptedData, setEncryptedData] = useState<string | null>(null);\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Typography variant=\"body1\">Data Options</Typography>\n        <IconButton\n          onClick={() => setExpanded((e) => !e)}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          {expanded ? <ExpandLess /> : <ExpandMore />}\n        </IconButton>\n      </div>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <FormLabel component=\"legend\">Initial Data</FormLabel>\n        <RadioGroup\n          aria-label=\"Initial data\"\n          value={dataOption}\n          onChange={(event) => {\n            const dataOption: DataOptions = (event.target as HTMLInputElement)\n              .value as DataOptions;\n            selectDataOption(dataOption);\n            switch (dataOption) {\n              case DataOptions.CUSTOM:\n                return setInitialData(encryptedData);\n              case DataOptions.EMPTY:\n                return setInitialData(\"{}\");\n              case DataOptions.STANDARD:\n                return setInitialData(standardProposal.data);\n            }\n          }}\n        >\n          <FormControlLabel\n            value={DataOptions.STANDARD}\n            control={<Radio />}\n            label={`Standard v${standardProposal.version}`}\n          />\n          <FormControlLabel\n            value={DataOptions.EMPTY}\n            control={<Radio />}\n            label=\"Empty\"\n          />\n          <FormControlLabel\n            value={DataOptions.CUSTOM}\n            control={<Radio />}\n            label=\"My own\"\n          />\n        </RadioGroup>\n        {DataOptions.CUSTOM === dataOption && (\n          <DragAndDrop\n            onDrop={(file) =>\n              readFile(file, (data) => {\n                setEncryptedData(data);\n                if (dataOption === DataOptions.CUSTOM) {\n                  setInitialData(data);\n                }\n              })\n            }\n          >\n            <Button\n              component=\"label\"\n              fullWidth\n              style={{\n                textTransform: \"none\",\n                outlineWidth: 2,\n                outlineStyle: \"dashed\",\n                outlineColor: theme.palette.secondary.main,\n              }}\n              startIcon={encryptedData === null ? <GetApp /> : <Done />}\n            >\n              <input\n                hidden\n                type=\"file\"\n                onChange={(e) =>\n                  readFile(e.target.files?.[0], (data) => {\n                    setEncryptedData(data);\n                    if (dataOption === DataOptions.CUSTOM) {\n                      setInitialData(data);\n                    }\n                  })\n                }\n              />\n              {encryptedData === null ? (\n                <Typography variant=\"body1\">\n                  Drag or upload your encrypted data\n                </Typography>\n              ) : (\n                <Typography variant=\"body1\">Done</Typography>\n              )}\n            </Button>\n          </DragAndDrop>\n        )}\n      </Collapse>\n    </>\n  );\n}\n\nfunction readFile(file: File | null | undefined, onDone: (reuslt: string) => void) {\n  if (!file) return;\n  const reader = new FileReader();\n  reader.onloadend = () => {\n    if (typeof reader.result === \"string\") {\n      onDone(reader.result);\n    }\n  };\n  reader.readAsText(file);\n}\n","import { Button, useTheme } from \"@material-ui/core\";\nimport CardViewRoot, { CardDataProps } from \"./cards/CardViewRoot\";\nimport React, { useState } from \"react\";\n\nimport { Add } from \"@material-ui/icons\";\nimport MemoryVaultCreateForm from \"./create/MemoryVaultCreateForm\";\n\nexport default function MemoryPage() {\n  const theme = useTheme();\n  const [cards, setCards] = useState<CardDataProps[]>([]);\n  const [isCreating, setIsCreating] = useState(true);\n  return (\n    <>\n      {cards.map((card) => (\n        <div key={card.initialValues.encryptionKey}>\n          <CardViewRoot\n            {...card}\n            onClose={() =>\n              setCards(\n                cards.filter(\n                  (c) =>\n                    card.initialValues.encryptionKey !==\n                    c.initialValues.encryptionKey,\n                ),\n              )\n            }\n          />\n          <div style={{ height: theme.spacing(2) }} />\n        </div>\n      ))}\n      {isCreating || cards.length === 0 ? (\n        <MemoryVaultCreateForm\n          onSubmit={(newCard) => {\n            setIsCreating(false);\n            setCards((old) => [...old, newCard]);\n          }}\n        />\n      ) : (\n        <Button\n          fullWidth\n          variant=\"outlined\"\n          color=\"primary\"\n          startIcon={<Add />}\n          onClick={() => setIsCreating(true)}\n        >\n          Open\n        </Button>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}