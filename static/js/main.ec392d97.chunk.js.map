{"version":3,"sources":["NavBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["QUERY","gql","containerStyle","display","justifyContent","background","padding","listStyle","margin","listItemStyle","fontWeight","color","whiteSpace","marginInlineEnd","textDecoration","NavBar","data","useQuery","style","to","user","username","Home","loadable","Offline","Standard","Proposal","App","flexDirection","alignItems","maxWidth","width","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","authLink","setContext","_","headers","authorization","localStorage","getItem","client","ApolloClient","link","concat","createHttpLink","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ec392d97.chunk.js","sourcesContent":["import React, { CSSProperties, FunctionComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nconst QUERY = gql`\n  query NavBarLoggedIn {\n    user {\n      username\n    }\n  }\n`;\n\ntype NavBarLoggedInResponse = {\n  user?: {\n    username: string;\n  };\n};\nconst containerStyle: CSSProperties = {\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  background: \"#24292e\",\n  padding: 20,\n}\nconst listStyle: CSSProperties = {\n  display: \"flex\",\n  listStyle: \"none\",\n  padding: 0,\n  margin: 0,\n};\nconst listItemStyle: CSSProperties = {\n  fontWeight: 600,\n  color: 'white',\n  whiteSpace: 'nowrap',\n  marginInlineEnd: 20,\n  textDecoration: 'none',\n}\n\nconst NavBar: FunctionComponent<{}> = () => {\n  const { data } = useQuery<NavBarLoggedInResponse>(QUERY);\n  return (\n    <div style={containerStyle}>\n      <ul style={listStyle}>\n        <li>\n          <Link style={listItemStyle} to=\"/minder\">Home</Link>\n        </li>\n        <li>\n          <Link style={listItemStyle} to=\"/minder/offline\">Offline Mode</Link>\n        </li>\n        <li>\n          <Link style={listItemStyle} to=\"/minder/standard\">Standard</Link>\n        </li>\n      </ul>\n      {data?.user != null && (\n        <div style={listItemStyle}>\n          {data.user.username}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NavBar;\n","// @flow\n\nimport React, { FunctionComponent } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport loadable from \"@loadable/component\";\nimport NavBar from \"./NavBar\";\n\nconst Home = loadable(() => import(\"./Home\"));\nconst Offline = loadable(() => import(\"./Offline\"));\nconst Standard = loadable(() => import(\"./Standard\"));\nconst Proposal = loadable(() => import(\"./Proposal\"));\n\nconst App: FunctionComponent<{}> = () => {\n  return (\n    <Router>\n      <NavBar />\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <div style={{ maxWidth: 800, width: \"100%\" }}>\n          <Switch>\n            <Route exact path=\"/minder/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/minder/offline\">\n              <Offline />\n            </Route>\n            <Route path=\"/minder/standard\">\n              <Standard />\n            </Route>\n            <Route path=\"/minder/proposal/:proposalId\">\n              <Proposal />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { ApolloProvider, ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { setContext } from '@apollo/client/link/context';\n\nconst authLink = setContext((_, { headers }) => ({\n  headers: {\n    ...headers,\n    authorization: localStorage.getItem('token') ?? '',\n  }\n}));\n\nconst client = new ApolloClient({\n  link: authLink.concat(createHttpLink({\n    uri: \"https://thawing-wildwood-69808.herokuapp.com/graphql\",\n  })),\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n\nserviceWorker.register({});\n"],"sourceRoot":""}