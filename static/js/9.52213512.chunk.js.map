{"version":3,"sources":["utils/data-manipulation.ts","utils/encryption.ts","pages/memory/cards/CardInfo.tsx","pages/memory/cards/CardRoot.tsx","pages/standard/StandardPage.tsx"],"names":["arraybuffer2stringUTF16","buf","String","fromCharCode","apply","Uint16Array","string2arraybufferUTF16","str","bufffer","ArrayBuffer","length","bufView","i","strLen","charCodeAt","arraybuffer2stringUTF8","Uint8Array","arraybuffer2base64UTF8","aUTF8CodeUnits","Array","prototype","forEach","call","_","idx","arr","btoa","buffer","btoaUTF8","base642arraybufferUTF8","str64","string2arraybufferUTF8","sBinaryString","atob","aBinaryView","atobUTF8","arraybuffer2base64UTF16","aUTF16CodeUnits","btoaUTF16","base642arraybufferUTF16","atobUTF16","plainText","key","a","iv","window","crypto","getRandomValues","subtle","importKey","name","cryptoKey","encrypt","cypher","data","split","encryptedMessage","decrypt","decryptedData","createKey","generateKey","exportKey","exportedKey","isKeyValid","test","useDataAsStore","decodedData","encryptionKey","title","useState","store","setStore","useEffect","normalizeRoot","updateNodes","nodes","newNodes","node","newStore","rootNode","updated","Date","useDataDecryption","initialData","setDecryptedData","hasFailed","setHasFailed","then","catch","encryptData","onComplete","denormalizeRoot","CardInfo","isKeyHidden","setIsKeyHidden","useDecodedDataContext","style","maxWidth","variant","subheader","placement","color","gutterBottom","onDoubleClick","v","height","width","marginTop","display","container","spacing","item","xs","date2HumanValue","created","size","href","download","onClick","element","document","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","CardRoot","children","isReadOnly","initialValues","onClose","theme","useTheme","draggableData","useDraggableItemsProvider","Provider","value","position","padding","right","top","arrow","aria-label","nodeKey","ADD_PROPOSAL","gql","QUERY","ProposedAPISection","standardProposal","version","SUGGESTED_PROPOSAL","type","description","MakeAProposalSection","isCreating","setIsCreating","setTitle","useMutation","addProposal","JSON","stringify","fullWidth","variables","proposal","margin","flexDirection","alignItems","label","onChange","e","target","autoFocus","marginBottom","AllProposalsSection","proposals","history","useHistory","map","uuid","push","StandardPage","useQuery","user"],"mappings":"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","file":"static/js/9.52213512.chunk.js","sourcesContent":["/**\n * ArrayBuffer to String UTF 16 and 8 helpers\n */\nexport function arraybuffer2stringUTF16(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\n\nexport function string2arraybufferUTF16(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  const bufView = new Uint16Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\nexport function arraybuffer2stringUTF8(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint8Array(buf) as any);\n}\n\nexport function string2arraybufferUTF8(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\n/**\n * Base 64 <-> array buffer UTF 16 and 8\n */\nexport function arraybuffer2base64UTF8(buf: ArrayBuffer): string {\n  return btoaUTF8(arraybuffer2stringUTF8(buf));\n}\n\nexport function base642arraybufferUTF8(str64: string): ArrayBuffer {\n  return string2arraybufferUTF8(atobUTF8(str64));\n}\n\nexport function arraybuffer2base64UTF16(buf: ArrayBuffer): string {\n  return btoaUTF16(arraybuffer2stringUTF16(buf));\n}\n\nexport function base642arraybufferUTF16(str64: string): ArrayBuffer {\n  return string2arraybufferUTF16(atobUTF16(str64));\n}\n\n/**\n * Base 64  <-> String UTF 16 and 8\n */\n\nfunction btoaUTF16(str: string): string {\n  const aUTF16CodeUnits = new Uint16Array(str.length);\n  Array.prototype.forEach.call(aUTF16CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF16CodeUnits.buffer));\n}\n\nfunction atobUTF16(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF16(aBinaryView.buffer);\n}\n\nfunction btoaUTF8(str: string): string {\n  const aUTF8CodeUnits = new Uint8Array(str.length);\n  Array.prototype.forEach.call(aUTF8CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF8CodeUnits.buffer));\n}\n\nfunction atobUTF8(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF8(aBinaryView.buffer);\n}\n","/**\n * Set of methods used to encrypt and decrypt the data, all operating on base 64\n * TODO: remove redundant conversions for more direct mappings.\n */\n\nimport { Store, TNode, denormalizeRoot, normalizeRoot } from \"./normalization\";\nimport {\n  arraybuffer2base64UTF16,\n  arraybuffer2base64UTF8,\n  arraybuffer2stringUTF16,\n  base642arraybufferUTF16,\n  base642arraybufferUTF8,\n  string2arraybufferUTF16,\n} from \"./data-manipulation\";\nimport { useEffect, useState } from \"react\";\n\n/**\n * Encrypts the data together with iv on base 64 format\n * @param {string} plainText: plain UTF 16 text\n * @param {string} key: encrypted on base 64 format\n */\nexport async function encrypt(plainText: string, key: string): Promise<string> {\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const cypher = await window.crypto.subtle.encrypt(\n    { name: \"AES-GCM\", iv: iv },\n    cryptoKey,\n    string2arraybufferUTF16(plainText),\n  );\n\n  // join iv and message\n  return `${arraybuffer2base64UTF8(iv)}!${arraybuffer2base64UTF16(cypher)}`;\n}\n\n/**\n * Decrypts the data to plain text\n * @param {string} data: encrypted on base 64 format\n * @param {string} key: encrypted on base 64 format\n */\nexport async function decrypt(data: string, key: string): Promise<string> {\n  // split iv from message\n  const [iv, encryptedMessage] = data.split(\"!\");\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const decryptedData = await window.crypto.subtle.decrypt(\n    { name: \"AES-GCM\", iv: base642arraybufferUTF8(iv) },\n    cryptoKey,\n    base642arraybufferUTF16(encryptedMessage),\n  );\n  return arraybuffer2stringUTF16(decryptedData);\n}\n\n/**\n * Creates an unique base 64 key for all encryptions\n */\nexport async function createKey(): Promise<string> {\n  const key = await window.crypto.subtle.generateKey(\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const exportedKey = await window.crypto.subtle.exportKey(\"raw\", key);\n  return arraybuffer2base64UTF16(exportedKey);\n}\n\nexport function isKeyValid(key: string): boolean {\n  const base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n  return base64regex.test(key) && key.length === 44;\n}\n\nexport function useDataAsStore(\n  decodedData: string | null,\n  encryptionKey?: string,\n  title?: string,\n): {\n  store: Store;\n  updateNodes: (nodes: TNode[]) => void;\n} | null {\n  const [store, setStore] = useState<Store | null>(null);\n  useEffect(() => {\n    if (decodedData === null) {\n      return;\n    }\n    setStore(normalizeRoot(decodedData, { title, encryptionKey }));\n  }, [decodedData, encryptionKey, title]);\n\n  if (store === null) {\n    return null;\n  }\n\n  return {\n    store,\n    updateNodes: (nodes: TNode[]) => {\n      const newNodes = { ...store.nodes };\n      nodes.forEach((node) => (newNodes[node.key] = node));\n      const newStore = {\n        rootNode: {\n          ...store.rootNode,\n          updated: new Date(),\n        },\n        nodes: newNodes,\n      };\n      setStore(newStore);\n    },\n  };\n}\n\nexport function useDataDecryption(initialData: string, encryptionKey: string) {\n  const [decryptedData, setDecryptedData] = useState<string | null>(null);\n  const [hasFailed, setHasFailed] = useState<boolean>(false);\n  useEffect(() => {\n    const isDecryptedAlready = initialData[0] === \"{\";\n    if (isDecryptedAlready) {\n      setDecryptedData(initialData);\n      setHasFailed(false);\n    } else {\n      decrypt(initialData, encryptionKey)\n        .then((data) => {\n          setDecryptedData(data);\n          setHasFailed(false);\n        })\n        .catch(() => {\n          setHasFailed(true);\n          setDecryptedData(\"{}\");\n        });\n    }\n  }, [initialData, encryptionKey]);\n  return { decryptedData, hasFailed };\n}\n\nexport function useDataEncryption(store: Store) {\n  const [encryptedData, setEncryptedData] = useState<string | null>(null);\n  useEffect(() => {\n    encryptData(store, setEncryptedData);\n  }, [store, store.rootNode.encryptionKey]);\n  return encryptedData;\n}\n\nexport function encryptData(\n  store: Store,\n  onComplete: (encryptedData: string) => void,\n) {\n  const plainText = denormalizeRoot(store);\n  encrypt(plainText, store.rootNode.encryptionKey).then(onComplete);\n}\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Grid,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport BlurredBar from \"../../../components/BlurredBar\";\nimport { date2HumanValue } from \"./Date/DateNodeCardView\";\nimport { encryptData } from \"../../../utils/encryption\";\nimport useDecodedDataContext from \"../useDecodedDataContext\";\n\nexport default function CardInfo() {\n  const [isKeyHidden, setIsKeyHidden] = useState(true);\n  const { store } = useDecodedDataContext();\n  return (\n    <Card style={{ maxWidth: 400 }} variant=\"outlined\">\n      <CardHeader\n        title={store.rootNode.title}\n        subheader={\n          <Tooltip title=\"double click to show\" placement=\"top\">\n            <Typography\n              variant=\"body2\"\n              color=\"textSecondary\"\n              gutterBottom\n              onDoubleClick={() => setIsKeyHidden((v) => !v)}\n            >\n              {!isKeyHidden ? (\n                store.rootNode.encryptionKey\n              ) : (\n                <BlurredBar\n                  style={{\n                    height: 12,\n                    width: \"100%\",\n                    marginTop: 8,\n                    display: \"block\",\n                  }}\n                />\n              )}\n            </Typography>\n          </Tooltip>\n        }\n      />\n      <CardContent>\n        <Grid container spacing={1}>\n          <Grid item xs={6}>\n            <Typography variant=\"body2\">Created</Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n              {date2HumanValue(store.rootNode.created)}\n            </Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography variant=\"body2\">Last Updated</Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n              {date2HumanValue(store.rootNode.updated)}\n            </Typography>\n          </Grid>\n        </Grid>\n      </CardContent>\n      <CardActions>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          href={`data:text/plain;charset=base64,${store.rootNode.encryptionKey}`}\n          download=\"key.ish\"\n        >\n          Save Key\n        </Button>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          onClick={() => {\n            encryptData(store, (data) => {\n              const element = document.createElement(\"a\");\n              element.setAttribute(\n                \"href\",\n                \"data:text/plain;charset=base64,\" + encodeURIComponent(data),\n              );\n              element.setAttribute(\"download\", \"data.ish\");\n              element.style.display = \"none\";\n              document.body.appendChild(element);\n              element.click();\n              document.body.removeChild(element);\n            });\n          }}\n        >\n          Save Data\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import { IconButton, Paper, Tooltip, useTheme } from \"@material-ui/core\";\nimport { useDataAsStore, useDataDecryption } from \"../../../utils/encryption\";\nimport useDraggableItemsProvider, {\n  DraggableItemsContext,\n} from \"../useDraggableItemsContext\";\n\nimport CardInfo from \"./CardInfo\";\nimport CardView from \"./CardView\";\nimport { Close } from \"@material-ui/icons\";\nimport { DecodedDataContext } from \"../useDecodedDataContext\";\nimport React from \"react\";\nimport { Store } from \"../../../utils/normalization\";\n\nexport type CardDataProps = {\n  children?(store: Store): void;\n  title?: string;\n  isReadOnly?: boolean;\n  initialValues: {\n    encryptionKey: string;\n    initialData: string;\n  };\n};\ntype Props = CardDataProps & {\n  onClose: () => void;\n};\nexport default function CardRoot({\n  children,\n  title,\n  isReadOnly = false,\n  initialValues: { encryptionKey, initialData },\n  onClose,\n}: Props) {\n  const theme = useTheme();\n  const draggableData = useDraggableItemsProvider();\n  const { decryptedData } = useDataDecryption(initialData, encryptionKey);\n  const data = useDataAsStore(decryptedData, encryptionKey, title);\n  if (!data) {\n    return null;\n  }\n  const { store, updateNodes } = data;\n  return (\n    <DraggableItemsContext.Provider value={draggableData}>\n      <DecodedDataContext.Provider\n        value={{ store, updateNodes: isReadOnly ? null : updateNodes }}\n      >\n        <Paper style={{ position: \"relative\", padding: theme.spacing(3) }}>\n          <div\n            style={{\n              position: \"absolute\",\n              right: theme.spacing(1),\n              top: theme.spacing(1),\n            }}\n          >\n            <Tooltip title=\"Did you save? Just checking\" arrow>\n              <IconButton aria-label=\"close card\" onClick={onClose}>\n                <Close />\n              </IconButton>\n            </Tooltip>\n          </div>\n          <CardInfo />\n          <div style={{ height: theme.spacing(3) }} />\n          <CardView nodeKey={store.rootNode.value} />\n          {children && children(store)}\n        </Paper>\n      </DecodedDataContext.Provider>\n    </DraggableItemsContext.Provider>\n  );\n}\n","import { Button, Paper, TextField, Typography, useTheme } from \"@material-ui/core\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { denormalizeRoot, normalizeRoot } from \"../../utils/normalization\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\n\nimport CardRoot from \"../memory/cards/CardRoot\";\nimport CardView from \"../memory/cards/CardView\";\nimport { DecodedDataContext } from \"../memory/useDecodedDataContext\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ADD_PROPOSAL = gql`\n  mutation Adding($proposal: String!) {\n    addProposal(proposal: $proposal) {\n      uuid\n    }\n  }\n`;\ntype StandardPageResponse = {\n  user?: {\n    uuid: string;\n  };\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n  proposals: Array<{ uuid: string }>;\n};\nconst QUERY = gql`\n  query StandardPage {\n    user {\n      uuid\n    }\n    standardProposal {\n      version\n      data\n    }\n    proposals {\n      uuid\n    }\n  }\n`;\n\nconst StandardPage: FunctionComponent<{}> = () => {\n  const { data } = useQuery<StandardPageResponse>(QUERY);\n  if (data == null) {\n    return null;\n  }\n  const { standardProposal, proposals } = data;\n  return (\n    <div>\n      <ProposedAPISection standardProposal={standardProposal} />\n      {data.user?.uuid != null && <MakeAProposalSection />}\n      <AllProposalsSection proposals={proposals} />\n    </div>\n  );\n};\n\ntype ProposedAPISectionProps = {\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n};\nfunction ProposedAPISection({ standardProposal }: ProposedAPISectionProps) {\n  const store = normalizeRoot(standardProposal.data, {});\n  return (\n    <DecodedDataContext.Provider value={{ store, updateNodes: null }}>\n      <Paper style={{ position: \"relative\", padding: 24 }}>\n        <Typography variant=\"h2\">Proposed API {standardProposal.version}</Typography>\n        <CardView nodeKey={store.rootNode.value} />\n      </Paper>\n    </DecodedDataContext.Provider>\n  );\n}\n\nconst SUGGESTED_PROPOSAL = {\n  \"?Parent field\": {\n    \"Proposed Field\": {\n      type: \"text\",\n      description: \"# in markdown\",\n      \"?subfields\": [\"more fields\"],\n    },\n  },\n};\nconst DUMMY_KEY = \"1Qd1fIUBT6KuzgM9mQOIkk8k77mkXz/4BGMnttcdY1c=\";\nfunction MakeAProposalSection() {\n  const [isCreating, setIsCreating] = useState(false);\n  const theme = useTheme();\n  const [title, setTitle] = useState(\"\");\n  const [addProposal] = useMutation(ADD_PROPOSAL);\n  if (!isCreating) {\n    return (\n      <Paper\n        style={{\n          padding: theme.spacing(2),\n          margin: `${theme.spacing(2)}px auto`,\n          maxWidth: 380,\n        }}\n      >\n        <div\n          style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\n        >\n          <Typography variant=\"h5\">Start</Typography>\n        </div>\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          fullWidth\n          label=\"Title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          autoFocus\n          style={{ marginBottom: theme.spacing(2) }}\n        />\n        <Button\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => setIsCreating(true)}\n        >\n          Make new proposal\n        </Button>\n      </Paper>\n    );\n  }\n  return (\n    <CardRoot\n      initialValues={{\n        encryptionKey: DUMMY_KEY,\n        initialData: JSON.stringify(SUGGESTED_PROPOSAL),\n      }}\n      title={title}\n      onClose={() => setIsCreating(false)}\n    >\n      {(store) => (\n        <Button\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            addProposal({ variables: { proposal: denormalizeRoot(store) } });\n            setIsCreating(false);\n            setTitle(\"\");\n          }}\n          style={{ marginTop: theme.spacing(2) }}\n        >\n          Make new proposal\n        </Button>\n      )}\n    </CardRoot>\n  );\n}\ntype AllProposalsSectionProps = {\n  proposals: Array<{ uuid: string }>;\n};\nfunction AllProposalsSection({ proposals }: AllProposalsSectionProps) {\n  const history = useHistory();\n  return (\n    <Paper style={{ position: \"relative\", padding: 24 }}>\n      <Typography variant=\"h2\">All Proposals</Typography>\n      <ul>\n        {proposals.map(({ uuid }) => (\n          <li key={uuid}>\n            Proposal {uuid}:\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => history.push(`/minder/proposal/${uuid}`)}\n            >\n              Check it out\n            </Button>\n          </li>\n        ))}\n      </ul>\n    </Paper>\n  );\n}\n\nexport default StandardPage;\n"],"sourceRoot":""}