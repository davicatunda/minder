{"version":3,"sources":["pages/login/LoginPage.tsx"],"names":["LoginPage","theme","useTheme","client","useApolloClient","history","useHistory","useState","hasFailed","setHasFailed","username","setUsername","password","setPassword","useMutation","gql","login","style","margin","paddingTop","spacing","paddingLeft","paddingRight","paddingBottom","maxWidth","width","align","variant","gutterBottom","height","fullWidth","label","autoComplete","value","onChange","e","target","autoFocus","type","disabled","color","size","onClick","variables","then","data","localStorage","setItem","push","resetStore","visibility"],"mappings":"6bAOe,SAASA,IACtB,IAAMC,EAAQC,cACRC,EAASC,4BACTC,EAAUC,cAHkB,EAIAC,oBAAS,GAJT,mBAI3BC,EAJ2B,KAIhBC,EAJgB,OAKFF,mBAAS,IALP,mBAK3BG,EAL2B,KAKjBC,EALiB,OAMFJ,mBAAS,IANP,mBAM3BK,EAN2B,KAMjBC,EANiB,OAOlBC,sBACdC,cADyB,MAApBC,EAP2B,oBAclC,OACE,qBAAKC,MAAO,CAAEC,OAAQ,QAAtB,SACE,eAAC,IAAD,CACED,MAAO,CACLE,WAAYlB,EAAMmB,QAAQ,GAC1BC,YAAapB,EAAMmB,QAAQ,GAC3BE,aAAcrB,EAAMmB,QAAQ,GAC5BG,cAAetB,EAAMmB,QAAQ,GAC7BF,OAAQ,OACRM,SAAU,IACVC,MAAO,QARX,UAWE,cAAC,IAAD,CAAYC,MAAM,SAASC,QAAQ,KAAKC,cAAY,EAApD,oBAGA,qBAAKX,MAAO,CAAEY,OAAQ5B,EAAMmB,QAAQ,MACpC,cAAC,IAAD,CACEO,QAAQ,WACRT,OAAO,SACPY,WAAS,EACTC,MAAM,oBACNC,aAAa,WACbC,MAAOvB,EACPwB,SAAU,SAACC,GACTxB,EAAYwB,EAAEC,OAAOH,OACrBxB,GAAa,IAEf4B,WAAS,IAEX,cAAC,IAAD,CACEV,QAAQ,WACRT,OAAO,SACPY,WAAS,EACTC,MAAM,WACNO,KAAK,WACLN,aAAa,yBACbC,MAAOrB,EACPsB,SAAU,SAACC,GACTtB,EAAYsB,EAAEC,OAAOH,OACrBxB,GAAa,MAGjB,qBAAKQ,MAAO,CAAEY,OAAQ5B,EAAMmB,QAAQ,MACpC,cAAC,IAAD,CACEU,WAAS,EACTH,QAAQ,YACRY,SAAuB,KAAb7B,GAAgC,KAAbE,GAAmBJ,EAChDgC,MAAM,UACNC,KAAK,QACLC,QAAS,WACP1B,EAAM,CAAE2B,UAAW,CAAEjC,WAAUE,cAAcgC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACnD,GAAmB,OAAX,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAM7B,OACR,OAAOP,GAAa,GAGtBqC,aAAaC,QAAQ,QAASF,EAAK7B,OACnCX,EAAQ2C,KAAK,oBACb7C,EAAO8C,iBAdb,oBAoBA,qBAAKhC,MAAO,CAAEY,OAAQ5B,EAAMmB,QAAQ,MACpC,cAAC,IAAD,CACEO,QAAQ,QACRa,MAAM,QACNd,MAAM,SACNT,MAAO,CAAEiC,WAAY1C,EAAY,UAAY,UAJ/C","file":"static/js/12.b332d564.chunk.js","sourcesContent":["import { Button, Paper, TextField, Typography, useTheme } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { gql, useApolloClient, useMutation } from \"@apollo/client\";\n\nimport { useHistory } from \"react-router-dom\";\n\ntype LongiResponse = { login: string };\nexport default function LoginPage() {\n  const theme = useTheme();\n  const client = useApolloClient();\n  const history = useHistory();\n  const [hasFailed, setHasFailed] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [login] = useMutation<LongiResponse>(\n    gql`\n      mutation Login($username: String!, $password: String!) {\n        login(username: $username, password: $password)\n      }\n    `,\n  );\n  return (\n    <div style={{ margin: \"auto\" }}>\n      <Paper\n        style={{\n          paddingTop: theme.spacing(4),\n          paddingLeft: theme.spacing(4),\n          paddingRight: theme.spacing(4),\n          paddingBottom: theme.spacing(2),\n          margin: \"auto\",\n          maxWidth: 480,\n          width: \"100%\",\n        }}\n      >\n        <Typography align=\"center\" variant=\"h3\" gutterBottom>\n          Minder\n        </Typography>\n        <div style={{ height: theme.spacing(2) }} />\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          fullWidth\n          label=\"Username or email\"\n          autoComplete=\"username\"\n          value={username}\n          onChange={(e) => {\n            setUsername(e.target.value);\n            setHasFailed(false);\n          }}\n          autoFocus\n        />\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          fullWidth\n          label=\"Password\"\n          type=\"password\"\n          autoComplete=\"current-encryption-key\"\n          value={password}\n          onChange={(e) => {\n            setPassword(e.target.value);\n            setHasFailed(false);\n          }}\n        />\n        <div style={{ height: theme.spacing(1) }} />\n        <Button\n          fullWidth\n          variant=\"contained\"\n          disabled={username === \"\" || password === \"\" || hasFailed}\n          color=\"primary\"\n          size=\"large\"\n          onClick={() => {\n            login({ variables: { username, password } }).then(({ data }) => {\n              if (data?.login == null) {\n                return setHasFailed(true);\n              }\n\n              localStorage.setItem(\"token\", data.login);\n              history.push(\"/minder/memories\");\n              client.resetStore();\n            });\n          }}\n        >\n          Log in\n        </Button>\n        <div style={{ height: theme.spacing(2) }} />\n        <Typography\n          variant=\"body2\"\n          color=\"error\"\n          align=\"center\"\n          style={{ visibility: hasFailed ? \"initial\" : \"hidden\" }}\n        >\n          That's not the droid you're looking for\n        </Typography>\n      </Paper>\n    </div>\n  );\n}\n"],"sourceRoot":""}