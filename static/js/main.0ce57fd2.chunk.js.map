{"version":3,"sources":["serviceWorker.ts","card-items/useTogglePaletteContext.tsx","NavBar.tsx","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","DEFAULT_THEME","palette","type","primary","main","blue","secondary","pink","red","warning","orange","info","success","green","typography","h1","h2","props","CustomThemeProvider","children","devicePalette","useMediaQuery","useState","localStorage","getItem","setPalette","togglePalette","useCallback","current","opposite","setItem","usePreferredPaletteType","paletteType","theme","useMemo","createMuiTheme","ThemeProvider","TogglePaletteContext","Provider","value","createContext","QUERY","gql","listItemStyle","whiteSpace","marginInlineEnd","textDecoration","color","active","fontWeight","NavBar","useTheme","context","useContext","Error","useTogglePaletteContext","useQuery","data","loading","AppBar","position","Toolbar","Typography","variant","to","exact","style","activeStyle","flexGrow","user","display","alignItems","IconButton","onClick","Brightness4","width","spacing","AccountCircle","username","Button","Home","loadable","Offline","Standard","Proposal","App","height","Container","maxWidth","path","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","createHttpLink","uri","cache","InMemoryCache","Root","utils","DateFnsUtils","CssBaseline","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4HAYMA,G,OAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DA2CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,uMC1F3DC,EAAgB,CACpBC,QAAS,CACPC,KAAM,QACNC,QAAS,CAAEC,KAAMC,IAAK,MACtBC,UAAW,CAAEF,KAAMG,IAAK,MACxBR,MAAO,CAAEK,KAAMI,IAAI,MACnBC,QAAS,CAAEL,KAAMM,IAAO,MACxBC,KAAM,CAAEP,KAAMC,IAAK,MACnBO,QAAS,CAAER,KAAMS,IAAM,OAEzBC,WAAY,CACVC,GAAI,GACJC,GAAI,IAENC,MAAO,IAGF,SAASC,EAAT,GAAsE,IAAvCC,EAAsC,EAAtCA,SAAsC,EA6B5E,WACE,IAAMC,EAAgBC,YAAc,gCAChC,OACA,QAH6D,EAKnCC,mBAASC,aAAaC,QAAQ,YALK,mBAK1DvB,EAL0D,KAKjDwB,EALiD,KAO3DC,EAAgBC,uBAAY,WAChCF,GAAW,SAACG,GACV,IAAMC,EAAuB,SAAZD,EAAqB,QAAU,OAEhD,OADAL,aAAaO,QAAQ,UAAWD,GACzBA,OAER,IACH,OAAQ5B,GACN,IAAK,OACH,MAAO,CAAC,OAAQyB,GAClB,IAAK,QACH,MAAO,CAAC,QAASA,GACnB,QACE,MAAO,CAACN,EAAeM,IAhDUK,GADqC,mBACnEC,EADmE,KACtDN,EADsD,KAEpEO,EAAQC,mBACZ,kBACEC,YAAe,2BACVnC,GADS,IAEZC,QAAQ,2BAAMD,EAAcC,SAArB,IAA8BC,KAAM8B,SAE/C,CAACA,IAEH,OACE,cAACI,EAAA,EAAD,CAAeH,MAAOA,EAAtB,SACE,cAACI,EAAqBC,SAAtB,CAA+BC,MAAO,CAAEb,iBAAxC,SACGP,MAOT,IAAMkB,EAAuBG,wBAA4C,M,yICjCzE,IAAMC,EAAQC,cAAH,KAaLC,EAA+B,CACnCC,WAAY,SACZC,gBAAiB,GACjBC,eAAgB,OAChBC,MAAO,WAEHC,EAAwB,CAC5BC,WAAY,QAGC,SAASC,IACtB,IAAMjB,EAAQkB,cACNzB,EDSH,WACL,IAAM0B,EAAUC,qBAAWhB,GAC3B,GAAe,MAAXe,EACF,MAAM,IAAIE,MAAM,yCAElB,OAAOF,ECdmBG,GAAlB7B,cAFuB,EAGL8B,mBAAiCf,GAAnDgB,EAHuB,EAGvBA,KAAMC,EAHiB,EAGjBA,QAEd,OACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACE,cAAC,IAAD,CAASC,GAAG,UAAUC,OAAK,EAACC,MAAOvB,EAAewB,YAAanB,EAA/D,oBAIF,cAACc,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACE,cAAC,IAAD,CAASC,GAAG,kBAAkBE,MAAOvB,EAAewB,YAAanB,EAAjE,4BAIF,cAACc,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACE,cAAC,IAAD,CAASC,GAAG,mBAAmBE,MAAOvB,EAAewB,YAAanB,EAAlE,wBAIF,qBAAKkB,MAAO,CAAEE,SAAU,KACvBV,EAAU,KAAqB,OAAV,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAMY,MACtB,sBAAKH,MAAO,CAAEI,QAAS,OAAQC,WAAY,UAA3C,UACE,cAACC,EAAA,EAAD,CAAYC,QAAS/C,EAArB,SACE,cAACgD,EAAA,EAAD,MAEF,qBAAKR,MAAO,CAAES,MAAO1C,EAAM2C,QAAQ,MACnC,cAACC,EAAA,EAAD,IACA,qBAAKX,MAAO,CAAES,MAAO1C,EAAM2C,QAAQ,MACnC,cAACd,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BN,EAAKY,KAAKS,cAGtC,cAACC,EAAA,EAAD,yB,YClEJC,EAAOC,aAAS,kBAAM,iCACtBC,EAAUD,aAAS,kBAAM,4EACzBE,EAAWF,aAAS,kBAAM,qEAC1BG,EAAWH,aAAS,kBAAM,+DA4BjBI,MA1Bf,WACE,IAAMpD,EAAQkB,cACd,OACE,eAAC,IAAD,WACE,cAACD,EAAD,IACA,qBAAKgB,MAAO,CAAEoB,OAAQrD,EAAM2C,QAAQ,MACpC,cAACW,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOvB,OAAK,EAACwB,KAAK,WAAlB,SACE,cAACT,EAAD,MAEF,cAAC,IAAD,CAAOf,OAAK,EAACwB,KAAK,kBAAlB,SACE,cAACP,EAAD,MAEF,cAAC,IAAD,CAAOO,KAAK,mBAAZ,SACE,cAACN,EAAD,MAEF,cAAC,IAAD,CAAOM,KAAK,+BAAZ,SACE,cAACL,EAAD,e,qDCVNM,EAAWC,aAAW,SAACC,EAAD,SAAMC,EAAN,EAAMA,QAAN,MAAqB,CAC/CA,QAAQ,2BACHA,GADE,IAELC,cAAa,UAAEvE,aAAaC,QAAQ,gBAAvB,QAAmC,SAI9CuE,EAAS,IAAIC,eAAa,CAC9BC,KAAMP,EAASQ,OACbC,yBAAe,CACbC,IAAK,0DAGTC,MAAO,IAAIC,kBAGb,SAASC,IACP,OACE,cAAC,iBAAD,CAAgBR,OAAQA,EAAxB,SACE,cAAC,IAAD,CAAyBS,MAAOC,IAAhC,SACE,eAACvF,EAAD,WACE,cAACwF,EAAA,EAAD,IACA,cAAC,EAAD,WAOVC,IAASC,OAAO,cAACL,EAAD,IAAUM,SAASC,eAAe,SJtB3C,SAAkBhI,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgI,IAAIC,UAAwBxI,OAAOC,SAASwI,MACpDC,SAAW1I,OAAOC,SAASyI,OAIvC,OAGF1I,OAAO2I,iBAAiB,QAAQ,WAC9B,IAAMtI,EAAK,UAAMmI,UAAN,sBAEP1I,IAgEV,SAAiCO,EAAeC,GAE9CsI,MAAMvI,EAAO,CACXgH,QAAS,CAAE,iBAAkB,YAE5B3G,MAAK,SAACmI,GAEL,IAAMC,EAAcD,EAASxB,QAAQ0B,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1I,UAAUC,cAAc0I,MAAMxI,MAAK,SAACC,GAClCA,EAAawI,aAAazI,MAAK,WAC7BV,OAAOC,SAASmJ,eAKpBhJ,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAkI,CAAwBhJ,EAAOC,GAI/BC,UAAUC,cAAc0I,MAAMxI,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OIJ/BE,CAAuB,M","file":"static/js/main.0ce57fd2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {\n  ReactNode,\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from \"react\";\nimport { ThemeProvider, createMuiTheme, useMediaQuery } from \"@material-ui/core\";\nimport { blue, green, orange, pink, red } from \"@material-ui/core/colors\";\n\nconst DEFAULT_THEME = {\n  palette: {\n    type: \"light\",\n    primary: { main: blue[200] },\n    secondary: { main: pink[200] },\n    error: { main: red[500] },\n    warning: { main: orange[500] },\n    info: { main: blue[500] },\n    success: { main: green[500] },\n  },\n  typography: {\n    h1: {},\n    h2: {},\n  },\n  props: {},\n};\n\nexport function CustomThemeProvider({ children }: { children?: ReactNode }) {\n  const [paletteType, togglePalette] = usePreferredPaletteType();\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        ...DEFAULT_THEME,\n        palette: { ...DEFAULT_THEME.palette, type: paletteType },\n      }),\n    [paletteType],\n  );\n  return (\n    <ThemeProvider theme={theme}>\n      <TogglePaletteContext.Provider value={{ togglePalette }}>\n        {children}\n      </TogglePaletteContext.Provider>\n    </ThemeProvider>\n  );\n}\n\ntype TTogglePaletteContext = { togglePalette(): void };\nconst TogglePaletteContext = createContext<TTogglePaletteContext | null>(null);\nexport function useTogglePaletteContext() {\n  const context = useContext(TogglePaletteContext);\n  if (context == null) {\n    throw new Error(\"missing TogglePaletteContext.Provider\");\n  }\n  return context;\n}\n\nfunction usePreferredPaletteType(): [\"dark\" | \"light\", () => void] {\n  const devicePalette = useMediaQuery(\"(prefers-color-scheme: dark)\")\n    ? \"dark\"\n    : \"light\";\n\n  const [palette, setPalette] = useState(localStorage.getItem(\"palette\"));\n\n  const togglePalette = useCallback(() => {\n    setPalette((current) => {\n      const opposite = current === \"dark\" ? \"light\" : \"dark\";\n      localStorage.setItem(\"palette\", opposite);\n      return opposite;\n    });\n  }, []);\n  switch (palette) {\n    case \"dark\":\n      return [\"dark\", togglePalette];\n    case \"light\":\n      return [\"light\", togglePalette];\n    default:\n      return [devicePalette, togglePalette];\n  }\n}\n","import { AccountCircle, Brightness4 } from \"@material-ui/icons\";\nimport {\n  AppBar,\n  Button,\n  IconButton,\n  Toolbar,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport React, { CSSProperties } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nimport { NavLink } from \"react-router-dom\";\nimport { useTogglePaletteContext } from \"./card-items/useTogglePaletteContext\";\n\nconst QUERY = gql`\n  query NavBarLoggedIn {\n    user {\n      username\n    }\n  }\n`;\n\ntype NavBarLoggedInResponse = {\n  user?: {\n    username: string;\n  };\n};\nconst listItemStyle: CSSProperties = {\n  whiteSpace: \"nowrap\",\n  marginInlineEnd: 20,\n  textDecoration: \"none\",\n  color: \"initial\",\n};\nconst active: CSSProperties = {\n  fontWeight: \"bold\",\n};\n\nexport default function NavBar() {\n  const theme = useTheme();\n  const { togglePalette } = useTogglePaletteContext();\n  const { data, loading } = useQuery<NavBarLoggedInResponse>(QUERY);\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\">\n          <NavLink to=\"/minder\" exact style={listItemStyle} activeStyle={active}>\n            Home\n          </NavLink>\n        </Typography>\n        <Typography variant=\"h6\">\n          <NavLink to=\"/minder/offline\" style={listItemStyle} activeStyle={active}>\n            Offline Mode\n          </NavLink>\n        </Typography>\n        <Typography variant=\"h6\">\n          <NavLink to=\"/minder/standard\" style={listItemStyle} activeStyle={active}>\n            Standard\n          </NavLink>\n        </Typography>\n        <div style={{ flexGrow: 1 }} />\n        {loading ? null : data?.user != null ? (\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <IconButton onClick={togglePalette}>\n              <Brightness4 />\n            </IconButton>\n            <div style={{ width: theme.spacing(2) }} />\n            <AccountCircle />\n            <div style={{ width: theme.spacing(1) }} />\n            <Typography variant=\"h6\">{data.user.username}</Typography>\n          </div>\n        ) : (\n          <Button>Login</Button>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import { Container, useTheme } from \"@material-ui/core\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\n\nimport NavBar from \"./NavBar\";\nimport React from \"react\";\nimport loadable from \"@loadable/component\";\n\nconst Home = loadable(() => import(\"./Home\"));\nconst Offline = loadable(() => import(\"./Offline\"));\nconst Standard = loadable(() => import(\"./Standard\"));\nconst Proposal = loadable(() => import(\"./Proposal\"));\n\nfunction App() {\n  const theme = useTheme();\n  return (\n    <Router>\n      <NavBar />\n      <div style={{ height: theme.spacing(2) }} />\n      <Container maxWidth=\"md\">\n        <Switch>\n          <Route exact path=\"/minder/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/minder/offline\">\n            <Offline />\n          </Route>\n          <Route path=\"/minder/standard\">\n            <Standard />\n          </Route>\n          <Route path=\"/minder/proposal/:proposalId\">\n            <Proposal />\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","import \"fontsource-roboto\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n  createHttpLink,\n} from \"@apollo/client\";\n\nimport App from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { CustomThemeProvider } from \"./card-items/useTogglePaletteContext\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst authLink = setContext((_, { headers }) => ({\n  headers: {\n    ...headers,\n    authorization: localStorage.getItem(\"token\") ?? \"\",\n  },\n}));\n\nconst client = new ApolloClient({\n  link: authLink.concat(\n    createHttpLink({\n      uri: \"https://thawing-wildwood-69808.herokuapp.com/graphql\",\n    }),\n  ),\n  cache: new InMemoryCache(),\n});\n\nfunction Root() {\n  return (\n    <ApolloProvider client={client}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <CustomThemeProvider>\n          <CssBaseline />\n          <App />\n        </CustomThemeProvider>\n      </MuiPickersUtilsProvider>\n    </ApolloProvider>\n  );\n}\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\nserviceWorker.register({});\n"],"sourceRoot":""}