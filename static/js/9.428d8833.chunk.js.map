{"version":3,"sources":["Standard.tsx"],"names":["ADD_PROPOSAL","gql","QUERY","ProposedAPISection","standardProposal","store","normalizeRoot","data","Provider","value","updateNodes","style","position","padding","variant","version","nodeKey","rootNode","SUGGESTED_PROPOSAL","type","description","MakeAProposalSection","useMutation","addProposal","useDataEncryptionInSync","JSON","stringify","decodedData","setDecodedData","nodes","newNodes","forEach","node","key","recursivelyDenormalizeNode","color","onClick","variables","proposal","AllProposalsSection","proposals","history","useHistory","map","uuid","push","Standard","useQuery","user"],"mappings":"onBAcA,IAAMA,EAAeC,cAAH,KAiBZC,EAAQD,cAAH,KAoCX,SAASE,EAAT,GAA4E,IAA9CC,EAA6C,EAA7CA,iBACtBC,EAAQC,YAAcF,EAAiBG,KAAM,IACnD,OACE,cAAC,IAAmBC,SAApB,CAA6BC,MAAO,CAAEJ,QAAOK,YAAa,MAA1D,SACE,eAAC,IAAD,CAAOC,MAAO,CAAEC,SAAU,WAAYC,QAAS,IAA/C,UACE,eAAC,IAAD,CAAYC,QAAQ,KAApB,0BAAuCV,EAAiBW,WACxD,cAAC,IAAD,CAAUC,QAASX,EAAMY,SAASR,aAM1C,IAAMS,EAAqB,CACzB,gBAAiB,CACf,iBAAkB,CAChBC,KAAM,OACNC,YAAa,gBACb,aAAc,CAAC,kBAKrB,SAASC,IAAwB,IAAD,EACRC,sBAAYtB,GAA3BuB,EADuB,sBAEUC,YAHxB,+CAKdC,KAAKC,UAAUR,IAFTS,EAFsB,EAEtBA,YAAaC,EAFS,EAETA,eAIrB,IAAKD,EACH,OAAO,KAET,IAAMtB,EAAQC,YAAcqB,EAAa,IAQzC,OACE,eAAC,IAAmBnB,SAApB,CAA6BC,MAAO,CAAEJ,QAAOK,YAR3B,SAACmB,GACnB,IAAMC,EAAQ,eAAQzB,EAAMwB,OAC5BA,EAAME,SAAQ,SAACC,GAAD,OAAWF,EAASE,EAAKC,KAAOD,KAC9CJ,EACEH,KAAKC,UAAUQ,YAA2BJ,EAAUzB,EAAMY,SAASR,WAIrE,UACE,cAAC,IAAD,CAAOE,MAAO,CAAEC,SAAU,WAAYC,QAAS,IAA/C,SACE,cAAC,IAAD,CAAUG,QAASX,EAAMY,SAASR,UAEpC,cAAC,IAAD,CACEK,QAAQ,YACRqB,MAAM,UACNC,QAAS,kBAAMb,EAAY,CAAEc,UAAW,CAAEC,SAAUX,MAHtD,qBAaN,SAASY,EAAT,GAAuE,IAAxCC,EAAuC,EAAvCA,UACvBC,EAAUC,cAChB,OACE,eAAC,IAAD,CAAO/B,MAAO,CAAEC,SAAU,WAAYC,QAAS,IAA/C,UACE,cAAC,IAAD,CAAYC,QAAQ,KAApB,2BACA,6BACG0B,EAAUG,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACb,2CACYA,EADZ,IAEE,cAAC,IAAD,CACE9B,QAAQ,YACRqB,MAAM,UACNC,QAAS,kBAAMK,EAAQI,KAAR,2BAAiCD,KAHlD,4BAFOA,WAgBJE,UArGyB,WAAO,IAAD,EACpCvC,EAASwC,mBAA+B7C,GAAxCK,KACR,GAAY,MAARA,EACF,OAAO,KAHmC,IAKpCH,EAAgCG,EAAhCH,iBAAkBoC,EAAcjC,EAAdiC,UAC1B,OACE,gCACE,cAACrC,EAAD,CAAoBC,iBAAkBA,IAClB,OAAnB,UAAAG,EAAKyC,YAAL,eAAWJ,OAAgB,cAACvB,EAAD,IAC5B,cAACkB,EAAD,CAAqBC,UAAWA","file":"static/js/9.428d8833.chunk.js","sourcesContent":["import { Button, Paper, Typography } from \"@material-ui/core\";\nimport React, { FunctionComponent } from \"react\";\nimport {\n  TNode,\n  normalizeRoot,\n  recursivelyDenormalizeNode,\n} from \"./utils/normalization\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\n\nimport CardView from \"./card-items/CardView\";\nimport { DecodedDataContext } from \"./card-items/CardViewRoot\";\nimport { useDataEncryptionInSync } from \"./utils/encryption\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ADD_PROPOSAL = gql`\n  mutation Adding($proposal: String!) {\n    addProposal(proposal: $proposal) {\n      uuid\n    }\n  }\n`;\ntype StandardPageResponse = {\n  user?: {\n    uuid: string;\n  };\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n  proposals: Array<{ uuid: string }>;\n};\nconst QUERY = gql`\n  query StandardPage {\n    user {\n      uuid\n    }\n    standardProposal {\n      version\n      data\n    }\n    proposals {\n      uuid\n    }\n  }\n`;\n\nconst Standard: FunctionComponent<{}> = () => {\n  const { data } = useQuery<StandardPageResponse>(QUERY);\n  if (data == null) {\n    return null;\n  }\n  const { standardProposal, proposals } = data;\n  return (\n    <div>\n      <ProposedAPISection standardProposal={standardProposal} />\n      {data.user?.uuid != null && <MakeAProposalSection />}\n      <AllProposalsSection proposals={proposals} />\n    </div>\n  );\n};\n\ntype ProposedAPISectionProps = {\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n};\nfunction ProposedAPISection({ standardProposal }: ProposedAPISectionProps) {\n  const store = normalizeRoot(standardProposal.data, {});\n  return (\n    <DecodedDataContext.Provider value={{ store, updateNodes: null }}>\n      <Paper style={{ position: \"relative\", padding: 24 }}>\n        <Typography variant=\"h2\">Proposed API {standardProposal.version}</Typography>\n        <CardView nodeKey={store.rootNode.value} />\n      </Paper>\n    </DecodedDataContext.Provider>\n  );\n}\n\nconst SUGGESTED_PROPOSAL = {\n  \"?Parent field\": {\n    \"Proposed Field\": {\n      type: \"text\",\n      description: \"# in markdown\",\n      \"?subfields\": [\"more fields\"],\n    },\n  },\n};\nconst DUMMY_KEY = \"1Qd1fIUBT6KuzgM9mQOIkk8k77mkXz/4BGMnttcdY1c=\";\nfunction MakeAProposalSection() {\n  const [addProposal] = useMutation(ADD_PROPOSAL);\n  const { decodedData, setDecodedData } = useDataEncryptionInSync(\n    DUMMY_KEY,\n    JSON.stringify(SUGGESTED_PROPOSAL),\n  );\n  if (!decodedData) {\n    return null;\n  }\n  const store = normalizeRoot(decodedData, {});\n  const updateNodes = (nodes: TNode[]) => {\n    const newNodes = { ...store.nodes };\n    nodes.forEach((node) => (newNodes[node.key] = node));\n    setDecodedData(\n      JSON.stringify(recursivelyDenormalizeNode(newNodes, store.rootNode.value)),\n    );\n  };\n  return (\n    <DecodedDataContext.Provider value={{ store, updateNodes }}>\n      <Paper style={{ position: \"relative\", padding: 24 }}>\n        <CardView nodeKey={store.rootNode.value} />\n      </Paper>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => addProposal({ variables: { proposal: decodedData } })}\n      >\n        Send\n      </Button>\n    </DecodedDataContext.Provider>\n  );\n}\ntype AllProposalsSectionProps = {\n  proposals: Array<{ uuid: string }>;\n};\nfunction AllProposalsSection({ proposals }: AllProposalsSectionProps) {\n  const history = useHistory();\n  return (\n    <Paper style={{ position: \"relative\", padding: 24 }}>\n      <Typography variant=\"h2\">All Proposals</Typography>\n      <ul>\n        {proposals.map(({ uuid }) => (\n          <li key={uuid}>\n            Proposal {uuid}:\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => history.push(`/minder/proposal/${uuid}`)}\n            >\n              Check it out\n            </Button>\n          </li>\n        ))}\n      </ul>\n    </Paper>\n  );\n}\n\nexport default Standard;\n"],"sourceRoot":""}