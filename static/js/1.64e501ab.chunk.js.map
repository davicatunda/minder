{"version":3,"sources":["pages/memory/useDecodedDataContext.tsx","utils/normalization.ts","pages/memory/vault/cards/Boolean/BooleanNodeCardView.tsx","pages/memory/vault/cards/Boolean/EditBooleanInput.tsx","pages/memory/vault/cards/Date/EditDateInput.tsx","pages/memory/vault/cards/Number/EditNumberInput.tsx","pages/memory/vault/cards/String/EditStringInput.tsx","pages/memory/vault/cards/EditValueInput.tsx","pages/memory/vault/cards/NodeTypeIcon.tsx","pages/memory/vault/cards/Object/useSearchTextOnNodeRecursively.ts","pages/memory/vault/cards/List/ListNodeCardView.tsx","pages/memory/vault/cards/Null/NullNodeCardView.tsx","pages/memory/vault/cards/Number/NumberNodeCardView.tsx","pages/memory/vault/cards/Object/NewFieldDialogButton.tsx","components/BlurredBar.tsx","pages/memory/vault/cards/Object/useDragObjectField.tsx","pages/memory/vault/cards/Object/ObjectFieldNodeCardView.tsx","pages/memory/vault/cards/Object/ObjectNodeCardView.tsx","pages/memory/vault/cards/String/StringNodeCardView.tsx","pages/memory/vault/cards/CardView.tsx","pages/memory/useDraggableItemsContext.tsx","pages/memory/vault/cards/Date/DateNodeCardView.tsx"],"names":["DecodedDataContext","createContext","useDecodedDataContext","context","useContext","Error","RefinedType","normalizeRoot","decodedData","overrides","parsedDate","JSON","parse","title","created","Date","updated","nodes","rootNodeValue","recursivelyAddNodes","rootNode","value","key","parentKey","data","node","uuid","Array","children","map","child","type","List","RegExp","test","isDate","date","String","Number","Boolean","Null","fields","Object","keys","name","getNode","denormalizeRoot","store","stringify","recursivelyDenormalizeNode","nodeKey","toISOString","childKey","object","forEach","field","defaultNodeValue","parentNode","BooleanNodeCardView","props","Typography","variant","color","component","EditBooleanInput","onChange","FormControl","fullWidth","InputLabel","Select","label","target","MenuItem","EditDateInput","disableToolbar","inputVariant","format","KeyboardButtonProps","EditNumberInput","TextField","id","event","isNaN","EditStringInput","EditValueInput","NodeTypeIcon","useSearchTextOnNodeRecursively","searchValue","searchTextOnNodeRecursively","toLocaleLowerCase","startKey","date2HumanValue","includes","some","toString","ListNodeCardView","useState","setSearchValue","searchMatches","onClick","e","stopPropagation","length","Input","placeholder","startAdornment","InputAdornment","position","filter","ListItem","button","ListItemIcon","ListItemText","primary","CardView","NewListItemDialogButton","updateNodes","templateNode","isDialogOpen","setIsDialogOpen","valueNode","setValueNode","Button","size","startIcon","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","labelId","newType","DialogActions","newParentnode","NullNodeCardView","NumberNodeCardView","NewFieldDialogButton","theme","useTheme","fieldName","setFieldName","closeAndClearDialog","style","display","alignItems","IconButton","fontSize","maxWidth","right","spacing","top","aria-label","Minimize","transform","Close","dividers","minHeight","minWidth","width","autoFocus","height","newParentNode","BlurredBar","backgroundColor","palette","text","opacity","insertIntoPlace","draggedItem","droppedItem","hoverStatus","offset","newPosition","findIndex","f","slice","ObjectFieldNodeCardView","item","ref","useRef","setHover","DraggableItemsContext","draggableContainerProps","draggable","dropTargetProps","setDraggedItem","isBeingDragged","onDragStart","onDragEnd","undefined","zIndex","borderColor","main","left","bottom","borderWidth","borderRadius","shape","borderStyle","borderLeftStyle","borderRightStyle","borderTopStyle","borderBottomStyle","onDrop","sourceParent","targetParent","newSourceParent","onDragOver","current","boundingBox","getBoundingClientRect","halfWidth","centerX","pageX","preventDefault","onDragLeave","useDragObjectField","needsToExpand","useNeedsToExpand","isMinimized","setIsMinimized","Grid","xs","sm","md","lg","xl","Card","v","CardActionArea","disableRipple","CardContent","gutterBottom","whiteSpace","overflow","textOverflow","flexGrow","EditFieldDialog","marginTop","newFieldName","setNewFieldName","oldValueNode","oldParentNode","isEditting","setIsEditting","useEffect","originalField","flex","ObjectNodeCardView","searchHasFocus","setSearchHasFocus","OutlinedInput","onKeyDown","onFocus","onBlur","container","StringNodeCardView","userSelect","DateNodeCardView","useDraggableItemsProvider","year","getFullYear","month","getMonth","padStart","day","getDate"],"mappings":"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","file":"static/js/1.64e501ab.chunk.js","sourcesContent":["import { Store, TNode } from \"../../utils/normalization\";\nimport { createContext, useContext } from \"react\";\n\ntype TDecodedDataContext = {\n  encryptionKey?: string;\n  googleResourceId?: string;\n  store: Store;\n  updateNodes: ((nodes: TNode[]) => void) | null;\n};\nexport const DecodedDataContext = createContext<TDecodedDataContext | null>(null);\n\nexport default function useDecodedDataContext() {\n  const context = useContext(DecodedDataContext);\n  if (context == null) {\n    throw new Error(\"missing DecodedDataContext.Provider\");\n  }\n  return context;\n}\n","import { v4 as uuid } from \"uuid\";\n\nexport type StoreKey = string;\ntype NodesStore = {\n  [key: string]: TNode;\n};\nexport type Store = {\n  rootNode: RootNode;\n  nodes: NodesStore;\n};\nexport type TNode =\n  | TObjectNode\n  | TListNode\n  | TDateNode\n  | TStringNode\n  | TBooleanNode\n  | TNumberNode\n  | TNullNode;\n\nexport interface TNodeWithKeys<T extends RefinedType> {\n  type: T;\n  key: StoreKey;\n  parentKey: StoreKey;\n}\nexport type TObjectField = {\n  name: string;\n  value: StoreKey;\n  parentKey: StoreKey;\n};\nexport interface TObjectNode extends TNodeWithKeys<RefinedType.Object> {\n  fields: TObjectField[];\n}\nexport interface TListNode extends TNodeWithKeys<RefinedType.List> {\n  children: StoreKey[];\n}\nexport interface TDateNode extends TNodeWithKeys<RefinedType.Date> {\n  date: Date;\n}\nexport interface TStringNode extends TNodeWithKeys<RefinedType.String> {\n  value: string;\n}\nexport interface TBooleanNode extends TNodeWithKeys<RefinedType.Boolean> {\n  value: boolean;\n}\nexport interface TNumberNode extends TNodeWithKeys<RefinedType.Number> {\n  value: number;\n}\nexport interface TNullNode extends TNodeWithKeys<RefinedType.Null> {}\n\nexport enum RefinedType {\n  List = \"List\",\n  Object = \"Object\",\n  Number = \"Number\",\n  Boolean = \"Boolean\",\n  String = \"String\",\n  Date = \"Date\",\n  Null = \"Null\",\n}\n\nexport type RootNode = {\n  title: string;\n  created: Date;\n  updated: Date;\n  value: StoreKey;\n};\n\nexport function normalizeRoot(\n  decodedData: string,\n  overrides: {\n    title?: string;\n  },\n): Store {\n  const parsedDate = JSON.parse(decodedData);\n  const {\n    title,\n    created = new Date(),\n    updated = new Date(),\n    ...values\n  } = parsedDate;\n  const nodes = {};\n  const rootNodeValue = recursivelyAddNodes(nodes, \"ROOT\", values);\n  const store: Store = {\n    rootNode: {\n      title: overrides.title ?? title ?? \"Primary\",\n      created: new Date(created),\n      updated: new Date(updated),\n      value: rootNodeValue.key,\n    },\n    nodes,\n  };\n  return store;\n}\n\nfunction recursivelyAddNodes(\n  nodes: NodesStore,\n  parentKey: StoreKey,\n  data: any,\n): TNode {\n  const node = getNode(nodes, parentKey, data);\n  nodes[node.key] = node;\n  return node;\n}\n\nfunction getNode(nodes: NodesStore, parentKey: StoreKey, value: any): TNode {\n  const key = uuid();\n  if (value instanceof Array) {\n    const childrenNodes = value.map((child: any) =>\n      recursivelyAddNodes(nodes, parentKey, child),\n    );\n    const children = childrenNodes.map((node) => node.key);\n    return { type: RefinedType.List, key, parentKey, children };\n  }\n  switch (typeof value) {\n    case \"string\": {\n      if (isDate(value)) {\n        const date = new Date(value);\n        return { type: RefinedType.Date, key, parentKey, date };\n      } else {\n        return { type: RefinedType.String, key, parentKey, value };\n      }\n    }\n    case \"number\":\n      return { type: RefinedType.Number, key, parentKey, value };\n    case \"boolean\":\n      return { type: RefinedType.Boolean, key, parentKey, value };\n    case \"object\":\n    default: {\n      if (value == null) {\n        return { type: RefinedType.Null, key, parentKey };\n      } else {\n        const fields = Object.keys(value).map((name) => ({\n          name,\n          value: recursivelyAddNodes(nodes, key, value[name]).key,\n          parentKey: key,\n        }));\n        return { type: RefinedType.Object, key, parentKey, fields };\n      }\n    }\n  }\n}\n\nexport function denormalizeRoot(store: Store): string {\n  return JSON.stringify({\n    title: store.rootNode.title,\n    created: store.rootNode.created,\n    updated: store.rootNode.updated,\n    ...recursivelyDenormalizeNode(store.nodes, store.rootNode.value),\n  });\n}\n\nexport function recursivelyDenormalizeNode(\n  nodes: NodesStore,\n  nodeKey: StoreKey,\n): any {\n  const node = nodes[nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return node.value;\n    case RefinedType.Date:\n      return node.date.toISOString();\n    case RefinedType.List:\n      return node.children.map((childKey) =>\n        recursivelyDenormalizeNode(nodes, childKey),\n      );\n    case RefinedType.Null:\n      return null;\n    case RefinedType.Number:\n      return node.value;\n    case RefinedType.Object:\n      const object: { [name: string]: any } = {};\n      node.fields.forEach((field) => {\n        object[field.name] = recursivelyDenormalizeNode(nodes, field.value);\n      });\n      return object;\n    case RefinedType.String:\n      return node.value;\n  }\n}\n\nexport function defaultNodeValue(\n  type: RefinedType,\n  parentNode: TObjectNode | TListNode,\n): TNode {\n  const key = uuid();\n  const parentKey = parentNode.key;\n  switch (type) {\n    case RefinedType.List:\n      return { type, parentKey, key, children: [] };\n    case RefinedType.Boolean:\n      return { type, parentKey, key, value: true };\n    case RefinedType.Date:\n      return { type, parentKey, key, date: new Date() };\n    case RefinedType.Null:\n      return { type, parentKey, key };\n    case RefinedType.Number:\n      return { type, parentKey, key, value: 0 };\n    case RefinedType.Object:\n      return { type, parentKey, key, fields: [] };\n    case RefinedType.String:\n      return { type, parentKey, key, value: \"\" };\n  }\n}\n\nfunction isDate(value: string): boolean {\n  const regex = RegExp(\n    /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/,\n  );\n  return regex.test(value);\n}\n","import React from \"react\";\nimport { TBooleanNode } from \"../../../../../utils/normalization\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function BooleanNodeCardView(props: { node: TBooleanNode }) {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n      {props.node.value ? \"Yes\" : \"No\"}\n    </Typography>\n  );\n}\n","import { FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport { TBooleanNode, TNode } from \"../../../../../utils/normalization\";\n\nimport React from \"react\";\n\ntype Props = {\n  node: TBooleanNode;\n  onChange(node: TNode): void;\n};\nexport default function EditBooleanInput({ node, onChange }: Props) {\n  return (\n    <FormControl variant=\"filled\" fullWidth>\n      <InputLabel>Initial value</InputLabel>\n      <Select\n        label=\"Type\"\n        value={node.value}\n        onChange={({ target: { value } }) => {\n          onChange({\n            ...node,\n            value: value === \"true\" ? true : false,\n          });\n        }}\n      >\n        <MenuItem value=\"true\">Yes</MenuItem>\n        <MenuItem value=\"false\">No</MenuItem>\n      </Select>\n    </FormControl>\n  );\n}\n","import { TDateNode, TNode } from \"../../../../../utils/normalization\";\n\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport React from \"react\";\n\ntype Props = {\n  node: TDateNode;\n  onChange(node: TNode): void;\n};\nexport default function EditDateInput({ node, onChange }: Props) {\n  return (\n    <KeyboardDatePicker\n      disableToolbar\n      variant=\"inline\"\n      inputVariant=\"filled\"\n      fullWidth\n      format=\"MM/dd/yyyy\"\n      label=\"Initial Date\"\n      value={node.date}\n      onChange={(date: Date | null) => {\n        onChange({\n          ...node,\n          date: date ?? new Date(),\n        });\n      }}\n      KeyboardButtonProps={{\n        \"aria-label\": \"change date\",\n      }}\n    />\n  );\n}\n","import { TNode, TNumberNode } from \"../../../../../utils/normalization\";\n\nimport React from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\ntype Props = {\n  node: TNumberNode;\n  onChange(node: TNode): void;\n};\nexport default function EditNumberInput({ node, onChange }: Props) {\n  return (\n    <TextField\n      variant=\"filled\"\n      id=\"name\"\n      label=\"Initial Value\"\n      type=\"number\"\n      value={node.value}\n      onChange={(event) => {\n        onChange({\n          ...node,\n          value: !isNaN(Number(event.target.value))\n            ? Number(event.target.value)\n            : node.value,\n        });\n      }}\n      fullWidth\n    />\n  );\n}\n","import { TNode, TStringNode } from \"../../../../../utils/normalization\";\n\nimport React from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\ntype Props = {\n  node: TStringNode;\n  onChange(node: TNode): void;\n};\nexport default function EditStringInput({ node, onChange }: Props) {\n  return (\n    <TextField\n      id=\"name\"\n      label=\"Initial Value\"\n      variant=\"filled\"\n      type=\"string\"\n      value={node.value}\n      onChange={(event) => {\n        onChange({\n          ...node,\n          value: event.target.value,\n        });\n      }}\n      fullWidth\n    />\n  );\n}\n","import { RefinedType, TNode } from \"../../../../utils/normalization\";\n\nimport EditBooleanInput from \"./Boolean/EditBooleanInput\";\nimport EditDateInput from \"./Date/EditDateInput\";\nimport EditNumberInput from \"./Number/EditNumberInput\";\nimport EditStringInput from \"./String/EditStringInput\";\nimport React from \"react\";\n\ntype Props = {\n  node: TNode | null;\n  onChange(node: TNode): void;\n};\nexport default function EditValueInput({ node, onChange }: Props) {\n  if (node === null) {\n    return null;\n  }\n  switch (node.type) {\n    case RefinedType.List:\n      return null;\n    case RefinedType.Boolean:\n      return <EditBooleanInput node={node} onChange={onChange} />;\n    case RefinedType.Date:\n      return <EditDateInput node={node} onChange={onChange} />;\n    case RefinedType.Null:\n      throw Error(\"Impossible\");\n    case RefinedType.Number:\n      return <EditNumberInput node={node} onChange={onChange} />;\n    case RefinedType.Object:\n      return null;\n    case RefinedType.String:\n      return <EditStringInput node={node} onChange={onChange} />;\n  }\n}\n","import Filter1OutlinedIcon from \"@material-ui/icons/Filter1Outlined\";\nimport FolderOpenOutlinedIcon from \"@material-ui/icons/FolderOpenOutlined\";\nimport HelpOutlineOutlinedIcon from \"@material-ui/icons/HelpOutlineOutlined\";\nimport ListOutlinedIcon from \"@material-ui/icons/ListOutlined\";\nimport React from \"react\";\nimport { RefinedType } from \"../../../../utils/normalization\";\nimport SubjectOutlinedIcon from \"@material-ui/icons/SubjectOutlined\";\nimport TodayOutlinedIcon from \"@material-ui/icons/TodayOutlined\";\nimport ToggleOnOutlinedIcon from \"@material-ui/icons/ToggleOnOutlined\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\n\nfunction NodeTypeIcon(props: { nodeKey: string }) {\n  const { store } = useDecodedDataContext();\n  const node = store.nodes[props.nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return <ToggleOnOutlinedIcon />;\n    case RefinedType.Date:\n      return <TodayOutlinedIcon />;\n    case RefinedType.List:\n      return <ListOutlinedIcon />;\n    case RefinedType.Null:\n      return <HelpOutlineOutlinedIcon />;\n    case RefinedType.Number:\n      return <Filter1OutlinedIcon />;\n    case RefinedType.Object:\n      return <FolderOpenOutlinedIcon />;\n    case RefinedType.String:\n      return <SubjectOutlinedIcon />;\n  }\n}\n\nexport default NodeTypeIcon;\n","import { RefinedType, Store, StoreKey } from \"../../../../../utils/normalization\";\n\nimport { date2HumanValue } from \"../Date/DateNodeCardView\";\nimport useDecodedDataContext from \"../../../useDecodedDataContext\";\n\ntype FilterFn = (value: string) => boolean;\n\nexport default function useSearchTextOnNodeRecursively(\n  searchValue: string,\n): FilterFn {\n  const { store } = useDecodedDataContext();\n  return function searchMatches(key: string) {\n    if (searchValue === \"\") {\n      return true;\n    }\n    return searchTextOnNodeRecursively(store, key, searchValue.toLocaleLowerCase());\n  };\n}\n\nfunction searchTextOnNodeRecursively(\n  store: Store,\n  startKey: StoreKey,\n  searchValue: string,\n): boolean {\n  const node = store.nodes[startKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return false;\n    case RefinedType.Date:\n      return date2HumanValue(node.date).toLocaleLowerCase().includes(searchValue);\n    case RefinedType.List:\n      return node.children.some((key) =>\n        searchTextOnNodeRecursively(store, key, searchValue),\n      );\n    case RefinedType.Null:\n      return searchValue === \"null\";\n    case RefinedType.Number:\n      return node.value.toString().toLocaleLowerCase().includes(searchValue);\n    case RefinedType.Object:\n      return node.fields.some(\n        (field) =>\n          field.name.toLocaleLowerCase().includes(searchValue) ||\n          searchTextOnNodeRecursively(store, field.value, searchValue),\n      );\n    case RefinedType.String:\n      return node.value.toLocaleLowerCase().includes(searchValue);\n  }\n}\n","import React, { useState } from \"react\";\nimport {\n  RefinedType,\n  TListNode,\n  TNode,\n  defaultNodeValue,\n} from \"../../../../../utils/normalization\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Button from \"@material-ui/core/Button\";\nimport CardView from \"../CardView\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport EditValueInput from \"../EditValueInput\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport NodeTypeIcon from \"../NodeTypeIcon\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Select from \"@material-ui/core/Select\";\nimport useDecodedDataContext from \"../../../useDecodedDataContext\";\nimport useSearchTextOnNodeRecursively from \"../Object/useSearchTextOnNodeRecursively\";\n\nexport default function ListNodeCardView(props: { node: TListNode }) {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const searchMatches = useSearchTextOnNodeRecursively(searchValue);\n  return (\n    <div>\n      <div onClick={(e) => e.stopPropagation()}>\n        {props.node.children.length > 7 ? (\n          <FormControl>\n            <Input\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              placeholder=\"Search ...\"\n              startAdornment={\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n        ) : null}\n      </div>\n      <List>\n        {props.node.children.filter(searchMatches).map((key) => (\n          <ListItem button>\n            <ListItemIcon>\n              <NodeTypeIcon nodeKey={key} />\n            </ListItemIcon>\n            <ListItemText primary={<CardView nodeKey={key} />} />\n          </ListItem>\n        ))}\n        <ListItem>\n          <ListItemText\n            onClick={(e) => e.stopPropagation()}\n            primary={<NewListItemDialogButton parentNode={props.node} />}\n          />\n        </ListItem>\n      </List>\n    </div>\n  );\n}\n\nfunction NewListItemDialogButton(props: { parentNode: TListNode }) {\n  const { store, updateNodes } = useDecodedDataContext();\n  const templateNode =\n    props.parentNode.children.length > 0\n      ? defaultNodeValue(\n          store.nodes[props.parentNode.children[0]].type,\n          props.parentNode,\n        )\n      : null;\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [valueNode, setValueNode] = useState<TNode | null>(templateNode);\n  if (updateNodes == null) {\n    return null;\n  }\n  return (\n    <>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => setIsDialogOpen(true)}\n        startIcon={<AddIcon />}\n      >\n        Add{\" \"}\n      </Button>\n      <Dialog\n        open={isDialogOpen}\n        onClose={() => setIsDialogOpen(false)}\n        aria-labelledby=\"new-field-dialog-title\"\n      >\n        <DialogTitle id=\"new-field-dialog-title\">Add New List Item</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            All items on a list must have the same type.\n          </DialogContentText>\n          {!templateNode && (\n            <FormControl>\n              <InputLabel id=\"select-type-label\">Type</InputLabel>\n              <Select\n                labelId=\"select-type-label\"\n                value={valueNode?.type ?? \"\"}\n                onChange={(event) => {\n                  const newType: RefinedType = event.target.value as RefinedType;\n                  setValueNode(defaultNodeValue(newType, props.parentNode));\n                }}\n                fullWidth\n              >\n                <MenuItem value={RefinedType.Boolean}>Boolean</MenuItem>\n                <MenuItem value={RefinedType.Date}>Date</MenuItem>\n                <MenuItem value={RefinedType.Number}>Number</MenuItem>\n                <MenuItem value={RefinedType.Object}>Object</MenuItem>\n                <MenuItem value={RefinedType.String}>String</MenuItem>\n              </Select>\n            </FormControl>\n          )}\n          <EditValueInput node={valueNode} onChange={setValueNode} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsDialogOpen(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              if (valueNode !== null) {\n                const newParentnode = {\n                  ...props.parentNode,\n                  children: [...props.parentNode.children, valueNode.key],\n                };\n                updateNodes([valueNode, newParentnode]);\n              }\n              setValueNode(templateNode);\n              setIsDialogOpen(false);\n            }}\n            color=\"primary\"\n          >\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import React from \"react\";\nimport { TNullNode } from \"../../../../../utils/normalization\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function NullNodeCardView(props: { node: TNullNode }) {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n      Null\n    </Typography>\n  );\n}\n","import React from \"react\";\nimport { TNumberNode } from \"../../../../../utils/normalization\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function NumberNodeCardView(props: { node: TNumberNode }) {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n      {props.node.value}\n    </Typography>\n  );\n}\n","import { Close, Minimize } from \"@material-ui/icons\";\nimport { IconButton, useTheme } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport {\n  RefinedType,\n  TNode,\n  TObjectNode,\n  defaultNodeValue,\n} from \"../../../../../utils/normalization\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport EditValueInput from \"../EditValueInput\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport TextField from \"@material-ui/core/TextField\";\nimport useDecodedDataContext from \"../../../useDecodedDataContext\";\n\nexport default function NewFieldDialogButton(props: { parentNode: TObjectNode }) {\n  const theme = useTheme();\n  const { updateNodes } = useDecodedDataContext();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [valueNode, setValueNode] = useState<TNode>(\n    defaultNodeValue(RefinedType.String, props.parentNode),\n  );\n  const [fieldName, setFieldName] = useState<string>(\"\");\n  if (updateNodes === null) {\n    return null;\n  }\n  const closeAndClearDialog = () => {\n    setIsDialogOpen(false);\n    setValueNode(defaultNodeValue(RefinedType.String, props.parentNode));\n    setFieldName(\"\");\n  };\n  return (\n    <span\n      style={{ display: \"flex\", alignItems: \"center\" }}\n      onClick={(event) => event.stopPropagation()}\n    >\n      <IconButton\n        onClick={(e) => {\n          setIsDialogOpen(true);\n        }}\n      >\n        <AddIcon fontSize=\"large\" />\n      </IconButton>\n      <Dialog\n        open={isDialogOpen}\n        onClose={() => setIsDialogOpen(false)}\n        aria-labelledby=\"new-item-dialog-title\"\n        fullWidth\n        maxWidth=\"xs\"\n      >\n        <DialogTitle id=\"new-item-dialog-title\">Add New Item</DialogTitle>\n        <div\n          style={{\n            position: \"absolute\",\n            display: \"flex\",\n            alignItems: \"center\",\n            right: theme.spacing(1),\n            top: theme.spacing(1),\n          }}\n        >\n          <IconButton aria-label=\"minimize\" onClick={() => setIsDialogOpen(false)}>\n            <Minimize style={{ transform: \"translate(0px, -7px)\" }} />\n          </IconButton>\n          <IconButton aria-label=\"close\" onClick={closeAndClearDialog}>\n            <Close />\n          </IconButton>\n        </div>\n        <DialogContent dividers style={{ minHeight: 180 }}>\n          <div style={{ display: \"flex\" }}>\n            <FormControl variant=\"filled\" style={{ minWidth: 120 }}>\n              <InputLabel>Type</InputLabel>\n              <Select\n                label=\"Type\"\n                value={valueNode.type}\n                onChange={(event) => {\n                  const newType: RefinedType = event.target.value as RefinedType;\n                  setValueNode(defaultNodeValue(newType, props.parentNode));\n                }}\n              >\n                <MenuItem value={RefinedType.List}>List</MenuItem>\n                <MenuItem value={RefinedType.Boolean}>Question</MenuItem>\n                <MenuItem value={RefinedType.Date}>Date</MenuItem>\n                <MenuItem value={RefinedType.Number}>Number</MenuItem>\n                <MenuItem value={RefinedType.Object}>Folder</MenuItem>\n                <MenuItem value={RefinedType.String}>Text</MenuItem>\n              </Select>\n            </FormControl>\n            <span style={{ width: theme.spacing(1) }} />\n            <TextField\n              label=\"Name\"\n              variant=\"filled\"\n              type=\"string\"\n              autoFocus\n              value={fieldName}\n              onChange={(event) => setFieldName(event.target.value)}\n              fullWidth\n            />\n          </div>\n          <div style={{ height: theme.spacing(1) }} />\n          <EditValueInput node={valueNode} onChange={setValueNode} />\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => {\n              if (valueNode) {\n                const newParentNode: TObjectNode = {\n                  ...props.parentNode,\n                  fields: [\n                    ...props.parentNode.fields,\n                    {\n                      name: fieldName,\n                      value: valueNode.key,\n                      parentKey: valueNode.parentKey,\n                    },\n                  ],\n                };\n                updateNodes([valueNode, newParentNode]);\n              }\n              closeAndClearDialog();\n            }}\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </span>\n  );\n}\n","import React, { CSSProperties } from \"react\";\n\nimport { useTheme } from \"@material-ui/core\";\n\ntype Props = {\n  style?: CSSProperties;\n};\nexport default function BlurredBar({ style }: Props) {\n  const theme = useTheme();\n  return (\n    <span\n      style={{\n        backgroundColor: theme.palette.text.primary,\n        opacity: 0.1,\n        filter: \"blur(4px)\",\n        ...style,\n      }}\n    />\n  );\n}\n","import React, { useContext, useRef, useState } from \"react\";\nimport {\n  RefinedType,\n  TObjectField,\n  TObjectNode,\n} from \"../../../../../utils/normalization\";\n\nimport { DraggableItemsContext } from \"../../../useDraggableItemsContext\";\nimport useDecodedDataContext from \"../../../useDecodedDataContext\";\nimport { useTheme } from \"@material-ui/core\";\n\ntype useDragObjectFieldReturn = {\n  draggableContainerProps: {\n    draggable: boolean;\n    style?: React.CSSProperties;\n    onDragStart?(event: React.DragEvent<HTMLDivElement>): void;\n    onDragEnd?(event: React.DragEvent<HTMLDivElement>): void;\n  };\n  dropTargetProps: {\n    ref?: React.Ref<HTMLDivElement>;\n    style: React.CSSProperties;\n    onDrop?(event: React.DragEvent<HTMLDivElement>): void;\n    onDragOver?(event: React.DragEvent<HTMLDivElement>): void;\n    onDragLeave?(event: React.DragEvent<HTMLDivElement>): void;\n  };\n};\n\nexport default function useDragObjectField(\n  item: TObjectField,\n): useDragObjectFieldReturn {\n  const ref = useRef<HTMLDivElement>(null);\n  const theme = useTheme();\n  const { store, updateNodes } = useDecodedDataContext();\n  const [hoverStatus, setHover] = useState<\"AFTER\" | \"BEFORE\" | null>(null);\n  const context = useContext(DraggableItemsContext);\n  if (updateNodes === null || context === null) {\n    return {\n      draggableContainerProps: {\n        draggable: false,\n      },\n      dropTargetProps: {\n        style: { display: \"none\" },\n      },\n    };\n  }\n  const { draggedItem, setDraggedItem } = context;\n  const isBeingDragged = item.value === draggedItem?.value;\n  return {\n    draggableContainerProps: {\n      draggable: true,\n      style: { position: \"relative\" },\n      onDragStart: (event) => {\n        setDraggedItem(item);\n        event.stopPropagation();\n      },\n      onDragEnd: () => setDraggedItem(null),\n    },\n    dropTargetProps: {\n      ref,\n      style: {\n        position: \"absolute\",\n        display: draggedItem === null ? \"none\" : undefined,\n        zIndex: 1,\n        borderColor: theme.palette.primary.main,\n        ...(isBeingDragged\n          ? {\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0,\n              borderWidth: 2,\n              borderRadius: theme.shape.borderRadius,\n              borderStyle: \"dashed\",\n            }\n          : {\n              top: 4,\n              bottom: 4,\n              left: -2,\n              right: -2,\n              borderWidth: 4,\n              borderLeftStyle: hoverStatus === \"BEFORE\" ? \"solid\" : \"none\",\n              borderRightStyle: hoverStatus === \"AFTER\" ? \"solid\" : \"none\",\n              borderTopStyle: \"none\",\n              borderBottomStyle: \"none\",\n            }),\n      },\n      onDrop: () => {\n        if (hoverStatus === null || draggedItem === null) {\n          return;\n        }\n        const sourceParent = store.nodes[draggedItem.parentKey];\n        const targetParent = store.nodes[item.parentKey];\n        if (\n          sourceParent.type !== RefinedType.Object ||\n          targetParent.type !== RefinedType.Object\n        ) {\n          // we can only drag a field into an object from an object\n          return;\n        }\n\n        // remove item from source\n        const newSourceParent: TObjectNode = {\n          ...sourceParent,\n          fields: sourceParent.fields.filter((f) => f.value !== draggedItem.value),\n        };\n        if (item.parentKey === draggedItem.parentKey) {\n          updateNodes([\n            insertIntoPlace(newSourceParent, draggedItem, item, hoverStatus),\n          ]);\n        } else {\n          updateNodes([\n            newSourceParent,\n            insertIntoPlace(targetParent, draggedItem, item, hoverStatus),\n          ]);\n        }\n        setHover(null);\n        setDraggedItem(null);\n      },\n      onDragOver: (event) => {\n        if (ref.current == null || isBeingDragged) {\n          return;\n        }\n        const boundingBox = ref.current.getBoundingClientRect();\n        const halfWidth = boundingBox.width / 2;\n        const centerX = boundingBox.left + halfWidth;\n        setHover(event.pageX > centerX ? \"AFTER\" : \"BEFORE\");\n        event.preventDefault();\n      },\n      onDragLeave: () => {\n        setHover(null);\n      },\n    },\n  };\n}\n\nfunction insertIntoPlace(\n  parentNode: TObjectNode,\n  draggedItem: TObjectField,\n  droppedItem: TObjectField,\n  hoverStatus: \"AFTER\" | \"BEFORE\",\n): TObjectNode {\n  const offset = hoverStatus === \"AFTER\" ? 1 : 0;\n  const newPosition =\n    parentNode.fields.findIndex((f) => f.value === droppedItem.value) + offset;\n  return {\n    ...parentNode,\n    fields: [\n      ...parentNode.fields.slice(0, newPosition),\n      draggedItem,\n      ...parentNode.fields.slice(newPosition),\n    ],\n  };\n}\n","import { Card, CardActionArea, CardContent, useTheme } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { RefinedType, TObjectField } from \"../../../../../utils/normalization\";\n\nimport BlurredBar from \"../../../../../components/BlurredBar\";\nimport Button from \"@material-ui/core/Button\";\nimport CardView from \"../CardView\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport EditValueInput from \"../EditValueInput\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NodeTypeIcon from \"../NodeTypeIcon\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport useDecodedDataContext from \"../../../useDecodedDataContext\";\nimport useDragObjectField from \"./useDragObjectField\";\n\n// replace this generic grow to show with something better by type\n// Maybe open a preview Dialog ?\n// when entering a folder put a dark background on top of parent?\nexport default function ObjectFieldNodeCardView({\n  name,\n  value,\n  parentKey,\n}: TObjectField) {\n  const theme = useTheme();\n  const { draggableContainerProps, dropTargetProps } = useDragObjectField({\n    name,\n    value,\n    parentKey,\n  });\n  const needsToExpand = useNeedsToExpand(name, value);\n  const [isMinimized, setIsMinimized] = useState(true);\n  return (\n    <Grid\n      item\n      xs={12}\n      sm={12}\n      md={isMinimized || !needsToExpand ? 6 : 12}\n      lg={isMinimized || !needsToExpand ? 3 : 12}\n      xl={isMinimized || !needsToExpand ? 2 : 12}\n      {...draggableContainerProps}\n    >\n      <div {...dropTargetProps} />\n      <Card\n        onClick={(e) => {\n          e.stopPropagation();\n          setIsMinimized((v) => !v);\n        }}\n        variant=\"outlined\"\n      >\n        <CardActionArea disableRipple>\n          <CardContent>\n            <Typography\n              gutterBottom\n              variant=\"h6\"\n              style={{ display: \"flex\", alignItems: \"center\" }}\n            >\n              <NodeTypeIcon nodeKey={value} />\n              <span style={{ width: theme.spacing(1) }} />\n              <span\n                style={\n                  isMinimized\n                    ? {\n                        whiteSpace: \"nowrap\",\n                        overflow: \"hidden\",\n                        textOverflow: \"ellipsis\",\n                        flexGrow: 1,\n                      }\n                    : { flexGrow: 1 }\n                }\n              >\n                {name}\n              </span>\n              {!isMinimized && (\n                <span onClick={(e) => e.stopPropagation()}>\n                  <EditFieldDialog name={name} value={value} parentKey={parentKey} />\n                </span>\n              )}\n            </Typography>\n            {isMinimized ? (\n              <BlurredBar\n                style={{\n                  width: \"80%\",\n                  height: 11,\n                  marginTop: theme.spacing(2),\n                  display: \"block\",\n                }}\n              />\n            ) : (\n              <CardView nodeKey={value} />\n            )}\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </Grid>\n  );\n}\n\nfunction useNeedsToExpand(name: string, nodeKey: string): boolean {\n  const { store } = useDecodedDataContext();\n  if (name.length > 20) {\n    return true;\n  }\n  const node = store.nodes[nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return false;\n    case RefinedType.Date:\n      return false;\n    case RefinedType.List:\n      return true;\n    case RefinedType.Null:\n      return false;\n    case RefinedType.Number:\n      return node.value.toString().length > 30;\n    case RefinedType.Object:\n      return true;\n    case RefinedType.String:\n      return node.value.length > 30;\n  }\n}\n\nfunction EditFieldDialog({ name, value, parentKey }: TObjectField) {\n  const theme = useTheme();\n  const { store, updateNodes } = useDecodedDataContext();\n  const [newFieldName, setNewFieldName] = useState(name);\n  const oldValueNode = store.nodes[value];\n  const oldParentNode = store.nodes[parentKey];\n  const [valueNode, setValueNode] = useState(oldValueNode);\n  const [isEditting, setIsEditting] = useState(false);\n\n  // refresh if new values are passed.\n  useEffect(() => {\n    setNewFieldName(name);\n    setValueNode(oldValueNode);\n  }, [name, oldValueNode, oldParentNode]);\n  if (updateNodes === null || oldParentNode.type !== RefinedType.Object) {\n    return null;\n  }\n  return (\n    <>\n      <IconButton onClick={() => setIsEditting(true)} size=\"small\">\n        <CreateIcon fontSize=\"small\" />\n      </IconButton>\n      {isEditting && (\n        <Dialog\n          open={isEditting}\n          onClose={() => setIsEditting(false)}\n          aria-labelledby=\"edit-dialog-title\"\n          fullWidth\n          maxWidth=\"xs\"\n        >\n          <DialogTitle id=\"edit-dialog-title\">Edit</DialogTitle>\n          <DialogContent>\n            <TextField\n              label=\"Name\"\n              variant=\"outlined\"\n              type=\"string\"\n              autoFocus\n              value={newFieldName}\n              onChange={(event) => setNewFieldName(event.target.value)}\n              fullWidth\n            />\n            <span style={{ width: theme.spacing(1) }} />\n            <EditValueInput node={valueNode} onChange={setValueNode} />\n          </DialogContent>\n          <DialogActions>\n            <Button\n              onClick={() => {\n                const newParentNode = {\n                  ...oldParentNode,\n                  fields: oldParentNode.fields.filter(\n                    (originalField) => originalField.value !== value,\n                  ),\n                };\n                updateNodes([newParentNode]);\n                setIsEditting(false);\n              }}\n            >\n              Delete\n            </Button>\n            <span style={{ flex: 1 }} />\n            <Button onClick={() => setIsEditting(false)}>Cancel</Button>\n            <Button\n              color=\"primary\"\n              onClick={() => {\n                const newParentNode = {\n                  ...oldParentNode,\n                  fields: oldParentNode.fields.map((originalField) =>\n                    originalField.value !== value\n                      ? originalField\n                      : { ...originalField, name: newFieldName },\n                  ),\n                };\n                updateNodes([valueNode, newParentNode]);\n                setIsEditting(false);\n              }}\n            >\n              Save\n            </Button>\n          </DialogActions>\n        </Dialog>\n      )}\n    </>\n  );\n}\n","import { OutlinedInput, useTheme } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport NewFieldDialogButton from \"./NewFieldDialogButton\";\nimport ObjectFieldNodeCardView from \"./ObjectFieldNodeCardView\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { TObjectNode } from \"../../../../../utils/normalization\";\nimport useSearchTextOnNodeRecursively from \"./useSearchTextOnNodeRecursively\";\n\ntype Props = { node: TObjectNode };\nexport default function ObjectNodeCardView({ node }: Props) {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const searchMatches = useSearchTextOnNodeRecursively(searchValue);\n  const theme = useTheme();\n  const [searchHasFocus, setSearchHasFocus] = useState(false);\n  return (\n    <>\n      {node.fields.length > 7 ? (\n        <Grid item xs={12} sm={searchHasFocus ? 6 : 4} md={searchHasFocus ? 4 : 3}>\n          <FormControl\n            variant=\"outlined\"\n            fullWidth={searchHasFocus || searchValue !== \"\"}\n          >\n            <OutlinedInput\n              onKeyDown={(event) => {\n                if (event.key === \" \") {\n                  // You've seen nothing\n                  event.preventDefault();\n                  setSearchValue((v) => v + \" \");\n                  // I will stop remove this mess later\n                }\n              }}\n              onFocus={() => setSearchHasFocus(true)}\n              onBlur={() => setSearchHasFocus(false)}\n              placeholder=\"Search ...\"\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              startAdornment={\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n          <div style={{ height: theme.spacing(2) }} />\n        </Grid>\n      ) : null}\n      <Grid container spacing={1} onClick={(event) => event.stopPropagation()}>\n        {node.fields\n          .filter(\n            (field) =>\n              field.name\n                .toLocaleLowerCase()\n                .includes(searchValue.toLocaleLowerCase()) ||\n              searchMatches(field.value),\n          )\n          .map((field) => (\n            <ObjectFieldNodeCardView\n              name={field.name}\n              value={field.value}\n              parentKey={node.key}\n              key={field.value}\n            />\n          ))}\n        <NewFieldDialogButton parentNode={node} />\n      </Grid>\n    </>\n  );\n}\n","import React from \"react\";\nimport { TStringNode } from \"../../../../../utils/normalization\";\nimport { Typography } from \"@material-ui/core\";\n\nexport default function StringNodeCardView(props: { node: TStringNode }) {\n  return (\n    <Typography\n      variant=\"body2\"\n      color=\"textSecondary\"\n      display=\"inline\"\n      onClick={(e) => e.stopPropagation()}\n      style={{ userSelect: \"text\", minWidth: 20 }}\n    >\n      {props.node.value === \"\" ? \"Ø\" : props.node.value}\n    </Typography>\n  );\n}\n","import BooleanNodeCardView from \"./Boolean/BooleanNodeCardView\";\nimport DateNodeCardView from \"./Date/DateNodeCardView\";\nimport ListNodeCardView from \"./List/ListNodeCardView\";\nimport NullNodeCardView from \"./Null/NullNodeCardView\";\nimport NumberNodeCardView from \"./Number/NumberNodeCardView\";\nimport ObjectNodeCardView from \"./Object/ObjectNodeCardView\";\nimport React from \"react\";\nimport { RefinedType } from \"../../../../utils/normalization\";\nimport StringNodeCardView from \"./String/StringNodeCardView\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\n\ntype Props = { nodeKey: string };\nexport default function CardView({ nodeKey }: Props) {\n  const { store } = useDecodedDataContext();\n  const node = store.nodes[nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return <BooleanNodeCardView node={node} />;\n    case RefinedType.Date:\n      return <DateNodeCardView node={node} />;\n    case RefinedType.List:\n      return <ListNodeCardView node={node} />;\n    case RefinedType.Null:\n      return <NullNodeCardView node={node} />;\n    case RefinedType.Number:\n      return <NumberNodeCardView node={node} />;\n    case RefinedType.Object:\n      return <ObjectNodeCardView node={node} />;\n    case RefinedType.String:\n      return <StringNodeCardView node={node} />;\n  }\n}\n","import { createContext, useContext, useState } from \"react\";\n\nimport { TObjectField } from \"../../utils/normalization\";\n\ntype TDraggableItemsContext = {\n  draggedItem: TObjectField | null;\n  setDraggedItem(item: TObjectField | null): void;\n};\nexport const DraggableItemsContext = createContext<TDraggableItemsContext | null>(\n  null,\n);\nexport function useDraggableItemsContext() {\n  const context = useContext(DraggableItemsContext);\n  if (context == null) {\n    throw new Error(\"missing DraggableItemsContext.Provider\");\n  }\n  return context;\n}\n\nexport default function useDraggableItemsProvider() {\n  const [draggedItem, setDraggedItem] = useState<TObjectField | null>(null);\n  return {\n    draggedItem,\n    setDraggedItem,\n  };\n}\n","import { TDateNode } from \"../../../../../utils/normalization\";\n\nexport default function DateNodeCardView(props: { node: TDateNode }) {\n  return <span>{date2HumanValue(props.node.date)}</span>;\n}\n\nexport function date2HumanValue(date: Date): string {\n  const year = date.getFullYear().toString();\n  const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getDate().toString().padStart(2, \"0\");\n  return `${month}-${day}-${year}`;\n}\n"],"sourceRoot":""}