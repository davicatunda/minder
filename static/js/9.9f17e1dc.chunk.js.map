{"version":3,"sources":["utils/data-manipulation.ts","utils/encryption.ts","pages/memory/vault/MemoryVaultSettingsMenu.tsx","pages/memory/vault/MemoryVault.tsx","pages/memory/vault/info/MemoryVaultInfo.tsx","pages/memory/vault/MemoryVaultLayout.tsx","pages/memory/vault/MemoryVaultLockEditModeButton.tsx","pages/memory/google-vault/useGoogleCardContext.ts","google-integration/uploadFile.ts","pages/memory/vault/info/MemoryVaultSaveDataMenu.tsx","google-integration/updateFileContent.ts","pages/memory/vault/info/MemoryVaultSaveDataButton.tsx","pages/memory/vault/info/MemoryVaultSaveKeyMenu.tsx","pages/memory/vault/info/MemoryVaultSaveKeyButton.tsx","pages/memory/google-vault/GoogleMemoryVault.tsx","pages/memory/vault/create/DragAndDrop.tsx","pages/memory/vault/create/inputs/readFile.ts","pages/memory/vault/create/inputs/MemoryVaultKeyInput.tsx","pages/memory/vault/create/inputs/MemoryVaultTitleInput.tsx","pages/memory/google-vault/GoogleMemoryVaultCreateForm.tsx","pages/memory/vault/create/MemoryVaultCreatingStateLayout.tsx","pages/memory/vault/create/MemoryVaultPreview.tsx","pages/memory/google-vault/GoogleMemoryVaultCreatingState.tsx","pages/memory/google-vault/GoogleMemoryVaultLoadingState.tsx","pages/memory/google-vault/GoogleMemoryCard.tsx","google-integration/deleteFile.ts","pages/memory/useStandardProposal.ts","pages/memory/navbar/LeftNavAddCardItem.tsx","pages/memory/vault/CardNavBarItem.tsx","pages/memory/navbar/LeftNavCardItem.tsx","pages/memory/google-vault/GoogleCardNavBarItem.tsx","pages/memory/navbar/LeftNavGoogleItem.tsx","pages/memory/vault/create/inputs/MemoryVaultDataInput.tsx","pages/memory/vault/create/MemoryVaultCreateForm.tsx","pages/memory/vault/create/MemoryVaultCreatingState.tsx","pages/memory/vault/MemoryVaultLoadingState.tsx","pages/memory/vault/MemoryCard.tsx","google-integration/useGoogleFilesList.ts","google-integration/useEnforceScope.ts","pages/memory/useCardsFromGoogleDrive.ts","pages/memory/MemoryPage.tsx","pages/memory/useCardsFromUrl.ts"],"names":["arraybuffer2stringUTF16","buf","String","fromCharCode","apply","Uint16Array","string2arraybufferUTF16","str","bufffer","ArrayBuffer","length","bufView","i","strLen","charCodeAt","arraybuffer2stringUTF8","Uint8Array","arraybuffer2base64UTF8","aUTF8CodeUnits","Array","prototype","forEach","call","_","idx","arr","btoa","buffer","btoaUTF8","base642arraybufferUTF8","str64","string2arraybufferUTF8","sBinaryString","atob","aBinaryView","atobUTF8","arraybuffer2base64UTF16","aUTF16CodeUnits","btoaUTF16","base642arraybufferUTF16","atobUTF16","plainText","key","a","iv","window","crypto","getRandomValues","subtle","importKey","name","cryptoKey","encrypt","cypher","data","split","encryptedMessage","decrypt","decryptedData","createKey","generateKey","exportKey","exportedKey","isKeyValid","test","useDataAsStore","decodedData","overrides","useState","store","setStore","title","useEffect","normalizeRoot","updateNodes","nodes","newNodes","node","newStore","rootNode","updated","Date","useDataDecryption","initialData","encryptionKey","setDecryptedData","hasFailed","setHasFailed","then","catch","encryptData","onComplete","denormalizeRoot","MemoryVaultSettingsMenu","onDelete","ref","useRef","isOpen","setIsOpen","onClick","anchorEl","current","open","onClose","DeleteItem","React","classes","root","css","minWidth","fontSize","color","aria-labelledby","aria-describedby","id","autoFocus","MemoryVault","vaultData","children","isReadOnly","draggableData","useDraggableItemsProvider","Provider","value","header","body","nodeKey","bodyButton","info","menuButton","cardButtons","MemoryVaultInfo","useDecodedDataContext","variant","display","date2HumanValue","created","MemoryVaultLayout","theme","useTheme","className","padding","spacing","minHeight","flexGrow","container","item","xs","lg","alignItems","s1","grow","flexDirection","gutterBottom","s2","MemoryVaultLockEditModeButton","useEditingContext","isEditing","setIsEditing","setBreadcrumbs","useBreadcrumbsContext","enterDelay","GoogleCardContext","createContext","useGoogleCardContext","context","useContext","googleResourceId","uploadFile","config","encryptedData","form","FormData","append","Blob","JSON","stringify","mimeType","parents","appProperties","withKey","undefined","type","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","setRequestHeader","gapi","auth","getToken","access_token","responseType","send","listItemIconStyle","MemoryVaultSaveDataMenu","menuProps","useGoogleAuthContext","Menu","LoggedOutActions","onItemPress","currentUser","get","isSignedIn","LoggedInActions","MenuItem","e","element","document","createElement","setAttribute","encodeURIComponent","style","appendChild","click","removeChild","ListItemIcon","CloudDownload","Typography","Divider","navigator","clipboard","writeText","FileCopy","icon","googleDrive","width","height","Tooltip","placement","HelpOutline","fileId","updateFileContent","MemoryVaultSaveDataButton","anchorRef","isShowingPopover","setIsShowingPopover","Button","fullWidth","size","MemoryVaultSaveKeyMenu","MeetingRoom","MemoryVaultSaveKeyButton","GoogleMemoryVault","resourceId","DragAndDrop","onDrop","event","preventDefault","dataTransfer","files","onDragOver","onDragEnter","readFile","file","onDone","reader","FileReader","onloadend","result","readAsText","MemoryVaultKeyInput","setEncryptionKey","TextField","margin","error","required","label","autoComplete","onChange","target","InputProps","endAdornment","InputAdornment","position","arrow","IconButton","aria-label","Cached","MemoryVaultTitleInput","setTitle","GooglemMemoryVaultCreateForm","right","top","Delete","align","disabled","startIcon","Add","MemoryVaultCreatingStateLayout","preview","onSubmit","Grid","md","xl","Paper","component","setTimeout","request","MemoryVaultPreview","titleWithFallback","BreadcrumbsProvider","flex","backgroundColor","palette","background","default","opacity","left","bottom","zIndex","justifyContent","BreadcrumbPaths","CardView","GoogleMemoryVaultCreatingState","GoogleMemoryVaultLoadingState","overflow","GoogleMemoryCard","card","setGoogleCards","deleteCard","client","drive","delete","old","filter","c","changeCardVaultData","useCallback","newVaultData","map","oldCard","isLoading","Collapse","in","isCreating","newCard","QUERY","gql","useStandardProposal","onCompleted","useQuery","standardProposal","LeftNavAddCardItem","addCard","uuid","List","ListItem","button","ListItemText","primary","oneLineStyle","whiteSpace","textOverflow","CardNavBarItem","toogleCardVisibility","Drafts","Mail","primaryTypographyProps","LeftNavCardItem","setCards","selectedCard","oldCards","GoogleCardNavBarItem","LeftNavGoogleItem","alt","DataOptions","MemoryVaultDataInput","setInitialData","expanded","setExpanded","STANDARD","dataOption","selectDataOption","setEncryptedData","aria-expanded","ExpandLess","ExpandMore","timeout","unmountOnExit","FormLabel","RadioGroup","CUSTOM","EMPTY","FormControlLabel","control","Radio","version","textTransform","outlineWidth","outlineStyle","outlineColor","secondary","main","GetApp","Done","hidden","MemoryVaultCreateForm","Close","MemoryVaultCreatingState","MemoryVaultLoadingState","onDataLoaded","MemoryCard","useGoogleFilesList","onFetch","hasScope","scope","user","hasGrantedScopes","grant","useEnforceScope","GOOGLE_SCOPES","list","spaces","fields","pageSize","response","filetoListItem","MemoryPage","googleCards","listItems","useCardsFromGoogleDrive","cards","search","useLocation","params","queryString","parse","cardFromUrl","readOnly","join","useCardsFromUrl","createdCards","leftNavSections","child","index","all","bodyCards","leftNavIsFixed","useMediaQuery","breakpoints","up","hasRightNav","setOpen","endIcon","ChevronRight","borderTopLeftRadius","borderBottomLeftRadius","SwipeableDrawer","anchor","onOpen","paper","flexBasis","flexShrink","borderRightColor","divider","borderRightWidth","borderRightStyle"],"mappings":"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","file":"static/js/9.9f17e1dc.chunk.js","sourcesContent":["/**\n * ArrayBuffer to String UTF 16 and 8 helpers\n */\nexport function arraybuffer2stringUTF16(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\n\nexport function string2arraybufferUTF16(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  const bufView = new Uint16Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\nexport function arraybuffer2stringUTF8(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint8Array(buf) as any);\n}\n\nexport function string2arraybufferUTF8(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\n/**\n * Base 64 <-> array buffer UTF 16 and 8\n */\nexport function arraybuffer2base64UTF8(buf: ArrayBuffer): string {\n  return btoaUTF8(arraybuffer2stringUTF8(buf));\n}\n\nexport function base642arraybufferUTF8(str64: string): ArrayBuffer {\n  return string2arraybufferUTF8(atobUTF8(str64));\n}\n\nexport function arraybuffer2base64UTF16(buf: ArrayBuffer): string {\n  return btoaUTF16(arraybuffer2stringUTF16(buf));\n}\n\nexport function base642arraybufferUTF16(str64: string): ArrayBuffer {\n  return string2arraybufferUTF16(atobUTF16(str64));\n}\n\n/**\n * Base 64  <-> String UTF 16 and 8\n */\n\nfunction btoaUTF16(str: string): string {\n  const aUTF16CodeUnits = new Uint16Array(str.length);\n  Array.prototype.forEach.call(aUTF16CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF16CodeUnits.buffer));\n}\n\nfunction atobUTF16(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF16(aBinaryView.buffer);\n}\n\nfunction btoaUTF8(str: string): string {\n  const aUTF8CodeUnits = new Uint8Array(str.length);\n  Array.prototype.forEach.call(aUTF8CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF8CodeUnits.buffer));\n}\n\nfunction atobUTF8(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF8(aBinaryView.buffer);\n}\n","/**\n * Set of methods used to encrypt and decrypt the data, all operating on base 64\n * TODO: remove redundant conversions for more direct mappings.\n */\n\nimport { Store, TNode, denormalizeRoot, normalizeRoot } from \"./normalization\";\nimport {\n  arraybuffer2base64UTF16,\n  arraybuffer2base64UTF8,\n  arraybuffer2stringUTF16,\n  base642arraybufferUTF16,\n  base642arraybufferUTF8,\n  string2arraybufferUTF16,\n} from \"./data-manipulation\";\nimport { useEffect, useState } from \"react\";\n\n/**\n * Encrypts the data together with iv on base 64 format\n * @param {string} plainText: plain UTF 16 text\n * @param {string} key: encrypted on base 64 format\n */\nexport async function encrypt(plainText: string, key: string): Promise<string> {\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const cypher = await window.crypto.subtle.encrypt(\n    { name: \"AES-GCM\", iv: iv },\n    cryptoKey,\n    string2arraybufferUTF16(plainText),\n  );\n\n  // join iv and message\n  return `${arraybuffer2base64UTF8(iv)}!${arraybuffer2base64UTF16(cypher)}`;\n}\n\n/**\n * Decrypts the data to plain text\n * @param {string} data: encrypted on base 64 format\n * @param {string} key: encrypted on base 64 format\n */\nexport async function decrypt(data: string, key: string): Promise<string> {\n  // split iv from message\n  const [iv, encryptedMessage] = data.split(\"!\");\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const decryptedData = await window.crypto.subtle.decrypt(\n    { name: \"AES-GCM\", iv: base642arraybufferUTF8(iv) },\n    cryptoKey,\n    base642arraybufferUTF16(encryptedMessage),\n  );\n  return arraybuffer2stringUTF16(decryptedData);\n}\n\n/**\n * Creates an unique base 64 key for all encryptions\n */\nexport async function createKey(): Promise<string> {\n  const key = await window.crypto.subtle.generateKey(\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const exportedKey = await window.crypto.subtle.exportKey(\"raw\", key);\n  return arraybuffer2base64UTF16(exportedKey);\n}\n\nexport function isKeyValid(key: string): boolean {\n  const base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n  return base64regex.test(key) && key.length === 44;\n}\n\nexport function useDataAsStore(\n  decodedData: string | null,\n  overrides: {\n    title?: string;\n  },\n): {\n  store: Store;\n  updateNodes: (nodes: TNode[]) => void;\n} | null {\n  const [store, setStore] = useState<Store | null>(null);\n  const { title } = overrides;\n  useEffect(() => {\n    if (decodedData === null) {\n      return;\n    }\n    setStore(normalizeRoot(decodedData, { title }));\n  }, [decodedData, title]);\n\n  if (store === null) {\n    return null;\n  }\n\n  return {\n    store,\n    updateNodes: (nodes: TNode[]) => {\n      const newNodes = { ...store.nodes };\n      nodes.forEach((node) => (newNodes[node.key] = node));\n      const newStore = {\n        rootNode: {\n          ...store.rootNode,\n          updated: new Date(),\n        },\n        nodes: newNodes,\n      };\n      setStore(newStore);\n    },\n  };\n}\n\nexport function useDataDecryption(initialData: string, encryptionKey: string) {\n  const [decryptedData, setDecryptedData] = useState<string | null>(null);\n  const [hasFailed, setHasFailed] = useState<boolean>(false);\n  useEffect(() => {\n    const isDecryptedAlready = initialData[0] === \"{\";\n    if (isDecryptedAlready) {\n      setDecryptedData(initialData);\n      setHasFailed(false);\n    } else {\n      decrypt(initialData, encryptionKey)\n        .then((data) => {\n          setDecryptedData(data);\n          setHasFailed(false);\n        })\n        .catch(() => {\n          setHasFailed(true);\n          setDecryptedData(\"{}\");\n        });\n    }\n  }, [initialData, encryptionKey]);\n  return { decryptedData, hasFailed };\n}\n\nexport function useDataEncryption(store: Store, encryptionKey: string) {\n  const [encryptedData, setEncryptedData] = useState<string | null>(null);\n  useEffect(() => {\n    encryptData(store, encryptionKey, setEncryptedData);\n  }, [store, encryptionKey]);\n  return encryptedData;\n}\n\nexport function encryptData(\n  store: Store,\n  encryptionKey: string,\n  onComplete: (encryptedData: string) => void,\n) {\n  const plainText = denormalizeRoot(store);\n  encrypt(plainText, encryptionKey).then(onComplete);\n}\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  IconButton,\n  ListItemIcon,\n  Menu,\n  MenuItem,\n  Typography,\n} from \"@material-ui/core\";\nimport { Delete, MoreHoriz } from \"@material-ui/icons\";\nimport React, { useRef, useState } from \"react\";\n\nimport { css } from \"@emotion/css\";\n\ntype Props = {\n  onDelete: () => void;\n};\nexport default function MemoryVaultSettingsMenu({ onDelete }: Props) {\n  const ref = useRef(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <IconButton onClick={() => setIsOpen(true)} ref={ref}>\n        <MoreHoriz />\n      </IconButton>\n      <Menu anchorEl={ref.current} open={isOpen} onClose={() => setIsOpen(false)}>\n        <DeleteItem\n          onDelete={() => {\n            onDelete();\n            setIsOpen(false);\n          }}\n        />\n      </Menu>\n    </>\n  );\n}\n\nfunction DeleteItem({ onDelete }: Props) {\n  const [isOpen, setIsOpen] = React.useState(false);\n  return (\n    <>\n      <MenuItem onClick={() => setIsOpen(true)}>\n        <ListItemIcon classes={{ root: css({ minWidth: 36 }) }}>\n          <Delete fontSize=\"small\" color=\"action\" />\n        </ListItemIcon>\n        <Typography>Delete</Typography>\n      </MenuItem>\n      <Dialog\n        open={isOpen}\n        onClose={() => setIsOpen(false)}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">Delete this item?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            This action can not be undone, are you sure you want to procced?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsOpen(false)} color=\"primary\">\n            No\n          </Button>\n          <Button\n            onClick={() => {\n              onDelete();\n              setIsOpen(false);\n            }}\n            color=\"primary\"\n            autoFocus\n          >\n            Yes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import { useDataAsStore, useDataDecryption } from \"../../../utils/encryption\";\nimport useDraggableItemsProvider, {\n  DraggableItemsContext,\n} from \"../useDraggableItemsContext\";\n\nimport BreadcrumbPaths from \"./BreadcrumbPaths\";\nimport BreadcrumbsProvider from \"./BreadcrumbsProvider\";\nimport CardView from \"./cards/CardView\";\nimport { DecodedDataContext } from \"../useDecodedDataContext\";\nimport EditingProvider from \"./EditingProvider\";\nimport MemoryVaultInfo from \"./info/MemoryVaultInfo\";\nimport MemoryVaultLayout from \"./MemoryVaultLayout\";\nimport MemoryVaultLockEditModeButton from \"./MemoryVaultLockEditModeButton\";\nimport MemoryVaultSaveDataButton from \"./info/MemoryVaultSaveDataButton\";\nimport MemoryVaultSaveKeyButton from \"./info/MemoryVaultSaveKeyButton\";\nimport MemoryVaultSettingsMenu from \"./MemoryVaultSettingsMenu\";\nimport React from \"react\";\nimport { Store } from \"../../../utils/normalization\";\n\nexport type VaultData = {\n  title: string;\n  encryptionKey: string;\n  initialData: string;\n};\n\ntype Props = {\n  vaultData: VaultData;\n  children?(store: Store): void;\n  isReadOnly?: boolean;\n  onDelete: () => void;\n};\n\nexport default function MemoryVault({\n  vaultData: { title, encryptionKey, initialData },\n  children,\n  isReadOnly = false,\n  onDelete,\n}: Props) {\n  const draggableData = useDraggableItemsProvider();\n  const { decryptedData } = useDataDecryption(initialData, encryptionKey);\n  const data = useDataAsStore(decryptedData, { title });\n  if (!data) {\n    return null;\n  }\n  const { store, updateNodes } = data;\n  return (\n    <EditingProvider>\n      <BreadcrumbsProvider>\n        <DraggableItemsContext.Provider value={draggableData}>\n          <DecodedDataContext.Provider\n            value={{\n              store,\n              encryptionKey,\n              updateNodes: isReadOnly ? null : updateNodes,\n            }}\n          >\n            <MemoryVaultLayout\n              header={<BreadcrumbPaths />}\n              body={<CardView nodeKey={store.rootNode.value} />}\n              bodyButton={<MemoryVaultLockEditModeButton />}\n              info={<MemoryVaultInfo />}\n              menuButton={<MemoryVaultSettingsMenu onDelete={onDelete} />}\n              cardButtons={[\n                <MemoryVaultSaveKeyButton />,\n                <MemoryVaultSaveDataButton />,\n              ]}\n            />\n            {children && children(store)}\n          </DecodedDataContext.Provider>\n        </DraggableItemsContext.Provider>\n      </BreadcrumbsProvider>\n    </EditingProvider>\n  );\n}\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { date2HumanValue } from \"../cards/textValueFromNode\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\n\nexport default function MemoryVaultInfo() {\n  const { store } = useDecodedDataContext();\n  return (\n    <>\n      <Typography variant=\"body2\" color=\"textSecondary\" display=\"block\">\n        Created: {date2HumanValue(store.rootNode.created)}\n      </Typography>\n      <Typography variant=\"body2\" color=\"textSecondary\" display=\"block\">\n        Last Updated: {date2HumanValue(store.rootNode.updated)}\n      </Typography>\n    </>\n  );\n}\n","import { Grid, Paper, Typography, useTheme } from \"@material-ui/core\";\nimport { HorizontalSpace, VerticalSpace } from \"../../core/Spacing\";\nimport React, { ReactNode } from \"react\";\n\nimport { css } from \"@emotion/css\";\n\ntype Props = {\n  header: ReactNode;\n  body: ReactNode;\n  bodyButton: ReactNode;\n  info: ReactNode;\n  menuButton: ReactNode;\n  cardButtons: ReactNode[];\n};\nexport default function MemoryVaultLayout({\n  header,\n  body,\n  bodyButton,\n  info,\n  menuButton,\n  cardButtons,\n}: Props) {\n  const theme = useTheme();\n  return (\n    <Paper\n      className={css({\n        padding: `${theme.spacing(3)}px ${theme.spacing(2)}px`,\n        minHeight: 300,\n        display: \"flex\",\n        flexGrow: 1,\n      })}\n    >\n      <Grid container spacing={3}>\n        <Grid item xs={12} lg={9}>\n          <div className={css({ display: \"flex\", alignItems: \"center\" })}>\n            {header}\n            <HorizontalSpace s1 grow />\n            {bodyButton}\n          </div>\n          <VerticalSpace s1 />\n          {body}\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          lg={3}\n          classes={{\n            root: css({ display: \"flex\", flexDirection: \"column\" }),\n          }}\n        >\n          <Typography variant=\"h6\" gutterBottom display=\"block\">\n            <div className={css({ display: \"flex\", alignItems: \"center\" })}>\n              Details\n              <HorizontalSpace s1 grow />\n              {menuButton}\n            </div>\n          </Typography>\n          {info}\n          <VerticalSpace s2 grow />\n          <div className={css({ display: \"flex\" })}>\n            {cardButtons[0]}\n            <HorizontalSpace s1 />\n            {cardButtons[1]}\n          </div>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n","import { Lock, LockOpen } from \"@material-ui/icons\";\n\nimport { Tooltip } from \"@material-ui/core\";\nimport { useBreadcrumbsContext } from \"./BreadcrumbsProvider\";\nimport { useEditingContext } from \"./EditingProvider\";\n\nexport default function MemoryVaultLockEditModeButton() {\n  const { isEditing, setIsEditing } = useEditingContext();\n  const { setBreadcrumbs } = useBreadcrumbsContext();\n\n  return isEditing ? (\n    <Tooltip title=\"Unlocked\" enterDelay={200}>\n      <LockOpen\n        onClick={() => {\n          setIsEditing(false);\n          setBreadcrumbs([]);\n        }}\n      />\n    </Tooltip>\n  ) : (\n    <Tooltip title=\"Locked, unlock to edit and move items\" enterDelay={1000}>\n      <Lock\n        onClick={() => {\n          setIsEditing(true);\n          setBreadcrumbs([]);\n        }}\n      />\n    </Tooltip>\n  );\n}\n","import { createContext, useContext } from \"react\";\n\ntype TGoogleCardContext = {\n  googleResourceId: string;\n};\n\nexport const GoogleCardContext = createContext<TGoogleCardContext | null>(null);\n\nexport default function useGoogleCardContext() {\n  const context = useContext(GoogleCardContext);\n  return context?.googleResourceId;\n}\n","import { Store } from \"../utils/normalization\";\nimport { encryptData } from \"../utils/encryption\";\n\nexport default function uploadFile(\n  store: Store,\n  encryptionKey: string,\n  config: { withKey: boolean },\n  onComplete?: () => void,\n) {\n  encryptData(store, encryptionKey, (encryptedData) => {\n    const form = new FormData();\n    form.append(\n      \"metadata\",\n      new Blob(\n        [\n          JSON.stringify({\n            name: store.rootNode.title,\n            mimeType: \"text/plain;charset=base64\",\n            parents: [\"appDataFolder\"],\n            appProperties: {\n              title: store.rootNode.title,\n              encryptionKey: config.withKey ? encryptionKey : undefined,\n            },\n          }),\n        ],\n        { type: \"application/json\" },\n      ),\n    );\n    form.append(\"file\", new Blob([encryptedData], { type: \"text/plain\" }));\n    const xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState !== XMLHttpRequest.DONE) {\n        return;\n      }\n      onComplete && onComplete();\n    };\n\n    xhr.open(\n      \"POST\",\n      \"https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id\",\n    );\n    xhr.setRequestHeader(\n      \"Authorization\",\n      \"Bearer \" + gapi.auth.getToken().access_token,\n    );\n    xhr.responseType = \"json\";\n    xhr.send(form);\n  });\n}\n","import { CloudDownload, FileCopy, HelpOutline } from \"@material-ui/icons\";\nimport {\n  Divider,\n  ListItemIcon,\n  Menu,\n  MenuItem,\n  MenuProps,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\n\nimport { HorizontalSpace } from \"../../../core/Spacing\";\nimport { Icon } from \"@iconify/react\";\nimport React from \"react\";\nimport { css } from \"@emotion/css\";\nimport { denormalizeRoot } from \"../../../../utils/normalization\";\nimport { encryptData } from \"../../../../utils/encryption\";\nimport googleDrive from \"@iconify-icons/mdi/google-drive\";\nimport updateFileContent from \"../../../../google-integration/updateFileContent\";\nimport uploadFile from \"../../../../google-integration/uploadFile\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\nimport { useGoogleAuthContext } from \"../../../../google-integration/useGoogleAuthProvider\";\nimport useGoogleCardContext from \"../../google-vault/useGoogleCardContext\";\n\nconst listItemIconStyle = css({ minWidth: 36 });\n\ntype Props = {\n  onClose: () => void;\n  menuProps: MenuProps;\n};\nexport default function MemoryVaultSaveDataMenu({ onClose, menuProps }: Props) {\n  const auth = useGoogleAuthContext();\n  return (\n    <Menu {...menuProps}>\n      <LoggedOutActions onItemPress={onClose} />\n      {auth?.currentUser.get()?.isSignedIn() === true && (\n        <LoggedInActions onItemPress={onClose} />\n      )}\n    </Menu>\n  );\n}\n\nfunction LoggedOutActions({ onItemPress }: { onItemPress: () => void }) {\n  const { store, encryptionKey } = useDecodedDataContext();\n  return (\n    <>\n      {encryptionKey && (\n        <MenuItem\n          onClick={(e) => {\n            onItemPress();\n            encryptData(store, encryptionKey, (data) => {\n              const element = document.createElement(\"a\");\n              element.setAttribute(\n                \"href\",\n                \"data:text/plain;charset=base64,\" + encodeURIComponent(data),\n              );\n              element.setAttribute(\"download\", \"data.ish\");\n              element.style.display = \"none\";\n              document.body.appendChild(element);\n              element.click();\n              document.body.removeChild(element);\n            });\n          }}\n        >\n          <ListItemIcon className={listItemIconStyle}>\n            <CloudDownload fontSize=\"small\" color=\"action\" />\n          </ListItemIcon>\n          <Typography>Download</Typography>\n        </MenuItem>\n      )}\n      <Divider />\n      {encryptionKey && (\n        <MenuItem\n          onClick={(e) => {\n            encryptData(store, encryptionKey, (data) => {\n              navigator.clipboard.writeText(data).then(() => {\n                onItemPress();\n              });\n            });\n          }}\n        >\n          <ListItemIcon className={listItemIconStyle}>\n            <FileCopy fontSize=\"small\" color=\"action\" />\n          </ListItemIcon>\n          <Typography>Copy</Typography>\n        </MenuItem>\n      )}\n      <MenuItem\n        onClick={(e) => {\n          navigator.clipboard.writeText(denormalizeRoot(store)).then(() => {\n            onItemPress();\n          });\n        }}\n      >\n        <ListItemIcon className={listItemIconStyle}>\n          <FileCopy fontSize=\"small\" color=\"action\" />\n        </ListItemIcon>\n        <Typography>Copy as JSON</Typography>\n      </MenuItem>\n    </>\n  );\n}\n\nfunction LoggedInActions({ onItemPress }: { onItemPress: () => void }) {\n  const googleResourceId = useGoogleCardContext();\n  const { store, encryptionKey } = useDecodedDataContext();\n  return (\n    <>\n      <Divider />\n      {encryptionKey && (\n        <MenuItem\n          onClick={(e) => {\n            onItemPress();\n            uploadFile(store, encryptionKey, { withKey: false });\n          }}\n        >\n          <ListItemIcon className={listItemIconStyle}>\n            <Icon icon={googleDrive} width={20} height={20} />\n          </ListItemIcon>\n          <Typography>{googleResourceId ? \"Save as copy\" : \"Save\"}</Typography>\n        </MenuItem>\n      )}\n      {encryptionKey && (\n        <MenuItem\n          onClick={(e) => {\n            onItemPress();\n            uploadFile(store, encryptionKey, { withKey: true });\n          }}\n        >\n          <ListItemIcon className={listItemIconStyle}>\n            <Icon icon={googleDrive} width={20} height={20} />\n          </ListItemIcon>\n          <Typography>\n            {googleResourceId ? \"Save with key as copy\" : \"Save with key\"}\n          </Typography>\n          <HorizontalSpace s1 />\n          <Tooltip\n            title=\"This option is not recommended as it relies on your Google account not being compromised, prefer saving your key offline for extra safety\"\n            placement=\"bottom\"\n          >\n            <HelpOutline fontSize=\"inherit\" />\n          </Tooltip>\n        </MenuItem>\n      )}\n      {googleResourceId && encryptionKey && (\n        <MenuItem\n          onClick={(e) => {\n            onItemPress();\n            updateFileContent(store, encryptionKey, googleResourceId);\n          }}\n        >\n          <ListItemIcon className={listItemIconStyle}>\n            <Icon icon={googleDrive} width={20} height={20} />\n          </ListItemIcon>\n          <Typography>Update</Typography>\n          <HorizontalSpace s1 />\n        </MenuItem>\n      )}\n    </>\n  );\n}\n","import { Store } from \"../utils/normalization\";\nimport { encryptData } from \"../utils/encryption\";\n\nexport default function updateFileContent(\n  store: Store,\n  encryptionKey: string,\n  fileId: string,\n  onComplete?: () => void,\n) {\n  encryptData(store, encryptionKey, (encryptedData) => {\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = \"json\";\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState !== XMLHttpRequest.DONE) {\n        return;\n      }\n      onComplete && onComplete();\n    };\n\n    xhr.open(\n      \"PATCH\",\n      `https://www.googleapis.com/upload/drive/v3/files/${fileId}?uploadType=media`,\n    );\n    xhr.setRequestHeader(\n      \"Authorization\",\n      \"Bearer \" + gapi.auth.getToken().access_token,\n    );\n    xhr.send(encryptedData);\n  });\n}\n","import React, { useRef, useState } from \"react\";\n\nimport { Button } from \"@material-ui/core\";\nimport MemoryVaultSaveDataMenu from \"./MemoryVaultSaveDataMenu\";\n\nexport default function MemoryVaultSaveDataButton() {\n  const anchorRef = useRef(null);\n  const [isShowingPopover, setIsShowingPopover] = useState(false);\n  return (\n    <>\n      <Button\n        variant=\"outlined\"\n        fullWidth\n        size=\"small\"\n        color=\"primary\"\n        onClick={() => setIsShowingPopover(true)}\n        ref={anchorRef}\n      >\n        Save Data\n      </Button>\n      <MemoryVaultSaveDataMenu\n        onClose={() => setIsShowingPopover(false)}\n        menuProps={{\n          onClose: () => setIsShowingPopover(false),\n          open: isShowingPopover,\n          anchorEl: anchorRef.current,\n        }}\n      />\n    </>\n  );\n}\n","import { CloudDownload, MeetingRoom } from \"@material-ui/icons\";\nimport {\n  ListItemIcon,\n  Menu,\n  MenuItem,\n  MenuProps,\n  Typography,\n} from \"@material-ui/core\";\n\nimport React from \"react\";\nimport { css } from \"@emotion/css\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\n\nconst listItemIconStyle = css({ minWidth: 36 });\n\ntype Props = {\n  onClose: () => void;\n  menuProps: MenuProps;\n};\nexport default function MemoryVaultSaveKeyMenu({ onClose, menuProps }: Props) {\n  const { encryptionKey } = useDecodedDataContext();\n  if (!encryptionKey) {\n    return null;\n  }\n  return (\n    <Menu {...menuProps}>\n      <MenuItem\n        onClick={() => {\n          onClose();\n          const element = document.createElement(\"a\");\n          element.setAttribute(\n            \"href\",\n            `data:text/plain;charset=base64,${encryptionKey}`,\n          );\n          element.setAttribute(\"download\", \"key.ish\");\n          element.style.display = \"none\";\n          document.body.appendChild(element);\n          element.click();\n          document.body.removeChild(element);\n        }}\n      >\n        <ListItemIcon className={listItemIconStyle}>\n          <CloudDownload fontSize=\"small\" color=\"action\" />\n        </ListItemIcon>\n        <Typography>Download</Typography>\n      </MenuItem>\n      <MenuItem\n        onClick={() => {\n          navigator.clipboard.writeText(encryptionKey).then(() => {\n            onClose();\n          });\n        }}\n      >\n        <ListItemIcon className={listItemIconStyle}>\n          <MeetingRoom fontSize=\"small\" color=\"action\" />\n        </ListItemIcon>\n        <Typography>Copy</Typography>\n      </MenuItem>\n    </Menu>\n  );\n}\n","import React, { useRef, useState } from \"react\";\n\nimport { Button } from \"@material-ui/core\";\nimport MemoryVaultSaveKeyMenu from \"./MemoryVaultSaveKeyMenu\";\nimport useDecodedDataContext from \"../../useDecodedDataContext\";\n\nexport default function MemoryVaultSaveKeyButton() {\n  const { encryptionKey } = useDecodedDataContext();\n  const anchorRef = useRef(null);\n  const [isShowingPopover, setIsShowingPopover] = useState(false);\n  if (!encryptionKey) {\n    return null;\n  }\n  return (\n    <>\n      <Button\n        variant=\"outlined\"\n        size=\"small\"\n        fullWidth\n        color=\"primary\"\n        onClick={() => setIsShowingPopover(true)}\n        ref={anchorRef}\n      >\n        Save Key\n      </Button>\n      <MemoryVaultSaveKeyMenu\n        onClose={() => setIsShowingPopover(false)}\n        menuProps={{\n          onClose: () => setIsShowingPopover(false),\n          open: isShowingPopover,\n          anchorEl: anchorRef.current,\n        }}\n      />\n    </>\n  );\n}\n","import MemoryVault, { VaultData } from \"../vault/MemoryVault\";\n\nimport { GoogleCardContext } from \"./useGoogleCardContext\";\nimport React from \"react\";\n\nexport default function GoogleMemoryVault({\n  vaultData,\n  resourceId,\n  onDelete,\n}: {\n  vaultData: VaultData;\n  resourceId: string;\n  onDelete: () => void;\n}) {\n  return (\n    <GoogleCardContext.Provider value={{ googleResourceId: resourceId }}>\n      <MemoryVault vaultData={vaultData} onDelete={onDelete} />\n    </GoogleCardContext.Provider>\n  );\n}\n","import { ReactNode } from \"react\";\n\ntype Props = {\n  children: ReactNode;\n  onDrop(file: File | null | undefined): void;\n};\nexport default function DragAndDrop({ children, onDrop }: Props) {\n  return (\n    <div\n      onDrop={(event) => {\n        event.preventDefault();\n        onDrop(event.dataTransfer.files[0]);\n      }}\n      onDragOver={(event) => {\n        event.preventDefault();\n      }}\n      onDragEnter={(event) => {\n        event.preventDefault();\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n","export default function readFile(\n  file: File | null | undefined,\n  onDone: (reuslt: string) => void,\n) {\n  if (!file) return;\n  const reader = new FileReader();\n  reader.onloadend = () => {\n    if (typeof reader.result === \"string\") {\n      onDone(reader.result);\n    }\n  };\n  reader.readAsText(file);\n}\n","import { IconButton, InputAdornment, TextField, Tooltip } from \"@material-ui/core\";\nimport { createKey, isKeyValid } from \"../../../../../utils/encryption\";\n\nimport { Cached } from \"@material-ui/icons\";\nimport DragAndDrop from \"../DragAndDrop\";\nimport React from \"react\";\nimport readFile from \"./readFile\";\n\ntype Props = {\n  encryptionKey: string;\n  setEncryptionKey: (encryptionKey: string) => void;\n};\nexport default function MemoryVaultKeyInput({\n  encryptionKey,\n  setEncryptionKey,\n}: Props) {\n  return (\n    <DragAndDrop onDrop={(file) => readFile(file, setEncryptionKey)}>\n      <TextField\n        variant=\"outlined\"\n        margin=\"dense\"\n        error={encryptionKey.length > 0 && !isKeyValid(encryptionKey)}\n        required\n        fullWidth\n        label=\"Encryption Key\"\n        type=\"password\"\n        autoComplete=\"current-encryption-key\"\n        value={encryptionKey}\n        onChange={(e) => setEncryptionKey(e.target.value)}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Tooltip title=\"Generate key\" arrow>\n                <IconButton\n                  aria-label=\"generate encryption Key\"\n                  onClick={() => createKey().then(setEncryptionKey)}\n                >\n                  <Cached fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </InputAdornment>\n          ),\n        }}\n      />\n    </DragAndDrop>\n  );\n}\n","import React from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\ntype Props = {\n  title: string;\n  setTitle: (title: string) => void;\n};\nexport default function MemoryVaultTitleInput({ title, setTitle }: Props) {\n  return (\n    <TextField\n      variant=\"outlined\"\n      margin=\"dense\"\n      fullWidth\n      label=\"Title\"\n      autoComplete=\"title\"\n      value={title}\n      onChange={(e) => setTitle(e.target.value)}\n      autoFocus={title.length === 0}\n    />\n  );\n}\n","import { Add, Delete } from \"@material-ui/icons\";\nimport { Button, IconButton, Typography, useTheme } from \"@material-ui/core\";\n\nimport MemoryVaultKeyInput from \"../vault/create/inputs/MemoryVaultKeyInput\";\nimport MemoryVaultTitleInput from \"../vault/create/inputs/MemoryVaultTitleInput\";\nimport React from \"react\";\nimport { VaultData } from \"../vault/MemoryVault\";\nimport { VerticalSpace } from \"../../core/Spacing\";\nimport { css } from \"@emotion/css\";\nimport { useDataDecryption } from \"../../../utils/encryption\";\n\ntype Props = {\n  vaultData: VaultData;\n  onChange: (vaultData: VaultData) => void;\n  onDelete: () => void;\n};\nexport default function GooglemMemoryVaultCreateForm({\n  vaultData,\n  onChange,\n  onDelete,\n}: Props) {\n  const theme = useTheme();\n  const { title, encryptionKey, initialData } = vaultData;\n  const { hasFailed } = useDataDecryption(initialData, encryptionKey);\n  return (\n    <>\n      <IconButton\n        onClick={onDelete}\n        classes={{\n          root: css({\n            position: \"absolute\",\n            right: theme.spacing(1),\n            top: theme.spacing(1),\n          }),\n        }}\n      >\n        <Delete />\n      </IconButton>\n      <Typography variant=\"h5\" color=\"textPrimary\" gutterBottom align=\"center\">\n        Open\n      </Typography>\n      <VerticalSpace s2 />\n      <MemoryVaultTitleInput\n        title={title}\n        setTitle={(title: string) => onChange({ ...vaultData, title })}\n      />\n      <MemoryVaultKeyInput\n        encryptionKey={encryptionKey}\n        setEncryptionKey={(encryptionKey) =>\n          onChange({ ...vaultData, encryptionKey })\n        }\n      />\n      <VerticalSpace s2 grow />\n      {encryptionKey !== \"\" && hasFailed && (\n        <Typography variant=\"body2\" color=\"error\" align=\"center\">\n          Key and data don't match\n        </Typography>\n      )}\n      <Button\n        fullWidth\n        variant=\"contained\"\n        disabled={hasFailed || encryptionKey.length === 0}\n        color=\"primary\"\n        size=\"medium\"\n        startIcon={<Add />}\n        type=\"submit\"\n      >\n        Open\n      </Button>\n    </>\n  );\n}\n","import { Grid, Paper, useTheme } from \"@material-ui/core\";\nimport React, { ReactNode } from \"react\";\n\nimport { css } from \"@emotion/css\";\n\ntype Props = {\n  preview: ReactNode;\n  form: ReactNode;\n  onSubmit: () => void;\n};\nexport default function MemoryVaultCreatingStateLayout({\n  preview,\n  form,\n  onSubmit,\n}: Props) {\n  const theme = useTheme();\n  return (\n    <Grid container spacing={2}>\n      <Grid\n        item\n        xs={12}\n        md={4}\n        xl={3}\n        className={css({ display: \"flex\", minHeight: 500 })}\n      >\n        <Paper\n          className={css({\n            padding: theme.spacing(2),\n            display: \"flex\",\n            flexDirection: \"column\",\n            flexGrow: 1,\n            position: \"relative\",\n          })}\n          component=\"form\"\n          onSubmit={() => {\n            onSubmit();\n            setTimeout(function () {\n              const request = new XMLHttpRequest();\n              request.open(\"POST\", \"/index.html\", true);\n              request.setRequestHeader(\n                \"Content-Type\",\n                \"application/x-www-form-urlencoded; charset=UTF-8\",\n              );\n              request.send();\n            }, 1);\n          }}\n        >\n          {form}\n        </Paper>\n      </Grid>\n      <Grid item xs={12} md={8} xl={9} className={css({ display: \"flex\" })}>\n        {preview}\n      </Grid>\n    </Grid>\n  );\n}\n","import { Typography, useTheme } from \"@material-ui/core\";\nimport { useDataAsStore, useDataDecryption } from \"../../../../utils/encryption\";\n\nimport BreadcrumbPaths from \"../BreadcrumbPaths\";\nimport BreadcrumbsProvider from \"../BreadcrumbsProvider\";\nimport CardView from \"../cards/CardView\";\nimport { DecodedDataContext } from \"../../useDecodedDataContext\";\nimport MemoryVaultInfo from \"../info/MemoryVaultInfo\";\nimport MemoryVaultLayout from \"../MemoryVaultLayout\";\nimport MemoryVaultLockEditModeButton from \"../MemoryVaultLockEditModeButton\";\nimport MemoryVaultSaveDataButton from \"../info/MemoryVaultSaveDataButton\";\nimport MemoryVaultSaveKeyButton from \"../info/MemoryVaultSaveKeyButton\";\nimport MemoryVaultSettingsMenu from \"../MemoryVaultSettingsMenu\";\nimport React from \"react\";\nimport { css } from \"@emotion/css\";\n\ntype CreatingPreviewVaultData = {\n  title: string;\n  encryptionKey: string;\n  initialData: string;\n};\n\nexport default function MemoryVaultPreview({\n  title,\n  encryptionKey,\n  initialData,\n}: CreatingPreviewVaultData) {\n  const theme = useTheme();\n  const { decryptedData, hasFailed } = useDataDecryption(initialData, encryptionKey);\n  const titleWithFallback = title === \"\" ? \"Title\" : title;\n  const data = useDataAsStore(decryptedData, {\n    title: titleWithFallback,\n  });\n  if (!data) {\n    return null;\n  }\n  const { store } = data;\n  return (\n    <BreadcrumbsProvider>\n      <DecodedDataContext.Provider\n        value={{ store, updateNodes: null, encryptionKey }}\n      >\n        <div\n          className={css({\n            display: \"flex\",\n            flex: 1,\n            position: \"relative\",\n          })}\n        >\n          <div\n            className={css({\n              backgroundColor: theme.palette.background.default,\n              opacity: 0.8,\n              position: \"absolute\",\n              top: 0,\n              left: 0,\n              right: 0,\n              bottom: 0,\n              zIndex: 1,\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            })}\n          >\n            <Typography variant=\"h3\">Preview</Typography>\n          </div>\n          <MemoryVaultLayout\n            header={<BreadcrumbPaths />}\n            body={\n              !hasFailed ? (\n                <CardView nodeKey={store.rootNode.value} />\n              ) : (\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                  Data mismatch\n                </Typography>\n              )\n            }\n            bodyButton={<MemoryVaultLockEditModeButton />}\n            info={<MemoryVaultInfo />}\n            menuButton={<MemoryVaultSettingsMenu onDelete={() => {}} />}\n            cardButtons={[\n              <MemoryVaultSaveKeyButton />,\n              <MemoryVaultSaveDataButton />,\n            ]}\n          />\n        </div>\n      </DecodedDataContext.Provider>\n    </BreadcrumbsProvider>\n  );\n}\n","import GooglemMemoryVaultCreateForm from \"./GoogleMemoryVaultCreateForm\";\nimport MemoryVaultCreatingStateLayout from \"../vault/create/MemoryVaultCreatingStateLayout\";\nimport MemoryVaultPreview from \"../vault/create/MemoryVaultPreview\";\nimport React from \"react\";\nimport { VaultData } from \"../vault/MemoryVault\";\n\ntype Props = {\n  vaultData: VaultData;\n  onDelete: () => void;\n  onChange: (vaultData: VaultData) => void;\n  onSubmit: () => void;\n};\nexport default function GoogleMemoryVaultCreatingState({\n  vaultData,\n  onDelete,\n  onChange,\n  onSubmit,\n}: Props) {\n  return (\n    <MemoryVaultCreatingStateLayout\n      form={\n        <GooglemMemoryVaultCreateForm\n          vaultData={vaultData}\n          onChange={onChange}\n          onDelete={onDelete}\n        />\n      }\n      preview={<MemoryVaultPreview {...vaultData} />}\n      onSubmit={onSubmit}\n    />\n  );\n}\n","import { Button, Grid, Paper, Typography, useTheme } from \"@material-ui/core\";\n\nimport { Add } from \"@material-ui/icons\";\nimport MemoryVaultSettingsMenu from \"../vault/MemoryVaultSettingsMenu\";\nimport React from \"react\";\nimport { VerticalSpace } from \"../../core/Spacing\";\nimport { css } from \"@emotion/css\";\n\ntype Props = {\n  onDelete: () => void;\n};\nexport default function GoogleMemoryVaultLoadingState({ onDelete }: Props) {\n  const theme = useTheme();\n  return (\n    <Grid container spacing={2}>\n      <Grid\n        item\n        xs={12}\n        md={4}\n        xl={3}\n        className={css({ display: \"flex\", minHeight: 500 })}\n      >\n        <Paper\n          className={css({\n            padding: theme.spacing(2),\n            display: \"flex\",\n            flexDirection: \"column\",\n            flexGrow: 1,\n          })}\n        >\n          <Typography variant=\"h4\" color=\"textPrimary\" gutterBottom align=\"center\">\n            Open\n          </Typography>\n          <VerticalSpace s2 grow />\n          <Button\n            fullWidth\n            variant=\"contained\"\n            disabled={true}\n            color=\"primary\"\n            size=\"medium\"\n            startIcon={<Add />}\n          >\n            Open\n          </Button>\n        </Paper>\n      </Grid>\n      <Grid item xs={12} md={8} xl={9} className={css({ display: \"flex\" })}>\n        <Paper\n          className={css({\n            flex: 1,\n            position: \"relative\",\n            overflow: \"hidden\",\n            padding: theme.spacing(3),\n          })}\n        >\n          <MemoryVaultSettingsMenu onDelete={onDelete} />\n          <div\n            className={css({\n              backgroundColor: theme.palette.background.default,\n              opacity: 0.8,\n              position: \"absolute\",\n              top: 0,\n              left: 0,\n              right: 0,\n              bottom: 0,\n              zIndex: 1,\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            })}\n          />\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}\n","import React, { Dispatch, SetStateAction, useCallback } from \"react\";\n\nimport { Collapse } from \"@material-ui/core\";\nimport { GoogleCardListItem } from \"../MemoryPage\";\nimport GoogleMemoryVault from \"./GoogleMemoryVault\";\nimport GoogleMemoryVaultCreatingState from \"./GoogleMemoryVaultCreatingState\";\nimport GoogleMemoryVaultLoadingState from \"./GoogleMemoryVaultLoadingState\";\nimport { VaultData } from \"../vault/MemoryVault\";\nimport { VerticalSpace } from \"../../core/Spacing\";\nimport deleteFile from \"../../../google-integration/deleteFile\";\n\ntype GoogleMemoryCardProps = {\n  card: GoogleCardListItem;\n  setGoogleCards: Dispatch<SetStateAction<GoogleCardListItem[]>>;\n};\nexport default function GoogleMemoryCard({\n  card,\n  setGoogleCards,\n}: GoogleMemoryCardProps) {\n  const deleteCard = () => {\n    deleteFile(card.resourceId).then(() => {\n      setGoogleCards((old) => old.filter((c) => card.resourceId !== c.resourceId));\n    });\n  };\n  const createCard = () => {\n    const newCard = { ...card, isCreating: false, isReadOnly: false };\n    setGoogleCards((old) =>\n      old.map((c) => (card.resourceId === c.resourceId ? newCard : c)),\n    );\n  };\n  const changeCardVaultData = useCallback(\n    (newVaultData: VaultData) => {\n      setGoogleCards((old) =>\n        old.map((oldCard) =>\n          oldCard.resourceId === card.resourceId\n            ? { ...oldCard, vaultData: newVaultData }\n            : oldCard,\n        ),\n      );\n    },\n    [card.resourceId, setGoogleCards],\n  );\n  if (card.isLoading) {\n    return (\n      <Collapse in={card.isOpen}>\n        <GoogleMemoryVaultLoadingState onDelete={deleteCard} />\n        <VerticalSpace s2 />\n      </Collapse>\n    );\n  } else if (card.isCreating) {\n    return (\n      <Collapse in={card.isOpen}>\n        <GoogleMemoryVaultCreatingState\n          vaultData={card.vaultData}\n          onChange={changeCardVaultData}\n          onDelete={deleteCard}\n          onSubmit={createCard}\n        />\n        <VerticalSpace s2 />\n      </Collapse>\n    );\n  } else {\n    return (\n      <Collapse in={card.isOpen}>\n        <GoogleMemoryVault\n          vaultData={card.vaultData}\n          onDelete={deleteCard}\n          resourceId={card.resourceId}\n        />\n        <VerticalSpace s2 />\n      </Collapse>\n    );\n  }\n}\n","export default function deleteFile(fileId: string) {\n  return gapi.client.drive.files.delete({ fileId });\n}\n","import { gql, useQuery } from \"@apollo/client\";\n\ntype MemoryPageResponse = {\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n};\n\nconst QUERY = gql`\n  query MemoryPage {\n    standardProposal {\n      version\n      data\n    }\n  }\n`;\nexport default function useStandardProposal(\n  onCompleted?: (data: MemoryPageResponse) => void,\n) {\n  const { data } = useQuery<MemoryPageResponse>(QUERY, { onCompleted });\n  return data?.standardProposal;\n}\n","import { List, ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\n\nimport { Add } from \"@material-ui/icons\";\nimport { CardListItem } from \"../MemoryPage\";\nimport React from \"react\";\nimport useStandardProposal from \"../useStandardProposal\";\nimport { v4 as uuid } from \"uuid\";\n\ntype Props = {\n  addCard: (card: CardListItem) => void;\n};\n\nexport default function LeftNavAddCardItem({ addCard }: Props) {\n  const standardProposal = useStandardProposal();\n  const card = {\n    vaultData: {\n      title: \"\",\n      encryptionKey: \"\",\n      initialData: standardProposal?.data ?? \"\",\n    },\n    id: uuid(),\n    isOpen: true,\n    isLoading: standardProposal?.data == null,\n    isCreating: true,\n    isReadOnly: true,\n  };\n\n  return (\n    <List component=\"nav\">\n      <ListItem button onClick={() => addCard(card)}>\n        <ListItemIcon>\n          <Add />\n        </ListItemIcon>\n        <ListItemText primary=\"Open\" />\n      </ListItem>\n    </List>\n  );\n}\n","import { Drafts, Mail } from \"@material-ui/icons\";\nimport { ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\nimport React, { CSSProperties } from \"react\";\n\nimport { CardListItem } from \"../MemoryPage\";\n\nconst oneLineStyle: CSSProperties = {\n  whiteSpace: \"nowrap\",\n  overflow: \"hidden\",\n  textOverflow: \"ellipsis\",\n};\n\ntype Props = {\n  card: CardListItem;\n  toogleCardVisibility: (card: CardListItem) => void;\n};\n\nexport default function CardNavBarItem({ card, toogleCardVisibility }: Props) {\n  return (\n    <ListItem button key={card.id} onClick={() => toogleCardVisibility(card)}>\n      <ListItemIcon>{card.isOpen ? <Drafts /> : <Mail />}</ListItemIcon>\n      <ListItemText\n        primary={card.vaultData.title}\n        primaryTypographyProps={{ style: oneLineStyle }}\n      />\n    </ListItem>\n  );\n}\n","import React, { Dispatch, SetStateAction } from \"react\";\n\nimport { CardListItem } from \"../MemoryPage\";\nimport CardNavBarItem from \"../vault/CardNavBarItem\";\n\ntype LeftNavCardItemProps = {\n  card: CardListItem;\n  setCards: Dispatch<SetStateAction<CardListItem[]>>;\n};\nexport default function LeftNavCardItem({ card, setCards }: LeftNavCardItemProps) {\n  const toogleCardVisibility = (selectedCard: CardListItem) =>\n    setCards((oldCards) =>\n      oldCards.map((oldCard) =>\n        selectedCard.id === oldCard.id\n          ? { ...oldCard, isOpen: !oldCard.isOpen }\n          : oldCard,\n      ),\n    );\n  return <CardNavBarItem card={card} toogleCardVisibility={toogleCardVisibility} />;\n}\n","import { Drafts, Mail } from \"@material-ui/icons\";\nimport { ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\n\nimport { GoogleCardListItem } from \"../MemoryPage\";\nimport { Icon } from \"@iconify/react\";\nimport React from \"react\";\nimport { css } from \"@emotion/css\";\nimport googleDrive from \"@iconify-icons/mdi/google-drive\";\n\ntype Props = {\n  card: GoogleCardListItem;\n  onClick: () => void;\n};\n\nexport default function GoogleCardNavBarItem({ card, onClick }: Props) {\n  return (\n    <ListItem button key={card.resourceId} onClick={onClick}>\n      <ListItemIcon>\n        {card.isOpen ? <Drafts /> : <Mail />}\n        <Icon icon={googleDrive} width={12} height={12} />\n      </ListItemIcon>\n      <ListItemText\n        primary={card.vaultData.title}\n        primaryTypographyProps={{\n          className: css({\n            whiteSpace: \"nowrap\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n          }),\n        }}\n      />\n    </ListItem>\n  );\n}\n","import React, { Dispatch, SetStateAction } from \"react\";\n\nimport { GoogleCardListItem } from \"../MemoryPage\";\nimport GoogleCardNavBarItem from \"../google-vault/GoogleCardNavBarItem\";\n\ntype LeftNavGoogleItemProps = {\n  card: GoogleCardListItem;\n  setGoogleCards: Dispatch<SetStateAction<GoogleCardListItem[]>>;\n};\nexport default function LeftNavGoogleItem({\n  card,\n  setGoogleCards,\n}: LeftNavGoogleItemProps) {\n  const onClick = () => {\n    if (card.vaultData.initialData === \"\" && !card.isLoading) {\n      setGoogleCards((oldCards) =>\n        oldCards.map((oldCard) =>\n          card.resourceId === oldCard.resourceId\n            ? { ...oldCard, isLoading: true, isOpen: true }\n            : oldCard,\n        ),\n      );\n      gapi.client.drive.files\n        .get({ fileId: card.resourceId, alt: \"media\" })\n        .then(({ body }: { body: string }) => {\n          setGoogleCards((oldCards) =>\n            oldCards.map((oldCard) =>\n              card.resourceId === oldCard.resourceId\n                ? {\n                    ...oldCard,\n                    isLoading: false,\n                    isCreating: true,\n                    vaultData: { ...oldCard.vaultData, initialData: body },\n                  }\n                : oldCard,\n            ),\n          );\n        });\n    } else {\n      setGoogleCards((oldCards) =>\n        oldCards.map((oldCard) =>\n          card.resourceId === oldCard.resourceId\n            ? { ...oldCard, isOpen: !oldCard.isOpen }\n            : oldCard,\n        ),\n      );\n    }\n  };\n  return <GoogleCardNavBarItem card={card} onClick={onClick} />;\n}\n","import {\n  Button,\n  Collapse,\n  FormControlLabel,\n  FormLabel,\n  IconButton,\n  Radio,\n  RadioGroup,\n  Tooltip,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport {\n  Done,\n  ExpandLess,\n  ExpandMore,\n  GetApp,\n  HelpOutline,\n} from \"@material-ui/icons\";\nimport React, { useState } from \"react\";\n\nimport DragAndDrop from \"../DragAndDrop\";\nimport { HorizontalSpace } from \"../../../../core/Spacing\";\nimport { css } from \"@emotion/css\";\nimport readFile from \"./readFile\";\nimport useStandardProposal from \"../../../useStandardProposal\";\n\nenum DataOptions {\n  STANDARD = \"STANDARD\",\n  EMPTY = \"EMPTY\",\n  CUSTOM = \"CUSTOM\",\n}\n\ntype Props = {\n  setInitialData: (initialData: string) => void;\n};\nexport default function MemoryVaultDataInput({ setInitialData }: Props) {\n  const theme = useTheme();\n  const [expanded, setExpanded] = useState(false);\n  const [dataOption, selectDataOption] = useState<DataOptions>(DataOptions.STANDARD);\n  const [encryptedData, setEncryptedData] = useState<string | null>(null);\n\n  const standardProposal = useStandardProposal(({ standardProposal }) => {\n    if (dataOption === DataOptions.STANDARD) {\n      setInitialData(standardProposal.data);\n    }\n  });\n  return (\n    <>\n      <div\n        className={css({\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        })}\n      >\n        <Typography variant=\"body1\">Data Options</Typography>\n        <IconButton\n          onClick={() => setExpanded((e) => !e)}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          {expanded ? <ExpandLess /> : <ExpandMore />}\n        </IconButton>\n      </div>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <FormLabel component=\"legend\">Initial Data</FormLabel>\n        <RadioGroup\n          aria-label=\"Initial data\"\n          value={dataOption}\n          onChange={(event) => {\n            const dataOption: DataOptions = (event.target as HTMLInputElement)\n              .value as DataOptions;\n            selectDataOption(dataOption);\n            switch (dataOption) {\n              case DataOptions.CUSTOM:\n                return setInitialData(encryptedData ?? \"\");\n              case DataOptions.EMPTY:\n                return setInitialData(\"{}\");\n              case DataOptions.STANDARD:\n                return setInitialData(standardProposal?.data ?? \"\");\n            }\n          }}\n        >\n          <FormControlLabel\n            value={DataOptions.STANDARD}\n            control={<Radio size=\"small\" />}\n            label={`Standard v${standardProposal?.version ?? \"*\"}`}\n          />\n          <FormControlLabel\n            value={DataOptions.EMPTY}\n            control={<Radio size=\"small\" />}\n            label=\"Empty\"\n          />\n          <FormControlLabel\n            value={DataOptions.CUSTOM}\n            control={<Radio size=\"small\" />}\n            label={\n              <span\n                className={css({\n                  display: \"flex\",\n                  alignItems: \"center\",\n                })}\n              >\n                My own <HorizontalSpace s1 />\n                <Tooltip\n                  title=\"Your encrypted data or a strigfied json\"\n                  placement=\"top\"\n                >\n                  <HelpOutline fontSize=\"inherit\" />\n                </Tooltip>\n              </span>\n            }\n          />\n        </RadioGroup>\n        {DataOptions.CUSTOM === dataOption && (\n          <DragAndDrop\n            onDrop={(file) =>\n              readFile(file, (data) => {\n                setEncryptedData(data);\n                if (dataOption === DataOptions.CUSTOM) {\n                  setInitialData(data);\n                }\n              })\n            }\n          >\n            <Button\n              component=\"label\"\n              fullWidth\n              className={css({\n                textTransform: \"none\",\n                outlineWidth: 2,\n                outlineStyle: \"dashed\",\n                outlineColor: theme.palette.secondary.main,\n              })}\n              startIcon={encryptedData === null ? <GetApp /> : <Done />}\n            >\n              <input\n                hidden\n                type=\"file\"\n                onChange={(e) =>\n                  readFile(e.target.files?.[0], (data) => {\n                    setEncryptedData(data);\n                    if (dataOption === DataOptions.CUSTOM) {\n                      setInitialData(data);\n                    }\n                  })\n                }\n              />\n              {encryptedData === null ? (\n                <Typography variant=\"body1\">Drag or upload your data</Typography>\n              ) : (\n                <Typography variant=\"body1\">Done</Typography>\n              )}\n            </Button>\n          </DragAndDrop>\n        )}\n      </Collapse>\n    </>\n  );\n}\n","import { Add, Close } from \"@material-ui/icons\";\nimport { Button, IconButton, Typography, useTheme } from \"@material-ui/core\";\n\nimport MemoryVaultDataInput from \"./inputs/MemoryVaultDataInput\";\nimport MemoryVaultKeyInput from \"./inputs/MemoryVaultKeyInput\";\nimport MemoryVaultTitleInput from \"./inputs/MemoryVaultTitleInput\";\nimport React from \"react\";\nimport { VaultData } from \"../MemoryVault\";\nimport { VerticalSpace } from \"../../../core/Spacing\";\nimport { css } from \"@emotion/css\";\nimport { useDataDecryption } from \"../../../../utils/encryption\";\n\ntype Props = {\n  vaultData: VaultData;\n  onChange: (vaultData: VaultData) => void;\n  onDelete: () => void;\n};\nexport default function MemoryVaultCreateForm({\n  vaultData,\n  onChange,\n  onDelete,\n}: Props) {\n  const theme = useTheme();\n  const { hasFailed } = useDataDecryption(\n    vaultData.initialData,\n    vaultData.encryptionKey,\n  );\n  return (\n    <>\n      <IconButton\n        onClick={onDelete}\n        classes={{\n          root: css({\n            position: \"absolute\",\n            right: theme.spacing(1),\n            top: theme.spacing(1),\n          }),\n        }}\n      >\n        <Close />\n      </IconButton>\n      <Typography variant=\"h5\" color=\"textPrimary\" gutterBottom align=\"center\">\n        Open\n      </Typography>\n      <VerticalSpace s2 />\n      <MemoryVaultTitleInput\n        title={vaultData.title}\n        setTitle={(title) => onChange({ ...vaultData, title })}\n      />\n      <MemoryVaultKeyInput\n        encryptionKey={vaultData.encryptionKey}\n        setEncryptionKey={(encryptionKey) =>\n          onChange({ ...vaultData, encryptionKey })\n        }\n      />\n      <MemoryVaultDataInput\n        setInitialData={(initialData) => onChange({ ...vaultData, initialData })}\n      />\n      <VerticalSpace s2 grow />\n      {vaultData.initialData !== \"\" && vaultData.encryptionKey !== \"\" && hasFailed && (\n        <Typography variant=\"body2\" color=\"error\" align=\"center\">\n          Key and data don't match\n        </Typography>\n      )}\n      <Button\n        fullWidth\n        variant=\"contained\"\n        disabled={hasFailed || vaultData.encryptionKey.length === 0}\n        color=\"primary\"\n        size=\"medium\"\n        startIcon={<Add />}\n        type=\"submit\"\n      >\n        Open\n      </Button>\n    </>\n  );\n}\n","import MemoryVaultCreateForm from \"./MemoryVaultCreateForm\";\nimport MemoryVaultCreatingStateLayout from \"./MemoryVaultCreatingStateLayout\";\nimport MemoryVaultPreview from \"./MemoryVaultPreview\";\nimport React from \"react\";\nimport { VaultData } from \"../MemoryVault\";\n\ntype Props = {\n  vaultData: VaultData;\n  onDelete: () => void;\n  onSubmit: () => void;\n  onChange: (vaultData: VaultData) => void;\n};\n\nexport default function MemoryVaultCreatingState({\n  vaultData,\n  onDelete,\n  onSubmit,\n  onChange,\n}: Props) {\n  return (\n    <MemoryVaultCreatingStateLayout\n      form={\n        <MemoryVaultCreateForm\n          vaultData={vaultData}\n          onChange={onChange}\n          onDelete={onDelete}\n        />\n      }\n      preview={<MemoryVaultPreview {...vaultData} />}\n      onSubmit={onSubmit}\n    />\n  );\n}\n","import { Tooltip, Typography } from \"@material-ui/core\";\n\nimport React from \"react\";\nimport useStandardProposal from \"../useStandardProposal\";\n\ntype Props = {\n  onDataLoaded: (standardProposal: string) => void;\n};\n\nexport default function MemoryVaultLoadingState({ onDataLoaded }: Props) {\n  useStandardProposal(({ standardProposal }) => {\n    onDataLoaded(standardProposal.data);\n  });\n  return (\n    <Tooltip\n      title=\"This app uses a free tier Heroku Dyno and will sleep after 30 minutes of inactivity\"\n      arrow\n    >\n      <Typography variant=\"body1\" display=\"inline\">\n        Warming up the server just for you...\n      </Typography>\n    </Tooltip>\n  );\n}\n","import MemoryVault, { VaultData } from \"./MemoryVault\";\nimport React, { Dispatch, SetStateAction } from \"react\";\n\nimport { CardListItem } from \"../MemoryPage\";\nimport { Collapse } from \"@material-ui/core\";\nimport MemoryVaultCreatingState from \"./create/MemoryVaultCreatingState\";\nimport MemoryVaultLoadingState from \"./MemoryVaultLoadingState\";\nimport { VerticalSpace } from \"../../core/Spacing\";\n\ntype MemoryCardProps = {\n  card: CardListItem;\n  setCards: Dispatch<SetStateAction<CardListItem[]>>;\n};\nexport default function MemoryCard({ card, setCards }: MemoryCardProps) {\n  const deleteCard = () => {\n    setCards((old) => old.filter((c) => card.id !== c.id));\n  };\n  const createCard = () => {\n    const newCard = { ...card, isCreating: false, isReadOnly: false };\n    setCards((old) => old.map((c) => (card.id === c.id ? newCard : c)));\n  };\n  const changeCardVaultData = (newVaultData: VaultData) => {\n    setCards((old) =>\n      old.map((oldCard) =>\n        oldCard.id === card.id ? { ...oldCard, vaultData: newVaultData } : oldCard,\n      ),\n    );\n  };\n  const onDataLoaded = (data: string) =>\n    setCards((old) =>\n      old.map((oldCard) =>\n        oldCard.id === card.id\n          ? {\n              ...oldCard,\n              vaultData: { ...oldCard.vaultData, initialData: data },\n              isLoading: false,\n            }\n          : oldCard,\n      ),\n    );\n  if (card.isLoading) {\n    return (\n      <Collapse in={card.isOpen}>\n        <MemoryVaultLoadingState onDataLoaded={onDataLoaded} />\n        <VerticalSpace s2 />\n      </Collapse>\n    );\n  } else if (card.isCreating) {\n    return (\n      <Collapse in={card.isOpen}>\n        <MemoryVaultCreatingState\n          vaultData={card.vaultData}\n          onSubmit={createCard}\n          onDelete={deleteCard}\n          onChange={changeCardVaultData}\n        />\n        <VerticalSpace s2 />\n      </Collapse>\n    );\n  } else {\n    return (\n      <Collapse in={card.isOpen}>\n        <MemoryVault\n          vaultData={card.vaultData}\n          isReadOnly={card.isReadOnly}\n          onDelete={deleteCard}\n        />\n        <VerticalSpace s2 />\n      </Collapse>\n    );\n  }\n}\n","import { GOOGLE_SCOPES } from \"./googleConfiguration\";\nimport { useEffect } from \"react\";\nimport useEnforceScope from \"./useEnforceScope\";\nimport { useGoogleAuthContext } from \"./useGoogleAuthProvider\";\n\nexport function useGoogleFilesList(\n  onFetch: (files: gapi.client.drive.File[]) => void,\n) {\n  const auth = useGoogleAuthContext();\n  useEffect(() => {\n    if (auth === null || !auth.isSignedIn.get()) {\n      onFetch([]);\n    }\n  }, [auth, onFetch]);\n\n  const hasScope = useEnforceScope(GOOGLE_SCOPES);\n  useEffect(() => {\n    if (!hasScope) {\n      return;\n    }\n    gapi.client.drive.files\n      .list({\n        spaces: \"appDataFolder\",\n        fields: \"nextPageToken, files(id, appProperties)\",\n        pageSize: 100,\n      })\n      .then((response) => {\n        onFetch(response.result.files ?? []);\n      });\n  }, [hasScope, onFetch]);\n}\n","import { useGoogleAuthContext } from \"./useGoogleAuthProvider\";\n\nexport default function useEnforceScope(scope: string) {\n  const auth = useGoogleAuthContext();\n  const user = auth?.currentUser.get();\n  if (!user || !user.isSignedIn()) {\n    return false;\n  }\n  const hasScope = user.hasGrantedScopes(scope);\n  if (!hasScope) {\n    user.grant({ scope });\n  }\n  return hasScope;\n}\n","import { Dispatch, SetStateAction, useCallback } from \"react\";\n\nimport { GoogleCardListItem } from \"./MemoryPage\";\nimport { useGoogleFilesList } from \"../../google-integration/useGoogleFilesList\";\n\nexport default function useCardsFromGoogleDrive(\n  setGoogleCards: Dispatch<SetStateAction<GoogleCardListItem[]>>,\n): void {\n  const onFetch = useCallback(\n    (files: gapi.client.drive.File[]): void => {\n      const listItems = files.map(filetoListItem);\n      setGoogleCards(listItems);\n    },\n    [setGoogleCards],\n  );\n  useGoogleFilesList(onFetch);\n}\n\nfunction filetoListItem(file: gapi.client.drive.File): GoogleCardListItem {\n  return {\n    resourceId: file.id ?? \"\",\n    vaultData: {\n      title: file.appProperties?.title ?? \"\",\n      encryptionKey: file.appProperties?.encryptionKey ?? \"\",\n      initialData: \"\",\n    },\n    isLoading: false,\n    isCreating: false,\n    isOpen: false,\n  };\n}\n","import {\n  Button,\n  Divider,\n  List,\n  SwipeableDrawer,\n  useMediaQuery,\n  useTheme,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport { ChevronRight } from \"@material-ui/icons\";\nimport GoogleMemoryCard from \"./google-vault/GoogleMemoryCard\";\nimport LeftNavAddCardItem from \"./navbar/LeftNavAddCardItem\";\nimport LeftNavCardItem from \"./navbar/LeftNavCardItem\";\nimport LeftNavGoogleItem from \"./navbar/LeftNavGoogleItem\";\nimport MemoryCard from \"./vault/MemoryCard\";\nimport { VaultData } from \"./vault/MemoryVault\";\nimport { VerticalSpace } from \"../core/Spacing\";\nimport { css } from \"@emotion/css\";\nimport useCardsFromGoogleDrive from \"./useCardsFromGoogleDrive\";\nimport useCardsFromUrl from \"./useCardsFromUrl\";\n\nexport type CardListItem = {\n  vaultData: VaultData;\n  id: string;\n  isOpen: boolean;\n  isLoading: boolean;\n  isCreating: boolean;\n  isReadOnly: boolean;\n};\nexport type GoogleCardListItem = {\n  vaultData: VaultData;\n  resourceId: string;\n  isLoading: boolean;\n  isCreating: boolean;\n  isOpen: boolean;\n};\n\nexport default function MemoryPage() {\n  const theme = useTheme();\n  const [googleCards, setGoogleCards] = useState<GoogleCardListItem[]>([]);\n  useCardsFromGoogleDrive(setGoogleCards);\n\n  const [cards, setCards] = useState<CardListItem[]>([]);\n  useCardsFromUrl(setCards);\n\n  const createdCards = cards.filter((card) => !card.isCreating);\n  const leftNavSections = [\n    <LeftNavAddCardItem\n      key=\"PreviewCardNavBar\"\n      addCard={(newCard) => setCards((oldCards) => [newCard, ...oldCards])}\n    />,\n    createdCards.length > 0 && (\n      <List component=\"nav\" key=\"CardNavBar\">\n        {createdCards.map((card) => (\n          <LeftNavCardItem key={card.id} card={card} setCards={setCards} />\n        ))}\n      </List>\n    ),\n    googleCards.length > 0 && (\n      <List component=\"nav\" key=\"GoogleCardsNavBar\">\n        {googleCards.map((card) => (\n          <LeftNavGoogleItem\n            key={card.resourceId}\n            card={card}\n            setGoogleCards={setGoogleCards}\n          />\n        ))}\n      </List>\n    ),\n  ].map((child, index, all) =>\n    index === all.length - 1\n      ? child\n      : [child, <Divider key={`LeftNavSection-${index}`} />],\n  );\n\n  const bodyCards = [\n    ...cards.map((card) => (\n      <MemoryCard card={card} setCards={setCards} key={card.id} />\n    )),\n    ...googleCards.map((card) => (\n      <GoogleMemoryCard\n        card={card}\n        setGoogleCards={setGoogleCards}\n        key={card.resourceId}\n      />\n    )),\n  ];\n\n  const leftNavIsFixed = useMediaQuery(theme.breakpoints.up(\"sm\"));\n  const hasRightNav = useMediaQuery(theme.breakpoints.up(\"xl\"));\n  const [open, setOpen] = useState(true);\n  return (\n    <>\n      {!leftNavIsFixed && (\n        <>\n          <VerticalSpace s2 />\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            endIcon={<ChevronRight />}\n            onClick={() => setOpen(true)}\n            classes={{\n              root: css({\n                width: \"fit-content\",\n                borderTopLeftRadius: 0,\n                borderBottomLeftRadius: 0,\n              }),\n            }}\n          />\n          <SwipeableDrawer\n            anchor=\"left\"\n            open={open}\n            onClose={() => setOpen(false)}\n            onOpen={() => setOpen(true)}\n            classes={{ paper: css({ minWidth: 250 }) }}\n          >\n            {leftNavSections}\n          </SwipeableDrawer>\n        </>\n      )}\n      <div className={css({ display: \"flex\", flexGrow: 1 })}>\n        {leftNavIsFixed && (\n          <div\n            className={css({\n              flexBasis: 200,\n              flexShrink: 0,\n              borderRightColor: theme.palette.divider,\n              borderRightWidth: 1,\n              borderRightStyle: \"solid\",\n            })}\n          >\n            {leftNavSections}\n          </div>\n        )}\n        <div className={css({ padding: theme.spacing(2), flexGrow: 1 })}>\n          {bodyCards}\n        </div>\n        {hasRightNav && <div className={css({ flexBasis: 250 })} />}\n      </div>\n    </>\n  );\n}\n","import { Dispatch, SetStateAction, useEffect } from \"react\";\n\nimport { CardListItem } from \"./MemoryPage\";\nimport queryString from \"query-string\";\nimport { useLocation } from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\n\ntype RouteParams = {\n  title?: string;\n  key?: string;\n  data?: string;\n  readOnly?: string;\n};\n\n/**\n * Read the url params and initialize the appropriated cards\n * @param setCards\n */\nexport default function useCardsFromUrl(\n  setCards: Dispatch<SetStateAction<CardListItem[]>>,\n): void {\n  const { search } = useLocation();\n\n  useEffect(() => {\n    const params: RouteParams = queryString.parse(search);\n    if (params.key == null && params.data == null) {\n      return;\n    }\n    const isCreating = params.key == null || params.data == null;\n    const cardFromUrl = {\n      id: uuid(),\n      isOpen: true,\n      isReadOnly: isCreating ? true : params.readOnly !== \"false\",\n      isCreating,\n      isLoading: false,\n      vaultData: {\n        title: params.title ?? \"\",\n        encryptionKey: params.key ? params.key.split(\" \").join(\"+\") : \"\",\n        initialData: params.data ? params.data.split(\" \").join(\"+\") : \"\",\n      },\n    };\n\n    setCards((old) => [cardFromUrl, ...old]);\n  }, [search, setCards]);\n}\n"],"sourceRoot":""}