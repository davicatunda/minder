{"version":3,"sources":["utils/data-manipulation.ts","utils/encryption.ts","card-items/CardInfo.tsx","card-items/CardViewRoot.tsx","Standard.tsx"],"names":["arraybuffer2stringUTF16","buf","String","fromCharCode","apply","Uint16Array","string2arraybufferUTF16","str","bufffer","ArrayBuffer","length","bufView","i","strLen","charCodeAt","arraybuffer2stringUTF8","Uint8Array","arraybuffer2base64UTF8","aUTF8CodeUnits","Array","prototype","forEach","call","_","idx","arr","btoa","buffer","btoaUTF8","base642arraybufferUTF8","str64","string2arraybufferUTF8","sBinaryString","atob","aBinaryView","atobUTF8","arraybuffer2base64UTF16","aUTF16CodeUnits","btoaUTF16","base642arraybufferUTF16","atobUTF16","plainText","key","a","iv","window","crypto","getRandomValues","subtle","importKey","name","cryptoKey","encrypt","cypher","data","split","encryptedMessage","decrypt","decryptedData","createKey","generateKey","exportKey","exportedKey","useDataEncryptionInSync","title","encryptionKey","initialData","isProbablyJson","initialStore","normalizeRoot","useState","store","setStore","initialEncryptedData","useEffect","then","message","encryptedData","setEncryptedData","denormalizeRoot","updateNodes","nodes","newNodes","node","newStore","rootNode","updated","Date","CardInfo","isKeyHidden","setIsKeyHidden","Card","style","maxWidth","variant","CardHeader","CardContent","Typography","color","gutterBottom","Tooltip","placement","onDoubleClick","v","BlurredBar","height","width","marginTop","date2HumanValue","created","CardActions","Button","size","href","download","disabled","CardViewRoot","children","initialValues","onClose","theme","useTheme","draggableData","useDraggableItemsProvider","Provider","value","Paper","position","padding","spacing","right","top","arrow","IconButton","aria-label","onClick","Close","CardView","nodeKey","ADD_PROPOSAL","gql","QUERY","ProposedAPISection","standardProposal","version","SUGGESTED_PROPOSAL","type","description","MakeAProposalSection","isCreating","setIsCreating","setTitle","useMutation","addProposal","JSON","stringify","fullWidth","variables","proposal","margin","display","flexDirection","alignItems","label","onChange","e","target","autoFocus","marginBottom","AllProposalsSection","proposals","history","useHistory","map","uuid","push","Standard","useQuery","user"],"mappings":"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","file":"static/js/9.a6d3d4f1.chunk.js","sourcesContent":["/**\n * ArrayBuffer to String UTF 16 and 8 helpers\n */\nexport function arraybuffer2stringUTF16(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\n\nexport function string2arraybufferUTF16(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  const bufView = new Uint16Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\nexport function arraybuffer2stringUTF8(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint8Array(buf) as any);\n}\n\nexport function string2arraybufferUTF8(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\n/**\n * Base 64 <-> array buffer UTF 16 and 8\n */\nexport function arraybuffer2base64UTF8(buf: ArrayBuffer): string {\n  return btoaUTF8(arraybuffer2stringUTF8(buf));\n}\n\nexport function base642arraybufferUTF8(str64: string): ArrayBuffer {\n  return string2arraybufferUTF8(atobUTF8(str64));\n}\n\nexport function arraybuffer2base64UTF16(buf: ArrayBuffer): string {\n  return btoaUTF16(arraybuffer2stringUTF16(buf));\n}\n\nexport function base642arraybufferUTF16(str64: string): ArrayBuffer {\n  return string2arraybufferUTF16(atobUTF16(str64));\n}\n\n/**\n * Base 64  <-> String UTF 16 and 8\n */\n\nfunction btoaUTF16(str: string): string {\n  const aUTF16CodeUnits = new Uint16Array(str.length);\n  Array.prototype.forEach.call(aUTF16CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF16CodeUnits.buffer));\n}\n\nfunction atobUTF16(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF16(aBinaryView.buffer);\n}\n\nfunction btoaUTF8(str: string): string {\n  const aUTF8CodeUnits = new Uint8Array(str.length);\n  Array.prototype.forEach.call(aUTF8CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF8CodeUnits.buffer));\n}\n\nfunction atobUTF8(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF8(aBinaryView.buffer);\n}\n","/**\n * Set of methods used to encrypt and decrypt the data, all operating on base 64\n * TODO: remove redundant conversions for more direct mappings.\n */\n\nimport { Store, TNode, denormalizeRoot, normalizeRoot } from \"./normalization\";\nimport {\n  arraybuffer2base64UTF16,\n  arraybuffer2base64UTF8,\n  arraybuffer2stringUTF16,\n  base642arraybufferUTF16,\n  base642arraybufferUTF8,\n  string2arraybufferUTF16,\n} from \"./data-manipulation\";\nimport { useEffect, useState } from \"react\";\n\n/**\n * Encrypts the data together with iv on base 64 format\n * @param {string} plainText: plain UTF 16 text\n * @param {string} key: encrypted on base 64 format\n */\nexport async function encrypt(plainText: string, key: string): Promise<string> {\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const cypher = await window.crypto.subtle.encrypt(\n    { name: \"AES-GCM\", iv: iv },\n    cryptoKey,\n    string2arraybufferUTF16(plainText),\n  );\n\n  // join iv and message\n  return `${arraybuffer2base64UTF8(iv)}!${arraybuffer2base64UTF16(cypher)}`;\n}\n\n/**\n * Decrypts the data to plain text\n * @param {string} data: encrypted on base 64 format\n * @param {string} key: encrypted on base 64 format\n */\nexport async function decrypt(data: string, key: string): Promise<string> {\n  // split iv from message\n  const [iv, encryptedMessage] = data.split(\"!\");\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const decryptedData = await window.crypto.subtle.decrypt(\n    { name: \"AES-GCM\", iv: base642arraybufferUTF8(iv) },\n    cryptoKey,\n    base642arraybufferUTF16(encryptedMessage),\n  );\n  return arraybuffer2stringUTF16(decryptedData);\n}\n\n/**\n * Creates an unique base 64 key for all encryptions\n */\nexport async function createKey(): Promise<string> {\n  const key = await window.crypto.subtle.generateKey(\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const exportedKey = await window.crypto.subtle.exportKey(\"raw\", key);\n  return arraybuffer2base64UTF16(exportedKey);\n}\n\nexport function useDataEncryptionInSync(\n  title: string,\n  encryptionKey: string,\n  initialData: string,\n): {\n  store: Store;\n  updateNodes: (nodes: TNode[]) => void;\n  encryptedData: string;\n} | null {\n  const isProbablyJson = initialData[0] === \"{\";\n\n  const initialStore = isProbablyJson\n    ? () => normalizeRoot(initialData, { title, encryptionKey })\n    : null;\n  const [store, setStore] = useState<Store | null>(initialStore);\n\n  // decrypted initial encryption data\n  const initialEncryptedData = isProbablyJson ? null : initialData;\n  useEffect(() => {\n    if (initialEncryptedData == null) {\n      return;\n    }\n    decrypt(initialEncryptedData, encryptionKey).then((message) => {\n      setStore(normalizeRoot(message, { title, encryptionKey }));\n    });\n  }, [initialEncryptedData, encryptionKey, title]);\n\n  // keep store always encrypted\n  const [encryptedData, setEncryptedData] = useState<string | null>(null);\n  useEffect(() => {\n    if (store == null) {\n      return;\n    }\n    encrypt(denormalizeRoot(store), encryptionKey).then(setEncryptedData);\n  }, [store, encryptionKey]);\n\n  if (store === null || encryptedData === null) {\n    return null;\n  }\n\n  return {\n    store,\n    updateNodes: (nodes: TNode[]) => {\n      const newNodes = { ...store.nodes };\n      nodes.forEach((node) => (newNodes[node.key] = node));\n      const newStore = {\n        rootNode: {\n          ...store.rootNode,\n          updated: new Date(),\n        },\n        nodes: newNodes,\n      };\n      setStore(newStore);\n    },\n    encryptedData,\n  };\n}\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport BlurredBar from \"../components/BlurredBar\";\nimport { RootNode } from \"../utils/normalization\";\nimport { date2HumanValue } from \"./DateNodeCardView\";\n\ntype Props = {\n  rootNode: RootNode;\n  encryptedData: string | null;\n};\nexport default function CardInfo({ rootNode, encryptedData }: Props) {\n  const [isKeyHidden, setIsKeyHidden] = useState(true);\n\n  return (\n    <Card style={{ maxWidth: 400 }} variant=\"outlined\">\n      <CardHeader title=\"Details\" />\n      <CardContent>\n        <Typography variant=\"body2\">Title</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n          {rootNode.title}\n        </Typography>\n        <Typography variant=\"body2\">Encrypted key</Typography>\n        <Tooltip title=\"double click to show\" placement=\"top\">\n          <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n            gutterBottom\n            onDoubleClick={() => setIsKeyHidden((v) => !v)}\n          >\n            {!isKeyHidden ? (\n              rootNode.encryptionKey\n            ) : (\n              <BlurredBar style={{ height: 12, width: \"100%\", marginTop: 8 }} />\n            )}\n          </Typography>\n        </Tooltip>\n        <Typography variant=\"body2\">Created</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n          {date2HumanValue(rootNode.created)}\n        </Typography>\n        <Typography variant=\"body2\">Last Updated</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n          {date2HumanValue(rootNode.updated)}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          href={`data:text/plain;charset=base64,${rootNode.encryptionKey}`}\n          download=\"key.ish\"\n        >\n          Save Key\n        </Button>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          disabled={encryptedData == null}\n          href={`data:text/plain;charset=base64,${encryptedData}`}\n          download=\"data.ish\"\n        >\n          Save Data\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import { IconButton, Paper, Tooltip, Typography, useTheme } from \"@material-ui/core\";\nimport useDraggableItemsProvider, {\n  DraggableItemsContext,\n} from \"./useDraggableItemsContext\";\n\nimport CardInfo from \"./CardInfo\";\nimport CardView from \"./CardView\";\nimport { Close } from \"@material-ui/icons\";\nimport { DecodedDataContext } from \"./useDecodedDataContext\";\nimport React from \"react\";\nimport { Store } from \"../utils/normalization\";\nimport { useDataEncryptionInSync } from \"../utils/encryption\";\n\nexport type CardDataProps = {\n  children?(store: Store): void;\n  title: string;\n  initialValues: {\n    encryptionKey: string;\n    initialData: string;\n  };\n};\ntype Props = CardDataProps & {\n  onClose: () => void;\n};\nexport default function CardViewRoot({\n  children,\n  title,\n  initialValues: { encryptionKey, initialData },\n  onClose,\n}: Props) {\n  const theme = useTheme();\n  const draggableData = useDraggableItemsProvider();\n  const data = useDataEncryptionInSync(title, encryptionKey, initialData);\n  if (!data) {\n    return null;\n  }\n  const { store, updateNodes, encryptedData } = data;\n  return (\n    <DraggableItemsContext.Provider value={draggableData}>\n      <DecodedDataContext.Provider value={{ store, updateNodes }}>\n        <Paper style={{ position: \"relative\", padding: theme.spacing(3) }}>\n          <div\n            style={{\n              position: \"absolute\",\n              right: theme.spacing(1),\n              top: theme.spacing(1),\n            }}\n          >\n            <Tooltip title=\"Did you save? Just checking\" arrow>\n              <IconButton aria-label=\"close card\" onClick={onClose}>\n                <Close />\n              </IconButton>\n            </Tooltip>\n          </div>\n          <CardInfo rootNode={store.rootNode} encryptedData={encryptedData} />\n          <div style={{ height: theme.spacing(3) }} />\n          <Typography variant=\"h2\">Data</Typography>\n          <CardView nodeKey={store.rootNode.value} />\n          {children && children(store)}\n        </Paper>\n      </DecodedDataContext.Provider>\n    </DraggableItemsContext.Provider>\n  );\n}\n","import { Button, Paper, TextField, Typography, useTheme } from \"@material-ui/core\";\nimport React, { FunctionComponent, useState } from \"react\";\nimport { denormalizeRoot, normalizeRoot } from \"./utils/normalization\";\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\n\nimport CardView from \"./card-items/CardView\";\nimport CardViewRoot from \"./card-items/CardViewRoot\";\nimport { DecodedDataContext } from \"./card-items/useDecodedDataContext\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ADD_PROPOSAL = gql`\n  mutation Adding($proposal: String!) {\n    addProposal(proposal: $proposal) {\n      uuid\n    }\n  }\n`;\ntype StandardPageResponse = {\n  user?: {\n    uuid: string;\n  };\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n  proposals: Array<{ uuid: string }>;\n};\nconst QUERY = gql`\n  query StandardPage {\n    user {\n      uuid\n    }\n    standardProposal {\n      version\n      data\n    }\n    proposals {\n      uuid\n    }\n  }\n`;\n\nconst Standard: FunctionComponent<{}> = () => {\n  const { data } = useQuery<StandardPageResponse>(QUERY);\n  if (data == null) {\n    return null;\n  }\n  const { standardProposal, proposals } = data;\n  return (\n    <div>\n      <ProposedAPISection standardProposal={standardProposal} />\n      {data.user?.uuid != null && <MakeAProposalSection />}\n      <AllProposalsSection proposals={proposals} />\n    </div>\n  );\n};\n\ntype ProposedAPISectionProps = {\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n};\nfunction ProposedAPISection({ standardProposal }: ProposedAPISectionProps) {\n  const store = normalizeRoot(standardProposal.data, {});\n  return (\n    <DecodedDataContext.Provider value={{ store, updateNodes: null }}>\n      <Paper style={{ position: \"relative\", padding: 24 }}>\n        <Typography variant=\"h2\">Proposed API {standardProposal.version}</Typography>\n        <CardView nodeKey={store.rootNode.value} />\n      </Paper>\n    </DecodedDataContext.Provider>\n  );\n}\n\nconst SUGGESTED_PROPOSAL = {\n  \"?Parent field\": {\n    \"Proposed Field\": {\n      type: \"text\",\n      description: \"# in markdown\",\n      \"?subfields\": [\"more fields\"],\n    },\n  },\n};\nconst DUMMY_KEY = \"1Qd1fIUBT6KuzgM9mQOIkk8k77mkXz/4BGMnttcdY1c=\";\nfunction MakeAProposalSection() {\n  const [isCreating, setIsCreating] = useState(false);\n  const theme = useTheme();\n  const [title, setTitle] = useState(\"\");\n  const [addProposal] = useMutation(ADD_PROPOSAL);\n  if (!isCreating) {\n    return (\n      <Paper\n        style={{\n          padding: theme.spacing(2),\n          margin: `${theme.spacing(2)}px auto`,\n          maxWidth: 380,\n        }}\n      >\n        <div\n          style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\n        >\n          <Typography variant=\"h5\">Start</Typography>\n        </div>\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          fullWidth\n          label=\"Title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          autoFocus\n          style={{ marginBottom: theme.spacing(2) }}\n        />\n        <Button\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => setIsCreating(true)}\n        >\n          Make new proposal\n        </Button>\n      </Paper>\n    );\n  }\n  return (\n    <CardViewRoot\n      initialValues={{\n        encryptionKey: DUMMY_KEY,\n        initialData: JSON.stringify(SUGGESTED_PROPOSAL),\n      }}\n      title={title}\n      onClose={() => setIsCreating(false)}\n    >\n      {(store) => (\n        <Button\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            addProposal({ variables: { proposal: denormalizeRoot(store) } });\n            setIsCreating(false);\n            setTitle(\"\");\n          }}\n          style={{ marginTop: theme.spacing(2) }}\n        >\n          Make new proposal\n        </Button>\n      )}\n    </CardViewRoot>\n  );\n}\ntype AllProposalsSectionProps = {\n  proposals: Array<{ uuid: string }>;\n};\nfunction AllProposalsSection({ proposals }: AllProposalsSectionProps) {\n  const history = useHistory();\n  return (\n    <Paper style={{ position: \"relative\", padding: 24 }}>\n      <Typography variant=\"h2\">All Proposals</Typography>\n      <ul>\n        {proposals.map(({ uuid }) => (\n          <li key={uuid}>\n            Proposal {uuid}:\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => history.push(`/minder/proposal/${uuid}`)}\n            >\n              Check it out\n            </Button>\n          </li>\n        ))}\n      </ul>\n    </Paper>\n  );\n}\n\nexport default Standard;\n"],"sourceRoot":""}