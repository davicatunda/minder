{"version":3,"sources":["utils/data-manipulation.ts","utils/encryption.ts","card-items/CardInfo.tsx","card-items/CardViewRoot.tsx","components/DragAndDrop.tsx","card-items/CreateCard.tsx","Offline.tsx"],"names":["arraybuffer2stringUTF16","buf","String","fromCharCode","apply","Uint16Array","string2arraybufferUTF16","str","bufffer","ArrayBuffer","length","bufView","i","strLen","charCodeAt","arraybuffer2stringUTF8","Uint8Array","arraybuffer2base64UTF8","aUTF8CodeUnits","Array","prototype","forEach","call","_","idx","arr","btoa","buffer","btoaUTF8","base642arraybufferUTF8","str64","string2arraybufferUTF8","sBinaryString","atob","aBinaryView","atobUTF8","arraybuffer2base64UTF16","aUTF16CodeUnits","btoaUTF16","base642arraybufferUTF16","atobUTF16","plainText","key","a","iv","window","crypto","getRandomValues","subtle","importKey","name","cryptoKey","encrypt","cypher","data","split","encryptedMessage","decrypt","decryptedData","createKey","generateKey","exportKey","exportedKey","useDataEncryptionInSync","title","encryptionKey","initialData","isProbablyJson","initialStore","normalizeRoot","useState","store","setStore","initialEncryptedData","useEffect","then","message","encryptedData","setEncryptedData","denormalizeRoot","updateNodes","nodes","newNodes","node","newStore","rootNode","updated","Date","CardInfo","isKeyHidden","setIsKeyHidden","Card","style","maxWidth","variant","CardHeader","CardContent","Typography","color","gutterBottom","Tooltip","placement","onDoubleClick","v","BlurredBar","height","width","marginTop","date2HumanValue","created","CardActions","Button","size","href","download","disabled","CardViewRoot","children","initialValues","onClose","theme","useTheme","draggableData","useDraggableItemsProvider","Provider","value","Paper","position","padding","spacing","right","top","arrow","IconButton","aria-label","onClick","Close","CardView","nodeKey","DragAndDrop","onDrop","event","preventDefault","dataTransfer","files","onDragOver","onDragEnter","DataOptions","QUERY","gql","CreateCard","onSubmit","setInitialData","setTitle","setEncryptionKey","useQuery","onCompleted","standardProposal","margin","CreateCardHeader","CreateCardTitleInput","CreateCardKeyInput","CreateCardDataSection","fullWidth","startIcon","Add","display","flexDirection","alignItems","Avatar","LockOutlined","TextField","label","autoComplete","onChange","e","target","autoFocus","file","readFile","required","type","InputProps","endAdornment","InputAdornment","Cached","expanded","setExpanded","STANDARD","dataOption","selectDataOption","justifyContent","aria-expanded","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","FormLabel","component","RadioGroup","CUSTOM","EMPTY","FormControlLabel","control","Radio","version","textTransform","outlineWidth","outlineStyle","outlineColor","palette","secondary","main","GetApp","Done","hidden","onDone","reader","FileReader","onloadend","result","readAsText","Offline","cards","setCards","isCreating","setIsCreating","map","card","filter","c","newCard","old"],"mappings":"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","file":"static/js/7.84f3bacf.chunk.js","sourcesContent":["/**\n * ArrayBuffer to String UTF 16 and 8 helpers\n */\nexport function arraybuffer2stringUTF16(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\n\nexport function string2arraybufferUTF16(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  const bufView = new Uint16Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\nexport function arraybuffer2stringUTF8(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint8Array(buf) as any);\n}\n\nexport function string2arraybufferUTF8(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\n/**\n * Base 64 <-> array buffer UTF 16 and 8\n */\nexport function arraybuffer2base64UTF8(buf: ArrayBuffer): string {\n  return btoaUTF8(arraybuffer2stringUTF8(buf));\n}\n\nexport function base642arraybufferUTF8(str64: string): ArrayBuffer {\n  return string2arraybufferUTF8(atobUTF8(str64));\n}\n\nexport function arraybuffer2base64UTF16(buf: ArrayBuffer): string {\n  return btoaUTF16(arraybuffer2stringUTF16(buf));\n}\n\nexport function base642arraybufferUTF16(str64: string): ArrayBuffer {\n  return string2arraybufferUTF16(atobUTF16(str64));\n}\n\n/**\n * Base 64  <-> String UTF 16 and 8\n */\n\nfunction btoaUTF16(str: string): string {\n  const aUTF16CodeUnits = new Uint16Array(str.length);\n  Array.prototype.forEach.call(aUTF16CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF16CodeUnits.buffer));\n}\n\nfunction atobUTF16(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF16(aBinaryView.buffer);\n}\n\nfunction btoaUTF8(str: string): string {\n  const aUTF8CodeUnits = new Uint8Array(str.length);\n  Array.prototype.forEach.call(aUTF8CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF8CodeUnits.buffer));\n}\n\nfunction atobUTF8(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF8(aBinaryView.buffer);\n}\n","/**\n * Set of methods used to encrypt and decrypt the data, all operating on base 64\n * TODO: remove redundant conversions for more direct mappings.\n */\n\nimport { Store, TNode, denormalizeRoot, normalizeRoot } from \"./normalization\";\nimport {\n  arraybuffer2base64UTF16,\n  arraybuffer2base64UTF8,\n  arraybuffer2stringUTF16,\n  base642arraybufferUTF16,\n  base642arraybufferUTF8,\n  string2arraybufferUTF16,\n} from \"./data-manipulation\";\nimport { useEffect, useState } from \"react\";\n\n/**\n * Encrypts the data together with iv on base 64 format\n * @param {string} plainText: plain UTF 16 text\n * @param {string} key: encrypted on base 64 format\n */\nexport async function encrypt(plainText: string, key: string): Promise<string> {\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const cypher = await window.crypto.subtle.encrypt(\n    { name: \"AES-GCM\", iv: iv },\n    cryptoKey,\n    string2arraybufferUTF16(plainText),\n  );\n\n  // join iv and message\n  return `${arraybuffer2base64UTF8(iv)}!${arraybuffer2base64UTF16(cypher)}`;\n}\n\n/**\n * Decrypts the data to plain text\n * @param {string} data: encrypted on base 64 format\n * @param {string} key: encrypted on base 64 format\n */\nexport async function decrypt(data: string, key: string): Promise<string> {\n  // split iv from message\n  const [iv, encryptedMessage] = data.split(\"!\");\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const decryptedData = await window.crypto.subtle.decrypt(\n    { name: \"AES-GCM\", iv: base642arraybufferUTF8(iv) },\n    cryptoKey,\n    base642arraybufferUTF16(encryptedMessage),\n  );\n  return arraybuffer2stringUTF16(decryptedData);\n}\n\n/**\n * Creates an unique base 64 key for all encryptions\n */\nexport async function createKey(): Promise<string> {\n  const key = await window.crypto.subtle.generateKey(\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const exportedKey = await window.crypto.subtle.exportKey(\"raw\", key);\n  return arraybuffer2base64UTF16(exportedKey);\n}\n\nexport function useDataEncryptionInSync(\n  title: string,\n  encryptionKey: string,\n  initialData: string,\n): {\n  store: Store;\n  updateNodes: (nodes: TNode[]) => void;\n  encryptedData: string;\n} | null {\n  const isProbablyJson = initialData[0] === \"{\";\n\n  const initialStore = isProbablyJson\n    ? () => normalizeRoot(initialData, { title, encryptionKey })\n    : null;\n  const [store, setStore] = useState<Store | null>(initialStore);\n\n  // decrypted initial encryption data\n  const initialEncryptedData = isProbablyJson ? null : initialData;\n  useEffect(() => {\n    if (initialEncryptedData == null) {\n      return;\n    }\n    decrypt(initialEncryptedData, encryptionKey).then((message) => {\n      setStore(normalizeRoot(message, { title, encryptionKey }));\n    });\n  }, [initialEncryptedData, encryptionKey, title]);\n\n  // keep store always encrypted\n  const [encryptedData, setEncryptedData] = useState<string | null>(null);\n  useEffect(() => {\n    if (store == null) {\n      return;\n    }\n    encrypt(denormalizeRoot(store), encryptionKey).then(setEncryptedData);\n  }, [store, encryptionKey]);\n\n  if (store === null || encryptedData === null) {\n    return null;\n  }\n\n  return {\n    store,\n    updateNodes: (nodes: TNode[]) => {\n      const newNodes = { ...store.nodes };\n      nodes.forEach((node) => (newNodes[node.key] = node));\n      const newStore = {\n        rootNode: {\n          ...store.rootNode,\n          updated: new Date(),\n        },\n        nodes: newNodes,\n      };\n      setStore(newStore);\n    },\n    encryptedData,\n  };\n}\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport BlurredBar from \"../components/BlurredBar\";\nimport { RootNode } from \"../utils/normalization\";\nimport { date2HumanValue } from \"./DateNodeCardView\";\n\ntype Props = {\n  rootNode: RootNode;\n  encryptedData: string | null;\n};\nexport default function CardInfo({ rootNode, encryptedData }: Props) {\n  const [isKeyHidden, setIsKeyHidden] = useState(true);\n\n  return (\n    <Card style={{ maxWidth: 400 }} variant=\"outlined\">\n      <CardHeader title=\"Details\" />\n      <CardContent>\n        <Typography variant=\"body2\">Title</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n          {rootNode.title}\n        </Typography>\n        <Typography variant=\"body2\">Encrypted key</Typography>\n        <Tooltip title=\"double click to show\" placement=\"top\">\n          <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n            gutterBottom\n            onDoubleClick={() => setIsKeyHidden((v) => !v)}\n          >\n            {!isKeyHidden ? (\n              rootNode.encryptionKey\n            ) : (\n              <BlurredBar style={{ height: 12, width: \"100%\", marginTop: 8 }} />\n            )}\n          </Typography>\n        </Tooltip>\n        <Typography variant=\"body2\">Created</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n          {date2HumanValue(rootNode.created)}\n        </Typography>\n        <Typography variant=\"body2\">Last Updated</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n          {date2HumanValue(rootNode.updated)}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          href={`data:text/plain;charset=base64,${rootNode.encryptionKey}`}\n          download=\"key.ish\"\n        >\n          Save Key\n        </Button>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          disabled={encryptedData == null}\n          href={`data:text/plain;charset=base64,${encryptedData}`}\n          download=\"data.ish\"\n        >\n          Save Data\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import { IconButton, Paper, Tooltip, Typography, useTheme } from \"@material-ui/core\";\nimport useDraggableItemsProvider, {\n  DraggableItemsContext,\n} from \"./useDraggableItemsContext\";\n\nimport CardInfo from \"./CardInfo\";\nimport CardView from \"./CardView\";\nimport { Close } from \"@material-ui/icons\";\nimport { DecodedDataContext } from \"./useDecodedDataContext\";\nimport React from \"react\";\nimport { Store } from \"../utils/normalization\";\nimport { useDataEncryptionInSync } from \"../utils/encryption\";\n\nexport type CardDataProps = {\n  children?(store: Store): void;\n  title: string;\n  initialValues: {\n    encryptionKey: string;\n    initialData: string;\n  };\n};\ntype Props = CardDataProps & {\n  onClose: () => void;\n};\nexport default function CardViewRoot({\n  children,\n  title,\n  initialValues: { encryptionKey, initialData },\n  onClose,\n}: Props) {\n  const theme = useTheme();\n  const draggableData = useDraggableItemsProvider();\n  const data = useDataEncryptionInSync(title, encryptionKey, initialData);\n  if (!data) {\n    return null;\n  }\n  const { store, updateNodes, encryptedData } = data;\n  return (\n    <DraggableItemsContext.Provider value={draggableData}>\n      <DecodedDataContext.Provider value={{ store, updateNodes }}>\n        <Paper style={{ position: \"relative\", padding: theme.spacing(3) }}>\n          <div\n            style={{\n              position: \"absolute\",\n              right: theme.spacing(1),\n              top: theme.spacing(1),\n            }}\n          >\n            <Tooltip title=\"Did you save? Just checking\" arrow>\n              <IconButton aria-label=\"close card\" onClick={onClose}>\n                <Close />\n              </IconButton>\n            </Tooltip>\n          </div>\n          <CardInfo rootNode={store.rootNode} encryptedData={encryptedData} />\n          <div style={{ height: theme.spacing(3) }} />\n          <Typography variant=\"h2\">Data</Typography>\n          <CardView nodeKey={store.rootNode.value} />\n          {children && children(store)}\n        </Paper>\n      </DecodedDataContext.Provider>\n    </DraggableItemsContext.Provider>\n  );\n}\n","import { ReactNode } from \"react\";\n\ntype Props = {\n  children: ReactNode;\n  onDrop(file: File | null | undefined): void;\n};\nexport default function DragAndDrop({ children, onDrop }: Props) {\n  return (\n    <div\n      onDrop={(event) => {\n        event.preventDefault();\n        onDrop(event.dataTransfer.files[0]);\n      }}\n      onDragOver={(event) => {\n        event.preventDefault();\n      }}\n      onDragEnter={(event) => {\n        event.preventDefault();\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n","import {\n  Add,\n  Cached,\n  Done,\n  ExpandLess,\n  ExpandMore,\n  GetApp,\n  LockOutlined,\n} from \"@material-ui/icons\";\nimport {\n  Avatar,\n  Button,\n  Collapse,\n  FormControlLabel,\n  FormLabel,\n  IconButton,\n  InputAdornment,\n  Paper,\n  Radio,\n  RadioGroup,\n  TextField,\n  Tooltip,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nimport { CardDataProps } from \"./CardViewRoot\";\nimport DragAndDrop from \"../components/DragAndDrop\";\nimport { createKey } from \"../utils/encryption\";\n\ntype OfflinePageResponse = {\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n};\nconst QUERY = gql`\n  query OfflinePage {\n    standardProposal {\n      version\n      data\n    }\n  }\n`;\n\nenum DataOptions {\n  STANDARD = \"STANDARD\",\n  EMPTY = \"EMPTY\",\n  CUSTOM = \"CUSTOM\",\n}\ntype Props = {\n  onSubmit(card: CardDataProps): void;\n};\nexport default function CreateCard({ onSubmit }: Props) {\n  const theme = useTheme();\n  const [initialData, setInitialData] = useState<string | null>(null);\n  const [title, setTitle] = useState(\"\");\n  const [encryptionKey, setEncryptionKey] = useState(\"\");\n  const { data } = useQuery<OfflinePageResponse>(QUERY, {\n    onCompleted: (data) => {\n      setInitialData(data.standardProposal.data);\n    },\n  });\n  if (data == null) {\n    return null;\n  }\n  return (\n    <Paper style={{ padding: theme.spacing(2), margin: \"auto\", maxWidth: 380 }}>\n      <CreateCardHeader />\n      <CreateCardTitleInput title={title} setTitle={setTitle} />\n      <CreateCardKeyInput\n        encryptionKey={encryptionKey}\n        setEncryptionKey={setEncryptionKey}\n      />\n      <CreateCardDataSection\n        standardProposal={data.standardProposal}\n        setInitialData={setInitialData}\n      />\n      <div style={{ height: theme.spacing(1) }} />\n      <Button\n        fullWidth\n        variant=\"contained\"\n        disabled={encryptionKey === \"\" || initialData === null}\n        color=\"primary\"\n        startIcon={<Add />}\n        onClick={() => {\n          onSubmit({\n            title: title !== \"\" ? title : \"Primary\",\n            initialValues: {\n              encryptionKey,\n              initialData: initialData as string,\n            },\n          });\n        }}\n      >\n        Open\n      </Button>\n    </Paper>\n  );\n}\n\nfunction CreateCardHeader() {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n      <Avatar>\n        <LockOutlined />\n      </Avatar>\n      <Typography variant=\"h5\">Start</Typography>\n    </div>\n  );\n}\n\ntype CreateCardTitleInputProps = {\n  title: string;\n  setTitle: (title: string) => void;\n};\nfunction CreateCardTitleInput({ title, setTitle }: CreateCardTitleInputProps) {\n  return (\n    <TextField\n      variant=\"outlined\"\n      margin=\"normal\"\n      fullWidth\n      label=\"Title\"\n      autoComplete=\"title\"\n      value={title}\n      onChange={(e) => setTitle(e.target.value)}\n      autoFocus\n    />\n  );\n}\n\ntype CreateCardKeyInputProps = {\n  encryptionKey: string;\n  setEncryptionKey: (encryptionKey: string) => void;\n};\nfunction CreateCardKeyInput({\n  encryptionKey,\n  setEncryptionKey,\n}: CreateCardKeyInputProps) {\n  return (\n    <DragAndDrop onDrop={(file) => readFile(file, setEncryptionKey)}>\n      <TextField\n        variant=\"outlined\"\n        margin=\"normal\"\n        required\n        fullWidth\n        label=\"Encryption Key\"\n        type=\"password\"\n        autoComplete=\"current-encryption-key\"\n        value={encryptionKey}\n        onChange={(e) => setEncryptionKey(e.target.value)}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Tooltip title=\"Generate new key\" arrow>\n                <IconButton\n                  aria-label=\"generate new encryption Key\"\n                  onClick={() => createKey().then(setEncryptionKey)}\n                >\n                  <Cached />\n                </IconButton>\n              </Tooltip>\n            </InputAdornment>\n          ),\n        }}\n      />\n    </DragAndDrop>\n  );\n}\n\ntype CreateCardDataSectionProps = {\n  setInitialData: (initialData: string | null) => void;\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n};\nfunction CreateCardDataSection({\n  standardProposal,\n  setInitialData,\n}: CreateCardDataSectionProps) {\n  const theme = useTheme();\n  const [expanded, setExpanded] = useState(false);\n  const [dataOption, selectDataOption] = useState<DataOptions>(DataOptions.STANDARD);\n  const [encryptedData, setEncryptedData] = useState<string | null>(null);\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Typography variant=\"body1\">Data Options</Typography>\n        <IconButton\n          onClick={() => setExpanded((e) => !e)}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          {expanded ? <ExpandLess /> : <ExpandMore />}\n        </IconButton>\n      </div>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <FormLabel component=\"legend\">Initial Data</FormLabel>\n        <RadioGroup\n          aria-label=\"Initial data\"\n          value={dataOption}\n          onChange={(event) => {\n            const dataOption: DataOptions = (event.target as HTMLInputElement)\n              .value as DataOptions;\n            selectDataOption(dataOption);\n            switch (dataOption) {\n              case DataOptions.CUSTOM:\n                return setInitialData(encryptedData);\n              case DataOptions.EMPTY:\n                return setInitialData(\"{}\");\n              case DataOptions.STANDARD:\n                return setInitialData(standardProposal.data);\n            }\n          }}\n        >\n          <FormControlLabel\n            value={DataOptions.STANDARD}\n            control={<Radio />}\n            label={`Standard v${standardProposal.version}`}\n          />\n          <FormControlLabel\n            value={DataOptions.EMPTY}\n            control={<Radio />}\n            label=\"Empty\"\n          />\n          <FormControlLabel\n            value={DataOptions.CUSTOM}\n            control={<Radio />}\n            label=\"My own\"\n          />\n        </RadioGroup>\n        {DataOptions.CUSTOM === dataOption && (\n          <DragAndDrop\n            onDrop={(file) =>\n              readFile(file, (data) => {\n                setEncryptedData(data);\n                if (dataOption === DataOptions.CUSTOM) {\n                  setInitialData(data);\n                }\n              })\n            }\n          >\n            <Button\n              component=\"label\"\n              fullWidth\n              style={{\n                textTransform: \"none\",\n                outlineWidth: 2,\n                outlineStyle: \"dashed\",\n                outlineColor: theme.palette.secondary.main,\n              }}\n              startIcon={encryptedData === null ? <GetApp /> : <Done />}\n            >\n              <input\n                hidden\n                type=\"file\"\n                onChange={(e) =>\n                  readFile(e.target.files?.[0], (data) => {\n                    setEncryptedData(data);\n                    if (dataOption === DataOptions.CUSTOM) {\n                      setInitialData(data);\n                    }\n                  })\n                }\n              />\n              {encryptedData === null ? (\n                <Typography variant=\"body1\">\n                  Drag or upload your encrypted data\n                </Typography>\n              ) : (\n                <Typography variant=\"body1\">Done</Typography>\n              )}\n            </Button>\n          </DragAndDrop>\n        )}\n      </Collapse>\n    </>\n  );\n}\n\nfunction readFile(file: File | null | undefined, onDone: (reuslt: string) => void) {\n  if (!file) return;\n  const reader = new FileReader();\n  reader.onloadend = () => {\n    if (typeof reader.result === \"string\") {\n      onDone(reader.result);\n    }\n  };\n  reader.readAsText(file);\n}\n","import { Button, useTheme } from \"@material-ui/core\";\nimport CardViewRoot, { CardDataProps } from \"./card-items/CardViewRoot\";\nimport React, { useState } from \"react\";\n\nimport { Add } from \"@material-ui/icons\";\nimport CreateCard from \"./card-items/CreateCard\";\n\nexport default function Offline() {\n  const theme = useTheme();\n  const [cards, setCards] = useState<CardDataProps[]>([]);\n  const [isCreating, setIsCreating] = useState(true);\n  return (\n    <>\n      {cards.map((card) => (\n        <div key={card.initialValues.encryptionKey}>\n          <CardViewRoot\n            {...card}\n            onClose={() =>\n              setCards(\n                cards.filter(\n                  (c) =>\n                    card.initialValues.encryptionKey !==\n                    c.initialValues.encryptionKey,\n                ),\n              )\n            }\n          />\n          <div style={{ height: theme.spacing(2) }} />\n        </div>\n      ))}\n      {isCreating || cards.length === 0 ? (\n        <CreateCard\n          onSubmit={(newCard) => {\n            setIsCreating(false);\n            setCards((old) => [...old, newCard]);\n          }}\n        />\n      ) : (\n        <Button\n          fullWidth\n          variant=\"outlined\"\n          color=\"primary\"\n          startIcon={<Add />}\n          onClick={() => setIsCreating(true)}\n        >\n          Open\n        </Button>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}