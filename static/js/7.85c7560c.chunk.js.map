{"version":3,"sources":["components/DragAndDrop.tsx","card-items/CreateCard.tsx","Offline.tsx"],"names":["DragAndDrop","children","onDrop","event","preventDefault","dataTransfer","files","onDragOver","onDragEnter","DataOptions","QUERY","gql","CreateCard","onSubmit","theme","useTheme","useState","initialData","setInitialData","title","setTitle","encryptionKey","setEncryptionKey","data","useQuery","onCompleted","standardProposal","Paper","style","padding","spacing","margin","maxWidth","CreateCardHeader","CreateCardTitleInput","CreateCardKeyInput","CreateCardDataSection","height","Button","fullWidth","variant","disabled","color","startIcon","Add","onClick","initialValues","display","flexDirection","alignItems","Avatar","LockOutlined","Typography","TextField","label","autoComplete","value","onChange","e","target","autoFocus","file","readFile","required","type","InputProps","endAdornment","InputAdornment","position","Tooltip","arrow","IconButton","aria-label","createKey","then","Cached","expanded","setExpanded","STANDARD","dataOption","selectDataOption","encryptedData","setEncryptedData","justifyContent","aria-expanded","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","FormLabel","component","RadioGroup","CUSTOM","EMPTY","FormControlLabel","control","Radio","version","textTransform","outlineWidth","outlineStyle","outlineColor","palette","secondary","main","GetApp","Done","hidden","onDone","reader","FileReader","onloadend","result","readAsText","Offline","cards","setCards","isCreating","setIsCreating","map","card","CardViewRoot","onClose","filter","c","length","newCard","old"],"mappings":"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","file":"static/js/7.85c7560c.chunk.js","sourcesContent":["import { ReactNode } from \"react\";\n\ntype Props = {\n  children: ReactNode;\n  onDrop(file: File | null | undefined): void;\n};\nexport default function DragAndDrop({ children, onDrop }: Props) {\n  return (\n    <div\n      onDrop={(event) => {\n        event.preventDefault();\n        onDrop(event.dataTransfer.files[0]);\n      }}\n      onDragOver={(event) => {\n        event.preventDefault();\n      }}\n      onDragEnter={(event) => {\n        event.preventDefault();\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n","import {\n  Add,\n  Cached,\n  Done,\n  ExpandLess,\n  ExpandMore,\n  GetApp,\n  LockOutlined,\n} from \"@material-ui/icons\";\nimport {\n  Avatar,\n  Button,\n  Collapse,\n  FormControlLabel,\n  FormLabel,\n  IconButton,\n  InputAdornment,\n  Paper,\n  Radio,\n  RadioGroup,\n  TextField,\n  Tooltip,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nimport { CardDataProps } from \"./CardViewRoot\";\nimport DragAndDrop from \"../components/DragAndDrop\";\nimport { createKey } from \"../utils/encryption\";\n\ntype OfflinePageResponse = {\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n};\nconst QUERY = gql`\n  query OfflinePage {\n    standardProposal {\n      version\n      data\n    }\n  }\n`;\n\nenum DataOptions {\n  STANDARD = \"STANDARD\",\n  EMPTY = \"EMPTY\",\n  CUSTOM = \"CUSTOM\",\n}\ntype Props = {\n  onSubmit(card: CardDataProps): void;\n};\nexport default function CreateCard({ onSubmit }: Props) {\n  const theme = useTheme();\n  const [initialData, setInitialData] = useState<string | null>(null);\n  const [title, setTitle] = useState(\"\");\n  const [encryptionKey, setEncryptionKey] = useState(\"\");\n  const { data } = useQuery<OfflinePageResponse>(QUERY, {\n    onCompleted: (data) => {\n      setInitialData(data.standardProposal.data);\n    },\n  });\n  if (data == null) {\n    return null;\n  }\n  return (\n    <Paper style={{ padding: theme.spacing(2), margin: \"auto\", maxWidth: 380 }}>\n      <CreateCardHeader />\n      <CreateCardTitleInput title={title} setTitle={setTitle} />\n      <CreateCardKeyInput\n        encryptionKey={encryptionKey}\n        setEncryptionKey={setEncryptionKey}\n      />\n      <CreateCardDataSection\n        standardProposal={data.standardProposal}\n        setInitialData={setInitialData}\n      />\n      <div style={{ height: theme.spacing(1) }} />\n      <Button\n        fullWidth\n        variant=\"contained\"\n        disabled={encryptionKey === \"\" || initialData === null}\n        color=\"primary\"\n        startIcon={<Add />}\n        onClick={() => {\n          onSubmit({\n            title: title !== \"\" ? title : \"Primary\",\n            initialValues: {\n              encryptionKey,\n              initialData: initialData as string,\n            },\n          });\n        }}\n      >\n        Open\n      </Button>\n    </Paper>\n  );\n}\n\nfunction CreateCardHeader() {\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n      <Avatar>\n        <LockOutlined />\n      </Avatar>\n      <Typography variant=\"h5\">Start</Typography>\n    </div>\n  );\n}\n\ntype CreateCardTitleInputProps = {\n  title: string;\n  setTitle: (title: string) => void;\n};\nfunction CreateCardTitleInput({ title, setTitle }: CreateCardTitleInputProps) {\n  return (\n    <TextField\n      variant=\"outlined\"\n      margin=\"normal\"\n      fullWidth\n      label=\"Title\"\n      autoComplete=\"title\"\n      value={title}\n      onChange={(e) => setTitle(e.target.value)}\n      autoFocus\n    />\n  );\n}\n\ntype CreateCardKeyInputProps = {\n  encryptionKey: string;\n  setEncryptionKey: (encryptionKey: string) => void;\n};\nfunction CreateCardKeyInput({\n  encryptionKey,\n  setEncryptionKey,\n}: CreateCardKeyInputProps) {\n  return (\n    <DragAndDrop onDrop={(file) => readFile(file, setEncryptionKey)}>\n      <TextField\n        variant=\"outlined\"\n        margin=\"normal\"\n        required\n        fullWidth\n        label=\"Encryption Key\"\n        type=\"password\"\n        autoComplete=\"current-encryption-key\"\n        value={encryptionKey}\n        onChange={(e) => setEncryptionKey(e.target.value)}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Tooltip title=\"Generate new key\" arrow>\n                <IconButton\n                  aria-label=\"generate new encryption Key\"\n                  onClick={() => createKey().then(setEncryptionKey)}\n                >\n                  <Cached />\n                </IconButton>\n              </Tooltip>\n            </InputAdornment>\n          ),\n        }}\n      />\n    </DragAndDrop>\n  );\n}\n\ntype CreateCardDataSectionProps = {\n  setInitialData: (initialData: string | null) => void;\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n};\nfunction CreateCardDataSection({\n  standardProposal,\n  setInitialData,\n}: CreateCardDataSectionProps) {\n  const theme = useTheme();\n  const [expanded, setExpanded] = useState(false);\n  const [dataOption, selectDataOption] = useState<DataOptions>(DataOptions.STANDARD);\n  const [encryptedData, setEncryptedData] = useState<string | null>(null);\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Typography variant=\"body1\">Data Options</Typography>\n        <IconButton\n          onClick={() => setExpanded((e) => !e)}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          {expanded ? <ExpandLess /> : <ExpandMore />}\n        </IconButton>\n      </div>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <FormLabel component=\"legend\">Initial Data</FormLabel>\n        <RadioGroup\n          aria-label=\"Initial data\"\n          value={dataOption}\n          onChange={(event) => {\n            const dataOption: DataOptions = (event.target as HTMLInputElement)\n              .value as DataOptions;\n            selectDataOption(dataOption);\n            switch (dataOption) {\n              case DataOptions.CUSTOM:\n                return setInitialData(encryptedData);\n              case DataOptions.EMPTY:\n                return setInitialData(\"{}\");\n              case DataOptions.STANDARD:\n                return setInitialData(standardProposal.data);\n            }\n          }}\n        >\n          <FormControlLabel\n            value={DataOptions.STANDARD}\n            control={<Radio />}\n            label={`Standard v${standardProposal.version}`}\n          />\n          <FormControlLabel\n            value={DataOptions.EMPTY}\n            control={<Radio />}\n            label=\"Empty\"\n          />\n          <FormControlLabel\n            value={DataOptions.CUSTOM}\n            control={<Radio />}\n            label=\"My own\"\n          />\n        </RadioGroup>\n        {DataOptions.CUSTOM === dataOption && (\n          <DragAndDrop\n            onDrop={(file) =>\n              readFile(file, (data) => {\n                setEncryptedData(data);\n                if (dataOption === DataOptions.CUSTOM) {\n                  setInitialData(data);\n                }\n              })\n            }\n          >\n            <Button\n              component=\"label\"\n              fullWidth\n              style={{\n                textTransform: \"none\",\n                outlineWidth: 2,\n                outlineStyle: \"dashed\",\n                outlineColor: theme.palette.secondary.main,\n              }}\n              startIcon={encryptedData === null ? <GetApp /> : <Done />}\n            >\n              <input\n                hidden\n                type=\"file\"\n                onChange={(e) =>\n                  readFile(e.target.files?.[0], (data) => {\n                    setEncryptedData(data);\n                    if (dataOption === DataOptions.CUSTOM) {\n                      setInitialData(data);\n                    }\n                  })\n                }\n              />\n              {encryptedData === null ? (\n                <Typography variant=\"body1\">\n                  Drag or upload your encrypted data\n                </Typography>\n              ) : (\n                <Typography variant=\"body1\">Done</Typography>\n              )}\n            </Button>\n          </DragAndDrop>\n        )}\n      </Collapse>\n    </>\n  );\n}\n\nfunction readFile(file: File | null | undefined, onDone: (reuslt: string) => void) {\n  if (!file) return;\n  const reader = new FileReader();\n  reader.onloadend = () => {\n    if (typeof reader.result === \"string\") {\n      onDone(reader.result);\n    }\n  };\n  reader.readAsText(file);\n}\n","import { Button, useTheme } from \"@material-ui/core\";\nimport CardViewRoot, { CardDataProps } from \"./card-items/CardViewRoot\";\nimport React, { useState } from \"react\";\n\nimport { Add } from \"@material-ui/icons\";\nimport CreateCard from \"./card-items/CreateCard\";\n\nexport default function Offline() {\n  const theme = useTheme();\n  const [cards, setCards] = useState<CardDataProps[]>([]);\n  const [isCreating, setIsCreating] = useState(true);\n  return (\n    <>\n      {cards.map((card) => (\n        <div key={card.initialValues.encryptionKey}>\n          <CardViewRoot\n            {...card}\n            onClose={() =>\n              setCards(\n                cards.filter(\n                  (c) =>\n                    card.initialValues.encryptionKey !==\n                    c.initialValues.encryptionKey,\n                ),\n              )\n            }\n          />\n          <div style={{ height: theme.spacing(2) }} />\n        </div>\n      ))}\n      {isCreating || cards.length === 0 ? (\n        <CreateCard\n          onSubmit={(newCard) => {\n            setIsCreating(false);\n            setCards((old) => [...old, newCard]);\n          }}\n        />\n      ) : (\n        <Button\n          fullWidth\n          variant=\"outlined\"\n          color=\"primary\"\n          startIcon={<Add />}\n          onClick={() => setIsCreating(true)}\n        >\n          Open\n        </Button>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}