{"version":3,"sources":["utils/normalization.ts","card-items/CardInfo.tsx","card-items/CardViewRoot.tsx","card-items/DateNodeCardView.tsx","card-items/EditValueNodeInput.tsx","card-items/NodeTypeIcon.tsx","card-items/useSearchTextOnNodeRecursively.ts","card-items/ListNodeCardView.tsx","card-items/ObjectFieldNodeCardView.tsx","card-items/ObjectNodeCardView.tsx","card-items/CardView.tsx","utils/data-manipulation.ts","utils/encryption.ts","components/BlurredBar.tsx"],"names":["RefinedType","ROOT_KEY","normalizeRoot","decodedData","overrides","parsedDate","JSON","parse","title","created","Date","updated","key","encryptionKey","values","nodes","rootNodeValue","recursivelyAddNodes","rootNode","value","parentKey","data","node","uuid","Array","children","map","child","type","List","RegExp","test","isDate","date","String","Number","Boolean","Null","fields","Object","keys","name","getNode","denormalizeRoot","store","stringify","recursivelyDenormalizeNode","nodeKey","console","log","toISOString","childKey","object","forEach","field","defaultNodeValue","parentNode","CardInfo","encryptedData","useState","isKeyHidden","setIsKeyHidden","Card","style","maxWidth","variant","CardHeader","CardContent","Typography","color","gutterBottom","Tooltip","placement","onDoubleClick","v","BlurredBar","height","width","marginTop","date2HumanValue","CardActions","Button","size","href","download","disabled","DecodedDataContext","React","createContext","useDecodedDataState","context","useContext","Error","CardViewRoot","initialValues","initialData","onClose","useDataEncryptionInSync","setDecodedData","Provider","updateNodes","newNodes","newStore","Paper","position","padding","right","top","arrow","IconButton","aria-label","onClick","Close","CardView","DateNodeCardView","props","year","getFullYear","toString","month","getMonth","padStart","day","getDate","EditValueNodeInput","onChange","EditBooleanInput","EditDateInput","EditNumberInput","EditStringInput","TextField","autoFocus","margin","id","label","event","isNaN","target","fullWidth","disableToolbar","format","KeyboardButtonProps","FormControl","FormLabel","component","FormControlLabel","control","Switch","checked","NodeTypeIcon","fontSize","useSearchTextOnNodeRecursively","searchValue","searchTextOnNodeRecursively","toLocaleLowerCase","startKey","includes","some","ListNodeCardView","setSearchValue","searchMatches","e","stopPropagation","length","Input","placeholder","startAdornment","InputAdornment","filter","ListItem","button","ListItemIcon","ListItemText","primary","NewListItemDialogButton","templateNode","isDialogOpen","setIsDialogOpen","valueNode","setValueNode","startIcon","Dialog","open","aria-labelledby","DialogTitle","DialogContent","DialogContentText","InputLabel","Select","labelId","newType","MenuItem","DialogActions","newParentnode","ObjectFieldNodeCardView","theme","useTheme","isSelected","setIsSelected","fillLine","useIsValueSmall","Grid","item","xs","sm","md","spacing","display","alignItems","EditFieldDialog","newFieldName","setNewFieldName","oldValueNode","isEditting","setIsEditting","useEffect","newParentNode","originalField","ObjectNodeCardView","container","NewFieldDialogButton","fieldName","setFieldName","flex","minWidth","BooleanNodeCardView","NullNodeCardView","NumberNodeCardView","StringNodeCardView","arraybuffer2stringUTF16","buf","fromCharCode","apply","Uint16Array","string2arraybufferUTF16","str","bufffer","ArrayBuffer","bufView","i","strLen","charCodeAt","arraybuffer2stringUTF8","Uint8Array","arraybuffer2base64UTF8","aUTF8CodeUnits","prototype","call","_","idx","arr","btoa","buffer","btoaUTF8","base642arraybufferUTF8","str64","string2arraybufferUTF8","sBinaryString","atob","aBinaryView","atobUTF8","arraybuffer2base64UTF16","aUTF16CodeUnits","btoaUTF16","base642arraybufferUTF16","atobUTF16","plainText","a","iv","window","crypto","getRandomValues","subtle","importKey","cryptoKey","encrypt","cypher","split","encryptedMessage","decrypt","decryptedData","createKey","generateKey","exportKey","exportedKey","isProbablyJson","setEncryptedData","isEncrypting","setIsEncrypting","isDecrypting","setIsDecrypting","then","message","backgroundColor","palette","text","opacity"],"mappings":"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","file":"static/js/1.d90fdfe6.chunk.js","sourcesContent":["import { v4 as uuid } from \"uuid\";\n\nexport type StoreKey = string;\ntype NodesStore = {\n  [key: string]: TNode;\n};\nexport type Store = {\n  rootNode: RootNode;\n  nodes: NodesStore;\n};\nexport type TNode =\n  | TObjectNode\n  | TListNode\n  | TDateNode\n  | TStringNode\n  | TBooleanNode\n  | TNumberNode\n  | TNullNode;\n\nexport interface TNodeWithKeys<T extends RefinedType> {\n  type: T;\n  key: StoreKey;\n  parentKey: StoreKey;\n}\nexport type TObejctField = {\n  name: string;\n  value: StoreKey;\n};\nexport interface TObjectNode extends TNodeWithKeys<RefinedType.Object> {\n  fields: TObejctField[];\n}\nexport interface TListNode extends TNodeWithKeys<RefinedType.List> {\n  children: StoreKey[];\n}\nexport interface TDateNode extends TNodeWithKeys<RefinedType.Date> {\n  date: Date;\n}\nexport interface TStringNode extends TNodeWithKeys<RefinedType.String> {\n  value: string;\n}\nexport interface TBooleanNode extends TNodeWithKeys<RefinedType.Boolean> {\n  value: boolean;\n}\nexport interface TNumberNode extends TNodeWithKeys<RefinedType.Number> {\n  value: number;\n}\nexport interface TNullNode extends TNodeWithKeys<RefinedType.Null> {}\n\nexport enum RefinedType {\n  List = \"List\",\n  Object = \"Object\",\n  Number = \"Number\",\n  Boolean = \"Boolean\",\n  String = \"String\",\n  Date = \"Date\",\n  Null = \"Null\",\n}\n\nconst ROOT_KEY = \"ROOT\";\nexport type RootNode = {\n  title: string;\n  encryptionKey: string;\n  created: Date;\n  updated: Date;\n  key: string;\n  value: StoreKey;\n};\n\nexport function normalizeRoot(\n  decodedData: string,\n  overrides: {\n    encryptionKey?: string;\n    title?: string;\n  },\n): Store {\n  const parsedDate = JSON.parse(decodedData);\n  const {\n    title = overrides.title ?? \"Primary\",\n    created = new Date(),\n    updated = new Date(),\n    key = ROOT_KEY,\n    encryptionKey = overrides.encryptionKey,\n    ...values\n  } = parsedDate;\n  const nodes = {};\n  const rootNodeValue = recursivelyAddNodes(nodes, ROOT_KEY, values);\n  const store: Store = {\n    rootNode: {\n      title,\n      encryptionKey,\n      created: new Date(created),\n      updated: new Date(updated),\n      key,\n      value: rootNodeValue.key,\n    },\n    nodes,\n  };\n  return store;\n}\n\nfunction recursivelyAddNodes(\n  nodes: NodesStore,\n  parentKey: StoreKey,\n  data: any,\n): TNode {\n  const node = getNode(nodes, parentKey, data);\n  nodes[node.key] = node;\n  return node;\n}\n\nfunction getNode(nodes: NodesStore, parentKey: StoreKey, value: any): TNode {\n  const key = uuid();\n  if (value instanceof Array) {\n    const childrenNodes = value.map((child: any) =>\n      recursivelyAddNodes(nodes, parentKey, child),\n    );\n    const children = childrenNodes.map((node) => node.key);\n    return { type: RefinedType.List, key, parentKey, children };\n  }\n  switch (typeof value) {\n    case \"string\": {\n      if (isDate(value)) {\n        const date = new Date(value);\n        return { type: RefinedType.Date, key, parentKey, date };\n      } else {\n        return { type: RefinedType.String, key, parentKey, value };\n      }\n    }\n    case \"number\":\n      return { type: RefinedType.Number, key, parentKey, value };\n    case \"boolean\":\n      return { type: RefinedType.Boolean, key, parentKey, value };\n    case \"object\":\n    default: {\n      if (value == null) {\n        return { type: RefinedType.Null, key, parentKey };\n      } else {\n        const fields = Object.keys(value).map((name) => ({\n          name,\n          value: recursivelyAddNodes(nodes, key, value[name]).key,\n        }));\n        return { type: RefinedType.Object, key, parentKey, fields };\n      }\n    }\n  }\n}\n\nexport function denormalizeRoot(store: Store): string {\n  return JSON.stringify({\n    title: store.rootNode.title,\n    created: store.rootNode.created,\n    updated: store.rootNode.updated,\n    key: store.rootNode.key,\n    ...recursivelyDenormalizeNode(store.nodes, store.rootNode.value),\n  });\n}\n\nexport function recursivelyDenormalizeNode(\n  nodes: NodesStore,\n  nodeKey: StoreKey,\n): any {\n  const node = nodes[nodeKey];\n  console.log(node, nodeKey);\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return node.value;\n    case RefinedType.Date:\n      return node.date.toISOString();\n    case RefinedType.List:\n      return node.children.map((childKey) =>\n        recursivelyDenormalizeNode(nodes, childKey),\n      );\n    case RefinedType.Null:\n      return null;\n    case RefinedType.Number:\n      return node.value;\n    case RefinedType.Object:\n      const object: { [name: string]: any } = {};\n      node.fields.forEach((field) => {\n        object[field.name] = recursivelyDenormalizeNode(nodes, field.value);\n      });\n      return object;\n    case RefinedType.String:\n      return node.value;\n  }\n}\n\nexport function defaultNodeValue(\n  type: RefinedType,\n  parentNode: TObjectNode | TListNode,\n): TNode {\n  const key = uuid();\n  const parentKey = parentNode.key;\n  switch (type) {\n    case RefinedType.List:\n      return { type, parentKey, key, children: [] };\n    case RefinedType.Boolean:\n      return { type, parentKey, key, value: true };\n    case RefinedType.Date:\n      return { type, parentKey, key, date: new Date() };\n    case RefinedType.Null:\n      return { type, parentKey, key };\n    case RefinedType.Number:\n      return { type, parentKey, key, value: 0 };\n    case RefinedType.Object:\n      return { type, parentKey, key, fields: [] };\n    case RefinedType.String:\n      return { type, parentKey, key, value: \"\" };\n  }\n}\n\nfunction isDate(value: string): boolean {\n  const regex = RegExp(\n    /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/,\n  );\n  return regex.test(value);\n}\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport BlurredBar from \"../components/BlurredBar\";\nimport { RootNode } from \"../utils/normalization\";\nimport { date2HumanValue } from \"./DateNodeCardView\";\n\ntype Props = {\n  rootNode: RootNode;\n  encryptedData: string | null;\n};\nexport default function CardInfo({ rootNode, encryptedData }: Props) {\n  const [isKeyHidden, setIsKeyHidden] = useState(true);\n\n  return (\n    <Card style={{ maxWidth: 400 }} variant=\"outlined\">\n      <CardHeader title=\"Details\" />\n      <CardContent>\n        <Typography variant=\"body2\">Title</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n          {rootNode.title}\n        </Typography>\n        <Typography variant=\"body2\">Encrypted key</Typography>\n        <Tooltip title=\"double click to show\" placement=\"top\">\n          <Typography\n            variant=\"body2\"\n            color=\"textSecondary\"\n            gutterBottom\n            onDoubleClick={() => setIsKeyHidden((v) => !v)}\n          >\n            {!isKeyHidden ? (\n              rootNode.encryptionKey\n            ) : (\n              <BlurredBar style={{ height: 12, width: \"100%\", marginTop: 8 }} />\n            )}\n          </Typography>\n        </Tooltip>\n        <Typography variant=\"body2\">Created</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n          {date2HumanValue(rootNode.created)}\n        </Typography>\n        <Typography variant=\"body2\">Last Updated</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n          {date2HumanValue(rootNode.updated)}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          href={`data:text/plain;charset=base64,${rootNode.encryptionKey}`}\n          download=\"key.ish\"\n        >\n          Save Key\n        </Button>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          disabled={encryptedData == null}\n          href={`data:text/plain;charset=base64,${encryptedData}`}\n          download=\"data.ish\"\n        >\n          Save Data\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import { IconButton, Paper, Tooltip, Typography } from \"@material-ui/core\";\nimport {\n  Store,\n  TNode,\n  denormalizeRoot,\n  normalizeRoot,\n} from \"../utils/normalization\";\n\nimport CardInfo from \"./CardInfo\";\nimport CardView from \"./CardView\";\nimport { Close } from \"@material-ui/icons\";\nimport React from \"react\";\nimport { useDataEncryptionInSync } from \"../utils/encryption\";\n\ntype TDecodedDataContext = {\n  store: Store;\n  updateNodes: ((nodes: TNode[]) => void) | null;\n};\nexport const DecodedDataContext = React.createContext<TDecodedDataContext | null>(\n  null,\n);\nexport function useDecodedDataState() {\n  const context = React.useContext(DecodedDataContext);\n  if (context == null) {\n    throw new Error(\"missing DecodedDataContext.Provider\");\n  }\n  return context;\n}\n\nexport type CardDataProps = {\n  title: string;\n  initialValues: {\n    encryptionKey: string;\n    initialData: string;\n  };\n};\ntype Props = CardDataProps & {\n  onClose: () => void;\n};\nfunction CardViewRoot({\n  title,\n  initialValues: { encryptionKey, initialData },\n  onClose,\n}: Props) {\n  const { decodedData, setDecodedData, encryptedData } = useDataEncryptionInSync(\n    encryptionKey,\n    initialData,\n  );\n  if (!decodedData) {\n    return null;\n  }\n  const store = normalizeRoot(decodedData, { title, encryptionKey });\n  const updateNodes = (nodes: TNode[]) => {\n    const newNodes = { ...store.nodes };\n    nodes.forEach((node) => (newNodes[node.key] = node));\n    const newStore = {\n      rootNode: {\n        ...store.rootNode,\n        updated: new Date(),\n      },\n      nodes: newNodes,\n    };\n    setDecodedData(denormalizeRoot(newStore));\n  };\n  return (\n    <DecodedDataContext.Provider value={{ store, updateNodes }}>\n      <Paper style={{ position: \"relative\", padding: 24 }}>\n        <div style={{ position: \"absolute\", right: 8, top: 8 }}>\n          <Tooltip title=\"Did you save? Just checking\" arrow>\n            <IconButton aria-label=\"close card\" onClick={onClose}>\n              <Close />\n            </IconButton>\n          </Tooltip>\n        </div>\n        <CardInfo rootNode={store.rootNode} encryptedData={encryptedData} />\n        <div style={{ height: 24 }} />\n        <Typography variant=\"h2\">Data</Typography>\n        <CardView nodeKey={store.rootNode.value} />\n      </Paper>\n    </DecodedDataContext.Provider>\n  );\n}\n\nexport default CardViewRoot;\n","import { TDateNode } from \"../utils/normalization\";\n\nexport default function DateNodeCardView(props: { node: TDateNode }) {\n  return <span>{date2HumanValue(props.node.date)}</span>;\n}\n\nexport function date2HumanValue(date: Date): string {\n  const year = date.getFullYear().toString();\n  const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n  const day = date.getDate().toString().padStart(2, \"0\");\n  return `${month}-${day}-${year}`;\n}\n","import {\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  Switch,\n  TextField,\n} from \"@material-ui/core\";\nimport {\n  RefinedType,\n  TBooleanNode,\n  TDateNode,\n  TNode,\n  TNumberNode,\n  TStringNode,\n} from \"../utils/normalization\";\n\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport React from \"react\";\n\ntype Props = {\n  node: TNode | null;\n  onChange(node: TNode): void;\n};\nexport default function EditValueNodeInput({ node, onChange }: Props) {\n  if (node === null) {\n    return null;\n  }\n  switch (node.type) {\n    case RefinedType.List:\n      return null;\n    case RefinedType.Boolean:\n      return <EditBooleanInput node={node} onChange={onChange} />;\n    case RefinedType.Date:\n      return <EditDateInput node={node} onChange={onChange} />;\n    case RefinedType.Null:\n      throw Error(\"Impossible\");\n    case RefinedType.Number:\n      return <EditNumberInput node={node} onChange={onChange} />;\n    case RefinedType.Object:\n      return null;\n    case RefinedType.String:\n      return <EditStringInput node={node} onChange={onChange} />;\n  }\n}\ntype EditNumberInputProps = {\n  node: TNumberNode;\n  onChange(node: TNode): void;\n};\nfunction EditNumberInput({ node, onChange }: EditNumberInputProps) {\n  return (\n    <TextField\n      autoFocus\n      margin=\"dense\"\n      id=\"name\"\n      label=\"Initial Value\"\n      type=\"number\"\n      value={node.value}\n      onChange={(event) => {\n        onChange({\n          ...node,\n          value: !isNaN(Number(event.target.value))\n            ? Number(event.target.value)\n            : node.value,\n        });\n      }}\n      fullWidth\n    />\n  );\n}\n\ntype EditDateInputProps = {\n  node: TDateNode;\n  onChange(node: TNode): void;\n};\nfunction EditDateInput({ node, onChange }: EditDateInputProps) {\n  return (\n    <KeyboardDatePicker\n      disableToolbar\n      variant=\"inline\"\n      format=\"MM/dd/yyyy\"\n      margin=\"normal\"\n      label=\"Initial Date\"\n      value={node.date}\n      onChange={(date: Date | null) => {\n        onChange({\n          ...node,\n          date: date ?? new Date(),\n        });\n      }}\n      KeyboardButtonProps={{\n        \"aria-label\": \"change date\",\n      }}\n    />\n  );\n}\ntype EditBooleanInputProps = {\n  node: TBooleanNode;\n  onChange(node: TNode): void;\n};\nfunction EditBooleanInput({ node, onChange }: EditBooleanInputProps) {\n  return (\n    <FormControl>\n      <FormLabel component=\"legend\">Initial value</FormLabel>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={node.value}\n            onChange={(event) => {\n              onChange({\n                ...node,\n                value: event.target.checked,\n              });\n            }}\n          />\n        }\n        label={node.value ? \"yes\" : \"no\"}\n      />\n    </FormControl>\n  );\n}\ntype EditStringInputProps = {\n  node: TStringNode;\n  onChange(node: TNode): void;\n};\nfunction EditStringInput({ node, onChange }: EditStringInputProps) {\n  return (\n    <TextField\n      autoFocus\n      margin=\"dense\"\n      id=\"name\"\n      label=\"Initial Value\"\n      type=\"string\"\n      value={node.value}\n      onChange={(event) => {\n        onChange({\n          ...node,\n          value: event.target.value,\n        });\n      }}\n      fullWidth\n    />\n  );\n}\n","import Filter1OutlinedIcon from \"@material-ui/icons/Filter1Outlined\";\nimport FolderOpenOutlinedIcon from \"@material-ui/icons/FolderOpenOutlined\";\nimport HelpOutlineOutlinedIcon from \"@material-ui/icons/HelpOutlineOutlined\";\nimport ListOutlinedIcon from \"@material-ui/icons/ListOutlined\";\nimport React from \"react\";\nimport { RefinedType } from \"../utils/normalization\";\nimport SubjectOutlinedIcon from \"@material-ui/icons/SubjectOutlined\";\nimport TodayOutlinedIcon from \"@material-ui/icons/TodayOutlined\";\nimport ToggleOnOutlinedIcon from \"@material-ui/icons/ToggleOnOutlined\";\nimport { useDecodedDataState } from \"./CardViewRoot\";\n\nfunction NodeTypeIcon(props: { nodeKey: string }) {\n  const { store } = useDecodedDataState();\n  const node = store.nodes[props.nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return <ToggleOnOutlinedIcon fontSize=\"small\" />;\n    case RefinedType.Date:\n      return <TodayOutlinedIcon fontSize=\"small\" />;\n    case RefinedType.List:\n      return <ListOutlinedIcon fontSize=\"small\" />;\n    case RefinedType.Null:\n      return <HelpOutlineOutlinedIcon fontSize=\"small\" />;\n    case RefinedType.Number:\n      return <Filter1OutlinedIcon fontSize=\"small\" />;\n    case RefinedType.Object:\n      return <FolderOpenOutlinedIcon fontSize=\"small\" />;\n    case RefinedType.String:\n      return <SubjectOutlinedIcon fontSize=\"small\" />;\n  }\n}\n\nexport default NodeTypeIcon;\n","import { RefinedType, Store, StoreKey } from \"../utils/normalization\";\nimport { useDecodedDataState } from \"./CardViewRoot\";\nimport { date2HumanValue } from \"./DateNodeCardView\";\n\ntype FilterFn = (value: string) => boolean;\n\nexport default function useSearchTextOnNodeRecursively(\n  searchValue: string,\n): FilterFn {\n  const { store } = useDecodedDataState();\n  return function searchMatches(key: string) {\n    if (searchValue === \"\") {\n      return true;\n    }\n    return searchTextOnNodeRecursively(store, key, searchValue.toLocaleLowerCase());\n  };\n}\n\nfunction searchTextOnNodeRecursively(\n  store: Store,\n  startKey: StoreKey,\n  searchValue: string,\n): boolean {\n  const node = store.nodes[startKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return false;\n    case RefinedType.Date:\n      return date2HumanValue(node.date).toLocaleLowerCase().includes(searchValue);\n    case RefinedType.List:\n      return node.children.some((key) =>\n        searchTextOnNodeRecursively(store, key, searchValue),\n      );\n    case RefinedType.Null:\n      return searchValue === \"null\";\n    case RefinedType.Number:\n      return node.value.toString().toLocaleLowerCase().includes(searchValue);\n    case RefinedType.Object:\n      return node.fields.some(\n        (field) =>\n          field.name.toLocaleLowerCase().includes(searchValue) ||\n          searchTextOnNodeRecursively(store, field.value, searchValue),\n      );\n    case RefinedType.String:\n      return node.value.toLocaleLowerCase().includes(searchValue);\n  }\n}\n","import React, { useState } from \"react\";\nimport {\n  RefinedType,\n  TListNode,\n  TNode,\n  defaultNodeValue,\n} from \"../utils/normalization\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Button from \"@material-ui/core/Button\";\nimport CardView from \"./CardView\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport EditValueInput from \"./EditValueNodeInput\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport NodeTypeIcon from \"./NodeTypeIcon\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Select from \"@material-ui/core/Select\";\nimport { useDecodedDataState } from \"./CardViewRoot\";\nimport useSearchTextOnNodeRecursively from \"./useSearchTextOnNodeRecursively\";\n\nexport default function ListNodeCardView(props: { node: TListNode }) {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const searchMatches = useSearchTextOnNodeRecursively(searchValue);\n  return (\n    <div>\n      <div onClick={(e) => e.stopPropagation()}>\n        {props.node.children.length > 7 ? (\n          <FormControl>\n            <Input\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              placeholder=\"Search ...\"\n              startAdornment={\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n        ) : null}\n      </div>\n      <List>\n        {props.node.children.filter(searchMatches).map((key) => (\n          <ListItem button>\n            <ListItemIcon>\n              <NodeTypeIcon nodeKey={key} />\n            </ListItemIcon>\n            <ListItemText primary={<CardView nodeKey={key} />} />\n          </ListItem>\n        ))}\n        <ListItem>\n          <ListItemText\n            onClick={(e) => e.stopPropagation()}\n            primary={<NewListItemDialogButton parentNode={props.node} />}\n          />\n        </ListItem>\n      </List>\n    </div>\n  );\n}\n\nfunction NewListItemDialogButton(props: { parentNode: TListNode }) {\n  const { store, updateNodes } = useDecodedDataState();\n  const templateNode =\n    props.parentNode.children.length > 0\n      ? defaultNodeValue(\n          store.nodes[props.parentNode.children[0]].type,\n          props.parentNode,\n        )\n      : null;\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [valueNode, setValueNode] = useState<TNode | null>(templateNode);\n  if (updateNodes == null) {\n    return null;\n  }\n  return (\n    <>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => setIsDialogOpen(true)}\n        startIcon={<AddIcon />}\n      >\n        Add{\" \"}\n      </Button>\n      <Dialog\n        open={isDialogOpen}\n        onClose={() => setIsDialogOpen(false)}\n        aria-labelledby=\"new-field-dialog-title\"\n      >\n        <DialogTitle id=\"new-field-dialog-title\">Add New List Item</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            All items on a list must have the same type.\n          </DialogContentText>\n          {!templateNode && (\n            <FormControl>\n              <InputLabel id=\"select-type-label\">Type</InputLabel>\n              <Select\n                labelId=\"select-type-label\"\n                value={valueNode?.type ?? \"\"}\n                onChange={(event) => {\n                  const newType: RefinedType = event.target.value as RefinedType;\n                  setValueNode(defaultNodeValue(newType, props.parentNode));\n                }}\n                fullWidth\n              >\n                <MenuItem value={RefinedType.Boolean}>Boolean</MenuItem>\n                <MenuItem value={RefinedType.Date}>Date</MenuItem>\n                <MenuItem value={RefinedType.Number}>Number</MenuItem>\n                <MenuItem value={RefinedType.Object}>Object</MenuItem>\n                <MenuItem value={RefinedType.String}>String</MenuItem>\n              </Select>\n            </FormControl>\n          )}\n          <EditValueInput node={valueNode} onChange={setValueNode} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsDialogOpen(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              if (valueNode !== null) {\n                const newParentnode = {\n                  ...props.parentNode,\n                  children: [...props.parentNode.children, valueNode.key],\n                };\n                updateNodes([valueNode, newParentnode]);\n              }\n              setValueNode(templateNode);\n              setIsDialogOpen(false);\n            }}\n            color=\"primary\"\n          >\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n  RefinedType,\n  StoreKey,\n  TObejctField,\n  TObjectNode,\n} from \"../utils/normalization\";\n\nimport BlurredBar from \"../components/BlurredBar\";\nimport Button from \"@material-ui/core/Button\";\nimport CardView from \"./CardView\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport EditValueNodeInput from \"./EditValueNodeInput\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport NodeTypeIcon from \"./NodeTypeIcon\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useDecodedDataState } from \"./CardViewRoot\";\nimport { useTheme } from \"@material-ui/core\";\n\n// replace this generic grow to show with something better by type\n// Maybe open a preview Dialog ?\n// when entering a folder put a dark background on top of parent?\ntype Props = {\n  field: {\n    name: string;\n    value: StoreKey;\n  };\n  parentNode: TObjectNode;\n};\nexport default function ObjectFieldNodeCardView({ field, parentNode }: Props) {\n  const theme = useTheme();\n  const [isSelected, setIsSelected] = useState(false);\n  const isSmall = useIsValueSmall(field.value);\n  const fillLine = !isSmall && isSelected;\n  return (\n    <Grid\n      item\n      xs={12}\n      sm={fillLine ? 12 : 6}\n      md={fillLine ? 12 : 4}\n      style={{ position: \"relative\" }}\n    >\n      <Paper\n        style={{ padding: theme.spacing(1) }}\n        onClick={(e) => {\n          e.stopPropagation();\n          setIsSelected((v) => !v);\n        }}\n        variant=\"outlined\"\n      >\n        <Typography variant=\"body1\" display=\"inline\">\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <NodeTypeIcon nodeKey={field.value} />\n            <span style={{ width: 8 }} />\n            {field.name}\n          </div>\n        </Typography>\n        {isSelected && (\n          <span\n            onClick={(e) => e.stopPropagation()}\n            style={{ position: \"absolute\", top: 16, right: 16 }}\n          >\n            <EditFieldDialog field={field} parentNode={parentNode} />\n          </span>\n        )}\n        {isSelected ? (\n          <div onClick={(e) => e.stopPropagation()}>\n            <CardView nodeKey={field.value} />\n          </div>\n        ) : (\n          <BlurredBar style={{ width: \"80%\", height: 12, marginTop: 6 }} />\n        )}\n      </Paper>\n    </Grid>\n  );\n}\n\nfunction useIsValueSmall(nodeKey: string): boolean {\n  const { store } = useDecodedDataState();\n  const node = store.nodes[nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return true;\n    case RefinedType.Date:\n      return true;\n    case RefinedType.List:\n      return false;\n    case RefinedType.Null:\n      return true;\n    case RefinedType.Number:\n      return node.value.toString().length < 24;\n    case RefinedType.Object:\n      return false;\n    case RefinedType.String:\n      return node.value.length < 24;\n  }\n}\n\ntype EditFieldDialogProps = {\n  field: TObejctField;\n  parentNode: TObjectNode;\n};\nfunction EditFieldDialog({ field, parentNode }: EditFieldDialogProps) {\n  const theme = useTheme();\n  const { store, updateNodes } = useDecodedDataState();\n  const [newFieldName, setNewFieldName] = useState(field.name);\n  const oldValueNode = store.nodes[field.value];\n  const [valueNode, setValueNode] = useState(oldValueNode);\n  const [isEditting, setIsEditting] = useState(false);\n\n  // refresh if new values are passed.\n  useEffect(() => {\n    setNewFieldName(field.name);\n    setValueNode(oldValueNode);\n  }, [field, parentNode, oldValueNode]);\n  if (updateNodes === null) {\n    return null;\n  }\n  return (\n    <>\n      <IconButton onClick={(e) => setIsEditting(true)} size=\"small\">\n        <CreateIcon fontSize=\"small\" />\n      </IconButton>\n      <Dialog\n        open={isEditting}\n        onClose={() => setIsEditting(false)}\n        aria-labelledby=\"edit-dialog-title\"\n        fullWidth\n        maxWidth=\"xs\"\n      >\n        <DialogTitle id=\"edit-dialog-title\">Edit</DialogTitle>\n        <DialogContent>\n          <TextField\n            label=\"Name\"\n            variant=\"outlined\"\n            type=\"string\"\n            autoFocus\n            value={newFieldName}\n            onChange={(event) => setNewFieldName(event.target.value)}\n            fullWidth\n          />\n          <span style={{ width: theme.spacing(1) }} />\n          <EditValueNodeInput node={valueNode} onChange={setValueNode} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsEditting(false)}>Cancel</Button>\n          <Button\n            onClick={() => {\n              const newParentNode = {\n                ...parentNode,\n                fields: parentNode.fields.map((originalField) =>\n                  originalField.value !== field.value\n                    ? originalField\n                    : { ...originalField, name: newFieldName },\n                ),\n              };\n              updateNodes([valueNode, newParentNode]);\n              setIsEditting(false);\n            }}\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  RefinedType,\n  TNode,\n  TObjectNode,\n  defaultNodeValue,\n} from \"../utils/normalization\";\n\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport EditValueNodeInput from \"./EditValueNodeInput\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Input from \"@material-ui/core/Input\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport ObjectFieldNodeCardView from \"./ObjectFieldNodeCardView\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Select from \"@material-ui/core/Select\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useDecodedDataState } from \"./CardViewRoot\";\nimport useSearchTextOnNodeRecursively from \"./useSearchTextOnNodeRecursively\";\nimport { useTheme } from \"@material-ui/core\";\n\ntype Props = { node: TObjectNode };\nexport default function ObjectNodeCardView({ node }: Props) {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const searchMatches = useSearchTextOnNodeRecursively(searchValue);\n  const theme = useTheme();\n\n  return (\n    <div>\n      <div onClick={(e) => e.stopPropagation()}>\n        {node.fields.length > 7 ? (\n          <FormControl>\n            <Input\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              placeholder=\"Search ...\"\n              startAdornment={\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n        ) : null}\n      </div>\n      <div style={{ height: theme.spacing(2) }} />\n      <Grid container spacing={1}>\n        {node.fields\n          .filter(\n            (field) =>\n              field.name\n                .toLocaleLowerCase()\n                .includes(searchValue.toLocaleLowerCase()) ||\n              searchMatches(field.value),\n          )\n          .map((field) => (\n            <ObjectFieldNodeCardView\n              field={field}\n              parentNode={node}\n              key={field.value}\n            />\n          ))}\n        <Grid item xs={12} sm={6} md={4} style={{ display: \"flex\" }}>\n          <NewFieldDialogButton parentNode={node} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nfunction NewFieldDialogButton(props: { parentNode: TObjectNode }) {\n  const theme = useTheme();\n  const { updateNodes } = useDecodedDataState();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [valueNode, setValueNode] = useState<TNode | null>(null);\n  const [fieldName, setFieldName] = useState<string>(\"\");\n  if (updateNodes === null) {\n    return null;\n  }\n  return (\n    <span onClick={(e) => e.stopPropagation()} style={{ display: \"flex\", flex: 1 }}>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"large\"\n        fullWidth\n        onClick={(e) => {\n          setIsDialogOpen(true);\n        }}\n        startIcon={<AddIcon />}\n      >\n        Add\n      </Button>\n      <Dialog\n        open={isDialogOpen}\n        onClose={() => setIsDialogOpen(false)}\n        aria-labelledby=\"new-field-dialog-title\"\n        fullWidth\n        maxWidth=\"xs\"\n      >\n        <DialogTitle id=\"new-field-dialog-title\">Add New Field</DialogTitle>\n        <DialogContent>\n          <div style={{ display: \"flex\" }}>\n            <TextField\n              label=\"Name\"\n              variant=\"outlined\"\n              type=\"string\"\n              autoFocus\n              value={fieldName}\n              onChange={(event) => setFieldName(event.target.value)}\n              fullWidth\n            />\n            <span style={{ width: theme.spacing(1) }} />\n            <FormControl variant=\"outlined\" style={{ minWidth: 120 }}>\n              <InputLabel>Type</InputLabel>\n              <Select\n                label=\"Type\"\n                value={valueNode?.type ?? \"\"}\n                onChange={(event) => {\n                  const newType: RefinedType = event.target.value as RefinedType;\n                  setValueNode(defaultNodeValue(newType, props.parentNode));\n                }}\n              >\n                <MenuItem value={RefinedType.List}>List</MenuItem>\n                <MenuItem value={RefinedType.Boolean}>Question</MenuItem>\n                <MenuItem value={RefinedType.Date}>Date</MenuItem>\n                <MenuItem value={RefinedType.Number}>Number</MenuItem>\n                <MenuItem value={RefinedType.Object}>Folder</MenuItem>\n                <MenuItem value={RefinedType.String}>Text</MenuItem>\n              </Select>\n            </FormControl>\n          </div>\n          <div style={{ height: theme.spacing(1) }} />\n          <EditValueNodeInput node={valueNode} onChange={setValueNode} />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setIsDialogOpen(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            onClick={() => {\n              if (valueNode) {\n                const newParentNode: TObjectNode = {\n                  ...props.parentNode,\n                  fields: [\n                    ...props.parentNode.fields,\n                    { name: fieldName, value: valueNode.key },\n                  ],\n                };\n                updateNodes([valueNode, newParentNode]);\n              }\n              setIsDialogOpen(false);\n              setValueNode(null);\n              setFieldName(\"\");\n            }}\n            color=\"primary\"\n          >\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </span>\n  );\n}\n","import {\n  RefinedType,\n  TBooleanNode,\n  TNullNode,\n  TNumberNode,\n  TStringNode,\n} from \"../utils/normalization\";\n\nimport DateNodeCardView from \"./DateNodeCardView\";\nimport ListNodeCardView from \"./ListNodeCardView\";\nimport ObjectNodeCardView from \"./ObjectNodeCardView\";\nimport React from \"react\";\nimport { useDecodedDataState } from \"./CardViewRoot\";\n\ntype Props = { nodeKey: string };\nexport default function CardView({ nodeKey }: Props) {\n  const { store } = useDecodedDataState();\n  const node = store.nodes[nodeKey];\n  switch (node.type) {\n    case RefinedType.Boolean:\n      return <BooleanNodeCardView node={node} />;\n    case RefinedType.Date:\n      return <DateNodeCardView node={node} />;\n    case RefinedType.List:\n      return <ListNodeCardView node={node} />;\n    case RefinedType.Null:\n      return <NullNodeCardView node={node} />;\n    case RefinedType.Number:\n      return <NumberNodeCardView node={node} />;\n    case RefinedType.Object:\n      return <ObjectNodeCardView node={node} />;\n    case RefinedType.String:\n      return <StringNodeCardView node={node} />;\n  }\n}\n\nfunction StringNodeCardView(props: { node: TStringNode }) {\n  return <span>{props.node.value}</span>;\n}\nfunction NumberNodeCardView(props: { node: TNumberNode }) {\n  return <span>{props.node.value}</span>;\n}\nfunction BooleanNodeCardView(props: { node: TBooleanNode }) {\n  return <span>{props.node.value ? \"Yes\" : \"No\"}</span>;\n}\nfunction NullNodeCardView(props: { node: TNullNode }) {\n  return <span />;\n}\n","/**\n * ArrayBuffer to String UTF 16 and 8 helpers\n */\nexport function arraybuffer2stringUTF16(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\n\nexport function string2arraybufferUTF16(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  const bufView = new Uint16Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\nexport function arraybuffer2stringUTF8(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint8Array(buf) as any);\n}\n\nexport function string2arraybufferUTF8(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\n/**\n * Base 64 <-> array buffer UTF 16 and 8\n */\nexport function arraybuffer2base64UTF8(buf: ArrayBuffer): string {\n  return btoaUTF8(arraybuffer2stringUTF8(buf));\n}\n\nexport function base642arraybufferUTF8(str64: string): ArrayBuffer {\n  return string2arraybufferUTF8(atobUTF8(str64));\n}\n\nexport function arraybuffer2base64UTF16(buf: ArrayBuffer): string {\n  return btoaUTF16(arraybuffer2stringUTF16(buf));\n}\n\nexport function base642arraybufferUTF16(str64: string): ArrayBuffer {\n  return string2arraybufferUTF16(atobUTF16(str64));\n}\n\n/**\n * Base 64  <-> String UTF 16 and 8\n */\n\nfunction btoaUTF16(str: string): string {\n  const aUTF16CodeUnits = new Uint16Array(str.length);\n  Array.prototype.forEach.call(aUTF16CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF16CodeUnits.buffer));\n}\n\nfunction atobUTF16(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF16(aBinaryView.buffer);\n}\n\nfunction btoaUTF8(str: string): string {\n  const aUTF8CodeUnits = new Uint8Array(str.length);\n  Array.prototype.forEach.call(aUTF8CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF8CodeUnits.buffer));\n}\n\nfunction atobUTF8(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF8(aBinaryView.buffer);\n}\n","/**\n * Set of methods used to encrypt and decrypt the data, all operating on base 64\n * TODO: remove redundant conversions for more direct mappings.\n */\n\nimport { useEffect, useState } from \"react\";\nimport {\n  string2arraybufferUTF16,\n  arraybuffer2stringUTF16,\n  arraybuffer2base64UTF8,\n  base642arraybufferUTF8,\n  arraybuffer2base64UTF16,\n  base642arraybufferUTF16,\n} from \"./data-manipulation\";\n\n/**\n * Encrypts the data together with iv on base 64 format\n * @param {string} plainText: plain UTF 16 text\n * @param {string} key: encrypted on base 64 format\n */\nexport async function encrypt(plainText: string, key: string): Promise<string> {\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const cypher = await window.crypto.subtle.encrypt(\n    { name: \"AES-GCM\", iv: iv },\n    cryptoKey,\n    string2arraybufferUTF16(plainText),\n  );\n\n  // join iv and message\n  return `${arraybuffer2base64UTF8(iv)}!${arraybuffer2base64UTF16(cypher)}`;\n}\n\n/**\n * Decrypts the data to plain text\n * @param {string} data: encrypted on base 64 format\n * @param {string} key: encrypted on base 64 format\n */\nexport async function decrypt(data: string, key: string): Promise<string> {\n  // split iv from message\n  const [iv, encryptedMessage] = data.split(\"!\");\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const decryptedData = await window.crypto.subtle.decrypt(\n    { name: \"AES-GCM\", iv: base642arraybufferUTF8(iv) },\n    cryptoKey,\n    base642arraybufferUTF16(encryptedMessage),\n  );\n  return arraybuffer2stringUTF16(decryptedData);\n}\n\n/**\n * Creates an unique base 64 key for all encryptions\n */\nexport async function createKey(): Promise<string> {\n  const key = await window.crypto.subtle.generateKey(\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const exportedKey = await window.crypto.subtle.exportKey(\"raw\", key);\n  return arraybuffer2base64UTF16(exportedKey);\n}\n\nexport function useDataEncryptionInSync(\n  encryptionKey: string,\n  initialData: string,\n): {\n  decodedData: string | null;\n  setDecodedData: (decodedData: string) => void;\n  encryptedData: string | null;\n  isEncrypting: boolean;\n  isDecrypting: boolean;\n} {\n  const isProbablyJson = initialData[0] === \"{\";\n  const [encryptedData, setEncryptedData] = useState<string | null>(\n    isProbablyJson ? null : initialData,\n  );\n  const [decodedData, setDecodedData] = useState<string | null>(\n    isProbablyJson ? initialData : null,\n  );\n  const [isEncrypting, setIsEncrypting] = useState(false);\n  const [isDecrypting, setIsDecrypting] = useState(false);\n\n  // keep encoded data always decoded\n  useEffect(() => {\n    if (encryptedData == null) {\n      return;\n    }\n    setIsDecrypting(true);\n    decrypt(encryptedData, encryptionKey).then((message) => {\n      setDecodedData(message);\n      setIsDecrypting(false);\n    });\n  }, [encryptedData, encryptionKey]);\n\n  // keep encoded file always ready to download\n  useEffect(() => {\n    if (decodedData == null) {\n      return;\n    }\n    setIsEncrypting(true);\n    encrypt(decodedData, encryptionKey).then((cypher) => {\n      setEncryptedData(cypher);\n      setIsEncrypting(false);\n    });\n  }, [decodedData, encryptionKey]);\n  return {\n    decodedData,\n    setDecodedData,\n    encryptedData,\n    isEncrypting,\n    isDecrypting,\n  };\n}\n","import React, { CSSProperties } from \"react\";\n\nimport { useTheme } from \"@material-ui/core\";\n\ntype Props = {\n  style?: CSSProperties;\n};\nexport default function BlurredBar({ style }: Props) {\n  const theme = useTheme();\n  return (\n    <div\n      style={{\n        backgroundColor: theme.palette.text.primary,\n        opacity: 0.1,\n        filter: \"blur(4px)\",\n        ...style,\n      }}\n    />\n  );\n}\n"],"sourceRoot":""}