{"version":3,"sources":["utils/data-manipulation.ts","utils/encryption.ts","pages/memory/cards/CardInfo.tsx","pages/memory/cards/CardRoot.tsx","pages/memory/create/MemoryVaultCreateForm.tsx","pages/memory/create/DragAndDrop.tsx","pages/memory/cards/PreviewCardRoot.tsx","pages/memory/MemoryPage.tsx"],"names":["arraybuffer2stringUTF16","buf","String","fromCharCode","apply","Uint16Array","string2arraybufferUTF16","str","bufffer","ArrayBuffer","length","bufView","i","strLen","charCodeAt","arraybuffer2stringUTF8","Uint8Array","arraybuffer2base64UTF8","aUTF8CodeUnits","Array","prototype","forEach","call","_","idx","arr","btoa","buffer","btoaUTF8","base642arraybufferUTF8","str64","string2arraybufferUTF8","sBinaryString","atob","aBinaryView","atobUTF8","arraybuffer2base64UTF16","aUTF16CodeUnits","btoaUTF16","base642arraybufferUTF16","atobUTF16","plainText","key","a","iv","window","crypto","getRandomValues","subtle","importKey","name","cryptoKey","encrypt","cypher","data","split","encryptedMessage","decrypt","decryptedData","createKey","generateKey","exportKey","exportedKey","isKeyValid","test","useDataAsStore","decodedData","encryptionKey","title","useState","store","setStore","useEffect","normalizeRoot","updateNodes","nodes","newNodes","node","newStore","rootNode","updated","Date","useDataDecryption","initialData","setDecryptedData","hasFailed","setHasFailed","then","catch","encryptData","onComplete","denormalizeRoot","CardInfo","isKeyHidden","setIsKeyHidden","useDecodedDataContext","style","maxWidth","variant","subheader","placement","color","gutterBottom","onDoubleClick","v","height","width","marginTop","display","container","spacing","item","xs","date2HumanValue","created","size","href","download","onClick","element","document","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","CardRoot","children","isReadOnly","initialValues","onClose","theme","useTheme","draggableData","useDraggableItemsProvider","Provider","value","position","padding","right","top","arrow","aria-label","nodeKey","DataOptions","DragAndDrop","onDrop","event","preventDefault","dataTransfer","files","onDragOver","onDragEnter","MemoryVaultCreateForm","standardProposal","onSubmit","onChange","onCancel","initialCardData","cardData","setCardData","CreateCardTitleInput","setTitle","newTitle","newCardData","CreateCardKeyInput","setEncryptionKey","newEncryptionKey","CreateCardDataSection","setInitialData","newInitialData","Typography","align","Button","fullWidth","disabled","startIcon","Add","TextField","margin","label","autoComplete","e","target","autoFocus","file","readFile","error","required","type","InputProps","endAdornment","InputAdornment","Tooltip","IconButton","Cached","fontSize","expanded","setExpanded","STANDARD","dataOption","selectDataOption","encryptedData","setEncryptedData","alignItems","justifyContent","aria-expanded","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","FormLabel","component","RadioGroup","CUSTOM","EMPTY","FormControlLabel","control","Radio","version","HelpOutline","textTransform","outlineWidth","outlineStyle","outlineColor","palette","secondary","main","GetApp","Done","hidden","onDone","reader","FileReader","onloadend","result","readAsText","PreviewCardRoot","Paper","overflow","backgroundColor","background","default","opacity","left","bottom","zIndex","CardView","QUERY","gql","MemoryPage","cardFromUrl","search","useLocation","params","queryString","parse","id","uuid","isOpen","readOnly","cardProps","join","useCardFromUrl","cards","setCards","previewCard","setPreviewCard","allCards","isCreating","setIsCreating","useQuery","MemoryPageLayout","leftNav","List","map","card","ListItem","button","oldCards","c","ListItemIcon","Drafts","Mail","ListItemText","primary","primaryTypographyProps","textOverflow","secondaryTypographyProps","Divider","newCard","old","filter","Grid","flex","sm","md","lg","borderRightColor","divider","borderRightWidth","borderRightStyle"],"mappings":"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","file":"static/js/8.7317bee9.chunk.js","sourcesContent":["/**\n * ArrayBuffer to String UTF 16 and 8 helpers\n */\nexport function arraybuffer2stringUTF16(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint16Array(buf) as any);\n}\n\nexport function string2arraybufferUTF16(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n  const bufView = new Uint16Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\nexport function arraybuffer2stringUTF8(buf: ArrayBuffer): string {\n  return String.fromCharCode.apply(null, new Uint8Array(buf) as any);\n}\n\nexport function string2arraybufferUTF8(str: string): ArrayBuffer {\n  const bufffer = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(bufffer);\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufffer;\n}\n\n/**\n * Base 64 <-> array buffer UTF 16 and 8\n */\nexport function arraybuffer2base64UTF8(buf: ArrayBuffer): string {\n  return btoaUTF8(arraybuffer2stringUTF8(buf));\n}\n\nexport function base642arraybufferUTF8(str64: string): ArrayBuffer {\n  return string2arraybufferUTF8(atobUTF8(str64));\n}\n\nexport function arraybuffer2base64UTF16(buf: ArrayBuffer): string {\n  return btoaUTF16(arraybuffer2stringUTF16(buf));\n}\n\nexport function base642arraybufferUTF16(str64: string): ArrayBuffer {\n  return string2arraybufferUTF16(atobUTF16(str64));\n}\n\n/**\n * Base 64  <-> String UTF 16 and 8\n */\n\nfunction btoaUTF16(str: string): string {\n  const aUTF16CodeUnits = new Uint16Array(str.length);\n  Array.prototype.forEach.call(aUTF16CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF16CodeUnits.buffer));\n}\n\nfunction atobUTF16(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF16(aBinaryView.buffer);\n}\n\nfunction btoaUTF8(str: string): string {\n  const aUTF8CodeUnits = new Uint8Array(str.length);\n  Array.prototype.forEach.call(aUTF8CodeUnits, (_, idx, arr) => {\n    arr[idx] = str.charCodeAt(idx);\n  });\n  return btoa(arraybuffer2stringUTF8(aUTF8CodeUnits.buffer));\n}\n\nfunction atobUTF8(str64: string): string {\n  const sBinaryString = atob(str64);\n  const aBinaryView = new Uint8Array(sBinaryString.length);\n  Array.prototype.forEach.call(aBinaryView, (_, idx, arr) => {\n    arr[idx] = sBinaryString.charCodeAt(idx);\n  });\n  return arraybuffer2stringUTF8(aBinaryView.buffer);\n}\n","/**\n * Set of methods used to encrypt and decrypt the data, all operating on base 64\n * TODO: remove redundant conversions for more direct mappings.\n */\n\nimport { Store, TNode, denormalizeRoot, normalizeRoot } from \"./normalization\";\nimport {\n  arraybuffer2base64UTF16,\n  arraybuffer2base64UTF8,\n  arraybuffer2stringUTF16,\n  base642arraybufferUTF16,\n  base642arraybufferUTF8,\n  string2arraybufferUTF16,\n} from \"./data-manipulation\";\nimport { useEffect, useState } from \"react\";\n\n/**\n * Encrypts the data together with iv on base 64 format\n * @param {string} plainText: plain UTF 16 text\n * @param {string} key: encrypted on base 64 format\n */\nexport async function encrypt(plainText: string, key: string): Promise<string> {\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const cypher = await window.crypto.subtle.encrypt(\n    { name: \"AES-GCM\", iv: iv },\n    cryptoKey,\n    string2arraybufferUTF16(plainText),\n  );\n\n  // join iv and message\n  return `${arraybuffer2base64UTF8(iv)}!${arraybuffer2base64UTF16(cypher)}`;\n}\n\n/**\n * Decrypts the data to plain text\n * @param {string} data: encrypted on base 64 format\n * @param {string} key: encrypted on base 64 format\n */\nexport async function decrypt(data: string, key: string): Promise<string> {\n  // split iv from message\n  const [iv, encryptedMessage] = data.split(\"!\");\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    base642arraybufferUTF16(key),\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const decryptedData = await window.crypto.subtle.decrypt(\n    { name: \"AES-GCM\", iv: base642arraybufferUTF8(iv) },\n    cryptoKey,\n    base642arraybufferUTF16(encryptedMessage),\n  );\n  return arraybuffer2stringUTF16(decryptedData);\n}\n\n/**\n * Creates an unique base 64 key for all encryptions\n */\nexport async function createKey(): Promise<string> {\n  const key = await window.crypto.subtle.generateKey(\n    { name: \"AES-GCM\", length: 256 },\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n  const exportedKey = await window.crypto.subtle.exportKey(\"raw\", key);\n  return arraybuffer2base64UTF16(exportedKey);\n}\n\nexport function isKeyValid(key: string): boolean {\n  const base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n  return base64regex.test(key) && key.length === 44;\n}\n\nexport function useDataAsStore(\n  decodedData: string | null,\n  encryptionKey?: string,\n  title?: string,\n): {\n  store: Store;\n  updateNodes: (nodes: TNode[]) => void;\n} | null {\n  const [store, setStore] = useState<Store | null>(null);\n  useEffect(() => {\n    if (decodedData === null) {\n      return;\n    }\n    setStore(normalizeRoot(decodedData, { title, encryptionKey }));\n  }, [decodedData, encryptionKey, title]);\n\n  if (store === null) {\n    return null;\n  }\n\n  return {\n    store,\n    updateNodes: (nodes: TNode[]) => {\n      const newNodes = { ...store.nodes };\n      nodes.forEach((node) => (newNodes[node.key] = node));\n      const newStore = {\n        rootNode: {\n          ...store.rootNode,\n          updated: new Date(),\n        },\n        nodes: newNodes,\n      };\n      setStore(newStore);\n    },\n  };\n}\n\nexport function useDataDecryption(initialData: string, encryptionKey: string) {\n  const [decryptedData, setDecryptedData] = useState<string | null>(null);\n  const [hasFailed, setHasFailed] = useState<boolean>(false);\n  useEffect(() => {\n    const isDecryptedAlready = initialData[0] === \"{\";\n    if (isDecryptedAlready) {\n      setDecryptedData(initialData);\n      setHasFailed(false);\n    } else {\n      decrypt(initialData, encryptionKey)\n        .then((data) => {\n          setDecryptedData(data);\n          setHasFailed(false);\n        })\n        .catch(() => {\n          setHasFailed(true);\n          setDecryptedData(\"{}\");\n        });\n    }\n  }, [initialData, encryptionKey]);\n  return { decryptedData, hasFailed };\n}\n\nexport function useDataEncryption(store: Store) {\n  const [encryptedData, setEncryptedData] = useState<string | null>(null);\n  useEffect(() => {\n    encryptData(store, setEncryptedData);\n  }, [store, store.rootNode.encryptionKey]);\n  return encryptedData;\n}\n\nexport function encryptData(\n  store: Store,\n  onComplete: (encryptedData: string) => void,\n) {\n  const plainText = denormalizeRoot(store);\n  encrypt(plainText, store.rootNode.encryptionKey).then(onComplete);\n}\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Grid,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport BlurredBar from \"../../../components/BlurredBar\";\nimport { date2HumanValue } from \"./Date/DateNodeCardView\";\nimport { encryptData } from \"../../../utils/encryption\";\nimport useDecodedDataContext from \"../useDecodedDataContext\";\n\nexport default function CardInfo() {\n  const [isKeyHidden, setIsKeyHidden] = useState(true);\n  const { store } = useDecodedDataContext();\n  return (\n    <Card style={{ maxWidth: 400 }} variant=\"outlined\">\n      <CardHeader\n        title={store.rootNode.title}\n        subheader={\n          <Tooltip title=\"double click to show\" placement=\"top\">\n            <Typography\n              variant=\"body2\"\n              color=\"textSecondary\"\n              gutterBottom\n              onDoubleClick={() => setIsKeyHidden((v) => !v)}\n            >\n              {!isKeyHidden ? (\n                store.rootNode.encryptionKey\n              ) : (\n                <BlurredBar\n                  style={{\n                    height: 12,\n                    width: \"100%\",\n                    marginTop: 8,\n                    display: \"block\",\n                  }}\n                />\n              )}\n            </Typography>\n          </Tooltip>\n        }\n      />\n      <CardContent>\n        <Grid container spacing={1}>\n          <Grid item xs={6}>\n            <Typography variant=\"body2\">Created</Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n              {date2HumanValue(store.rootNode.created)}\n            </Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography variant=\"body2\">Last Updated</Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n              {date2HumanValue(store.rootNode.updated)}\n            </Typography>\n          </Grid>\n        </Grid>\n      </CardContent>\n      <CardActions>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          href={`data:text/plain;charset=base64,${store.rootNode.encryptionKey}`}\n          download=\"key.ish\"\n        >\n          Save Key\n        </Button>\n        <Button\n          size=\"small\"\n          color=\"primary\"\n          onClick={() => {\n            encryptData(store, (data) => {\n              const element = document.createElement(\"a\");\n              element.setAttribute(\n                \"href\",\n                \"data:text/plain;charset=base64,\" + encodeURIComponent(data),\n              );\n              element.setAttribute(\"download\", \"data.ish\");\n              element.style.display = \"none\";\n              document.body.appendChild(element);\n              element.click();\n              document.body.removeChild(element);\n            });\n          }}\n        >\n          Save Data\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import { IconButton, Paper, Tooltip, useTheme } from \"@material-ui/core\";\nimport { useDataAsStore, useDataDecryption } from \"../../../utils/encryption\";\nimport useDraggableItemsProvider, {\n  DraggableItemsContext,\n} from \"../useDraggableItemsContext\";\n\nimport CardInfo from \"./CardInfo\";\nimport CardView from \"./CardView\";\nimport { Close } from \"@material-ui/icons\";\nimport { DecodedDataContext } from \"../useDecodedDataContext\";\nimport React from \"react\";\nimport { Store } from \"../../../utils/normalization\";\n\nexport type CardDataProps = {\n  children?(store: Store): void;\n  title?: string;\n  isReadOnly?: boolean;\n  initialValues: {\n    encryptionKey: string;\n    initialData: string;\n  };\n};\ntype Props = CardDataProps & {\n  onClose: () => void;\n};\nexport default function CardRoot({\n  children,\n  title,\n  isReadOnly = false,\n  initialValues: { encryptionKey, initialData },\n  onClose,\n}: Props) {\n  const theme = useTheme();\n  const draggableData = useDraggableItemsProvider();\n  const { decryptedData } = useDataDecryption(initialData, encryptionKey);\n  const data = useDataAsStore(decryptedData, encryptionKey, title);\n  if (!data) {\n    return null;\n  }\n  const { store, updateNodes } = data;\n  return (\n    <DraggableItemsContext.Provider value={draggableData}>\n      <DecodedDataContext.Provider\n        value={{ store, updateNodes: isReadOnly ? null : updateNodes }}\n      >\n        <Paper style={{ position: \"relative\", padding: theme.spacing(3) }}>\n          <div\n            style={{\n              position: \"absolute\",\n              right: theme.spacing(1),\n              top: theme.spacing(1),\n            }}\n          >\n            <Tooltip title=\"Did you save? Just checking\" arrow>\n              <IconButton aria-label=\"close card\" onClick={onClose}>\n                <Close />\n              </IconButton>\n            </Tooltip>\n          </div>\n          <CardInfo />\n          <div style={{ height: theme.spacing(3) }} />\n          <CardView nodeKey={store.rootNode.value} />\n          {children && children(store)}\n        </Paper>\n      </DecodedDataContext.Provider>\n    </DraggableItemsContext.Provider>\n  );\n}\n","import {\n  Add,\n  Cached,\n  Done,\n  ExpandLess,\n  ExpandMore,\n  GetApp,\n  HelpOutline,\n} from \"@material-ui/icons\";\nimport {\n  Button,\n  Collapse,\n  FormControlLabel,\n  FormLabel,\n  IconButton,\n  InputAdornment,\n  Radio,\n  RadioGroup,\n  TextField,\n  Tooltip,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { createKey, isKeyValid, useDataDecryption } from \"../../../utils/encryption\";\n\nimport { CardDataProps } from \"../cards/CardRoot\";\nimport DragAndDrop from \"./DragAndDrop\";\n\nenum DataOptions {\n  STANDARD = \"STANDARD\",\n  EMPTY = \"EMPTY\",\n  CUSTOM = \"CUSTOM\",\n}\ntype Props = {\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n  onChange(card: CardDataProps): void;\n  onSubmit(card: CardDataProps): void;\n  onCancel(): void;\n};\nexport default function MemoryVaultCreateForm({\n  standardProposal,\n  onSubmit,\n  onChange,\n  onCancel,\n}: Props) {\n  const theme = useTheme();\n  const initialCardData = {\n    title: \"\",\n    initialValues: {\n      encryptionKey: \"\",\n      initialData: standardProposal.data,\n    },\n  };\n  const [cardData, setCardData] = useState<CardDataProps>(initialCardData);\n\n  function setEncryptionKey(newEncryptionKey: string) {\n    const newCardData = {\n      ...cardData,\n      initialValues: {\n        ...cardData.initialValues,\n        encryptionKey: newEncryptionKey,\n      },\n    };\n    setCardData(newCardData);\n    onChange(newCardData);\n  }\n\n  function setInitialData(newInitialData: string) {\n    const newCardData = {\n      ...cardData,\n      initialValues: {\n        ...cardData.initialValues,\n        initialData: newInitialData,\n      },\n    };\n    setCardData(newCardData);\n    onChange(newCardData);\n  }\n\n  function setTitle(newTitle: string) {\n    const newCardData = { ...cardData, title: newTitle };\n    setCardData(newCardData);\n    onChange(newCardData);\n  }\n\n  const { hasFailed } = useDataDecryption(\n    cardData.initialValues.initialData,\n    cardData.initialValues.encryptionKey,\n  );\n  const { encryptionKey, initialData } = cardData.initialValues;\n  return (\n    <div style={{ padding: theme.spacing(2) }}>\n      <CreateCardTitleInput title={cardData.title ?? \"\"} setTitle={setTitle} />\n      <CreateCardKeyInput\n        encryptionKey={encryptionKey}\n        setEncryptionKey={setEncryptionKey}\n      />\n      <CreateCardDataSection\n        standardProposal={standardProposal}\n        setInitialData={setInitialData}\n      />\n      <div style={{ height: theme.spacing(2) }} />\n      {initialData !== \"\" && encryptionKey !== null && hasFailed && (\n        <Typography variant=\"body2\" color=\"error\" align=\"center\">\n          Key and data don't match\n        </Typography>\n      )}\n      <Button\n        fullWidth\n        variant=\"contained\"\n        disabled={hasFailed || encryptionKey.length === 0}\n        color=\"primary\"\n        size=\"small\"\n        startIcon={<Add />}\n        onClick={() => {\n          onSubmit(cardData);\n          setCardData(initialCardData);\n        }}\n      >\n        Open\n      </Button>\n      <Button fullWidth size=\"small\" onClick={onCancel}>\n        Cancel\n      </Button>\n    </div>\n  );\n}\n\ntype CreateCardTitleInputProps = {\n  title: string;\n  setTitle: (title: string) => void;\n};\nfunction CreateCardTitleInput({ title, setTitle }: CreateCardTitleInputProps) {\n  return (\n    <TextField\n      variant=\"outlined\"\n      margin=\"dense\"\n      fullWidth\n      label=\"Title\"\n      autoComplete=\"title\"\n      value={title}\n      onChange={(e) => setTitle(e.target.value)}\n      autoFocus\n    />\n  );\n}\n\ntype CreateCardKeyInputProps = {\n  encryptionKey: string;\n  setEncryptionKey: (encryptionKey: string) => void;\n};\nfunction CreateCardKeyInput({\n  encryptionKey,\n  setEncryptionKey,\n}: CreateCardKeyInputProps) {\n  return (\n    <DragAndDrop onDrop={(file) => readFile(file, setEncryptionKey)}>\n      <TextField\n        variant=\"outlined\"\n        margin=\"dense\"\n        error={encryptionKey.length > 0 && !isKeyValid(encryptionKey)}\n        required\n        fullWidth\n        label=\"Encryption Key\"\n        type=\"password\"\n        autoComplete=\"current-encryption-key\"\n        value={encryptionKey}\n        onChange={(e) => setEncryptionKey(e.target.value)}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Tooltip title=\"Generate key\" arrow>\n                <IconButton\n                  aria-label=\"generate encryption Key\"\n                  onClick={() => createKey().then(setEncryptionKey)}\n                >\n                  <Cached fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </InputAdornment>\n          ),\n        }}\n      />\n    </DragAndDrop>\n  );\n}\n\ntype CreateCardDataSectionProps = {\n  setInitialData: (initialData: string) => void;\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n};\nfunction CreateCardDataSection({\n  standardProposal,\n  setInitialData,\n}: CreateCardDataSectionProps) {\n  const theme = useTheme();\n  const [expanded, setExpanded] = useState(false);\n  const [dataOption, selectDataOption] = useState<DataOptions>(DataOptions.STANDARD);\n  const [encryptedData, setEncryptedData] = useState<string | null>(null);\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Typography variant=\"body1\">Data Options</Typography>\n        <IconButton\n          onClick={() => setExpanded((e) => !e)}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          {expanded ? <ExpandLess /> : <ExpandMore />}\n        </IconButton>\n      </div>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <FormLabel component=\"legend\">Initial Data</FormLabel>\n        <RadioGroup\n          aria-label=\"Initial data\"\n          value={dataOption}\n          onChange={(event) => {\n            const dataOption: DataOptions = (event.target as HTMLInputElement)\n              .value as DataOptions;\n            selectDataOption(dataOption);\n            switch (dataOption) {\n              case DataOptions.CUSTOM:\n                return setInitialData(encryptedData ?? \"\");\n              case DataOptions.EMPTY:\n                return setInitialData(\"{}\");\n              case DataOptions.STANDARD:\n                return setInitialData(standardProposal.data);\n            }\n          }}\n        >\n          <FormControlLabel\n            value={DataOptions.STANDARD}\n            control={<Radio size=\"small\" />}\n            label={`Standard v${standardProposal.version}`}\n          />\n          <FormControlLabel\n            value={DataOptions.EMPTY}\n            control={<Radio size=\"small\" />}\n            label=\"Empty\"\n          />\n          <FormControlLabel\n            value={DataOptions.CUSTOM}\n            control={<Radio size=\"small\" />}\n            label={\n              <span\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                }}\n              >\n                My own <span style={{ width: theme.spacing(1) }} />\n                <Tooltip\n                  title=\"Your encrypted data or a strigfied json\"\n                  placement=\"top\"\n                >\n                  <HelpOutline fontSize=\"inherit\" />\n                </Tooltip>\n              </span>\n            }\n          />\n        </RadioGroup>\n        {DataOptions.CUSTOM === dataOption && (\n          <DragAndDrop\n            onDrop={(file) =>\n              readFile(file, (data) => {\n                setEncryptedData(data);\n                if (dataOption === DataOptions.CUSTOM) {\n                  setInitialData(data);\n                }\n              })\n            }\n          >\n            <Button\n              component=\"label\"\n              fullWidth\n              style={{\n                textTransform: \"none\",\n                outlineWidth: 2,\n                outlineStyle: \"dashed\",\n                outlineColor: theme.palette.secondary.main,\n              }}\n              startIcon={encryptedData === null ? <GetApp /> : <Done />}\n            >\n              <input\n                hidden\n                type=\"file\"\n                onChange={(e) =>\n                  readFile(e.target.files?.[0], (data) => {\n                    setEncryptedData(data);\n                    if (dataOption === DataOptions.CUSTOM) {\n                      setInitialData(data);\n                    }\n                  })\n                }\n              />\n              {encryptedData === null ? (\n                <Typography variant=\"body1\">Drag or upload your data</Typography>\n              ) : (\n                <Typography variant=\"body1\">Done</Typography>\n              )}\n            </Button>\n          </DragAndDrop>\n        )}\n      </Collapse>\n    </>\n  );\n}\n\nfunction readFile(file: File | null | undefined, onDone: (reuslt: string) => void) {\n  if (!file) return;\n  const reader = new FileReader();\n  reader.onloadend = () => {\n    if (typeof reader.result === \"string\") {\n      onDone(reader.result);\n    }\n  };\n  reader.readAsText(file);\n}\n","import { ReactNode } from \"react\";\n\ntype Props = {\n  children: ReactNode;\n  onDrop(file: File | null | undefined): void;\n};\nexport default function DragAndDrop({ children, onDrop }: Props) {\n  return (\n    <div\n      onDrop={(event) => {\n        event.preventDefault();\n        onDrop(event.dataTransfer.files[0]);\n      }}\n      onDragOver={(event) => {\n        event.preventDefault();\n      }}\n      onDragEnter={(event) => {\n        event.preventDefault();\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n","import { Paper, Typography, useTheme } from \"@material-ui/core\";\nimport { useDataAsStore, useDataDecryption } from \"../../../utils/encryption\";\n\nimport CardInfo from \"./CardInfo\";\nimport CardView from \"./CardView\";\nimport { DecodedDataContext } from \"../useDecodedDataContext\";\nimport React from \"react\";\n\ntype Props = {\n  title?: string;\n  initialValues: {\n    encryptionKey: string;\n    initialData: string;\n  };\n};\nexport default function PreviewCardRoot({\n  title,\n  initialValues: { encryptionKey, initialData },\n}: Props) {\n  const theme = useTheme();\n  const { decryptedData, hasFailed } = useDataDecryption(initialData, encryptionKey);\n  const data = useDataAsStore(decryptedData, encryptionKey, title);\n  if (!data) {\n    return null;\n  }\n  const { store } = data;\n  return (\n    <DecodedDataContext.Provider value={{ store, updateNodes: null }}>\n      <Paper\n        style={{\n          position: \"relative\",\n          overflow: \"hidden\",\n          padding: theme.spacing(3),\n        }}\n      >\n        <div\n          style={{\n            backgroundColor: theme.palette.background.default,\n            opacity: 0.8,\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            zIndex: 1,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Typography variant=\"h3\">Preview</Typography>\n        </div>\n        <CardInfo />\n        <div style={{ height: theme.spacing(3) }} />\n        {!hasFailed ? (\n          <CardView nodeKey={store.rootNode.value} />\n        ) : (\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Data mismatch\n          </Typography>\n        )}\n      </Paper>\n    </DecodedDataContext.Provider>\n  );\n}\n","import { Add, Drafts, Mail } from \"@material-ui/icons\";\nimport CardRoot, { CardDataProps } from \"./cards/CardRoot\";\nimport {\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  useTheme,\n} from \"@material-ui/core\";\nimport React, { ReactNode, useState } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nimport MemoryVaultCreateForm from \"./create/MemoryVaultCreateForm\";\nimport PreviewCardRoot from \"./cards/PreviewCardRoot\";\nimport queryString from \"query-string\";\nimport { useLocation } from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\n\ntype MemoryPageResponse = {\n  standardProposal: {\n    version: string;\n    data: string;\n  };\n};\nconst QUERY = gql`\n  query MemoryPage {\n    standardProposal {\n      version\n      data\n    }\n  }\n`;\n\ntype CardItem = {\n  cardProps: CardDataProps;\n  id: string;\n  isOpen: boolean;\n  isReadOnly: boolean;\n};\nexport default function MemoryPage() {\n  const theme = useTheme();\n  const cardFromUrl = useCardFromUrl();\n  const [cards, setCards] = useState<CardItem[]>(cardFromUrl ? [cardFromUrl] : []);\n  const [previewCard, setPreviewCard] = useState<CardItem | null>(null);\n  const allCards = previewCard ? [previewCard, ...cards] : cards;\n  const [isCreating, setIsCreating] = useState(false);\n  const { data } = useQuery<MemoryPageResponse>(QUERY);\n  return (\n    <MemoryPageLayout\n      leftNav={\n        <>\n          {allCards.length > 0 && (\n            <>\n              <List component=\"nav\">\n                {allCards.map((card) => (\n                  <ListItem\n                    button\n                    key={card.cardProps.initialValues.encryptionKey}\n                    onClick={() =>\n                      setCards((oldCards) =>\n                        oldCards.map((c) =>\n                          card.id === c.id ? { ...c, isOpen: !c.isOpen } : c,\n                        ),\n                      )\n                    }\n                  >\n                    <ListItemIcon>\n                      {card.isOpen ? <Drafts /> : <Mail />}\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={\n                        card.cardProps.title !== \"\" ? card.cardProps.title : \"Title\"\n                      }\n                      primaryTypographyProps={{\n                        style: { overflow: \"hidden\", textOverflow: \"ellipsis\" },\n                      }}\n                      secondary={\n                        card.cardProps.initialValues.encryptionKey !== \"\"\n                          ? card.cardProps.initialValues.encryptionKey\n                          : \"key\"\n                      }\n                      secondaryTypographyProps={{\n                        style: { overflow: \"hidden\", textOverflow: \"ellipsis\" },\n                      }}\n                    />\n                  </ListItem>\n                ))}\n              </List>\n              <Divider />{\" \"}\n            </>\n          )}\n          <List component=\"nav\">\n            {isCreating && data ? (\n              <MemoryVaultCreateForm\n                standardProposal={data.standardProposal}\n                onChange={(card) => {\n                  setPreviewCard({\n                    cardProps: card,\n                    isOpen: true,\n                    id: \"preview\",\n                    isReadOnly: true,\n                  });\n                }}\n                onSubmit={(newCard) => {\n                  setIsCreating(false);\n                  setPreviewCard(null);\n                  setCards((old) => [\n                    {\n                      cardProps: newCard,\n                      isOpen: true,\n                      isReadOnly: false,\n                      id: uuid(),\n                    },\n                    ...old,\n                  ]);\n                }}\n                onCancel={() => {\n                  setIsCreating(false);\n                  setPreviewCard(null);\n                }}\n              />\n            ) : (\n              <ListItem button onClick={() => setIsCreating(true)}>\n                <ListItemIcon>\n                  <Add />\n                </ListItemIcon>\n                <ListItemText primary=\"Open\" />\n              </ListItem>\n            )}\n          </List>\n        </>\n      }\n      body={\n        <>\n          {previewCard && (\n            <>\n              <PreviewCardRoot {...previewCard.cardProps} />\n              <div style={{ height: theme.spacing(2) }} />\n            </>\n          )}\n          {cards\n            .filter((c) => c.isOpen)\n            .map((card) => (\n              <div key={card.id}>\n                <CardRoot\n                  {...card.cardProps}\n                  isReadOnly={card.isReadOnly}\n                  onClose={() => setCards(cards.filter((c) => card.id !== c.id))}\n                />\n                <div style={{ height: theme.spacing(2) }} />\n              </div>\n            ))}\n        </>\n      }\n    />\n  );\n}\ntype RouteParams = {\n  title?: string;\n  key?: string;\n  data?: string;\n  readOnly?: string;\n};\nfunction useCardFromUrl(): CardItem | null {\n  const { search } = useLocation();\n  const params: RouteParams = queryString.parse(search);\n  if (params.key == null || params.data == null) {\n    return null;\n  }\n  return {\n    id: uuid(),\n    isOpen: true,\n    isReadOnly: params.readOnly !== \"false\",\n    cardProps: {\n      title: params.title,\n      initialValues: {\n        encryptionKey: params.key.split(\" \").join(\"+\"),\n        initialData: params.data.split(\" \").join(\"+\"),\n      },\n    },\n  };\n}\nfunction MemoryPageLayout({\n  leftNav,\n  body,\n}: {\n  leftNav: ReactNode;\n  body: ReactNode;\n}) {\n  const theme = useTheme();\n  return (\n    <Grid container style={{ flex: 1 }}>\n      <Grid\n        item\n        xs={12}\n        sm={4}\n        md={3}\n        lg={2}\n        style={{\n          borderRightColor: theme.palette.divider,\n          borderRightWidth: 1,\n          borderRightStyle: \"solid\",\n        }}\n      >\n        {leftNav}\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sm={8}\n        md={9}\n        lg={10}\n        style={{\n          padding: theme.spacing(2),\n        }}\n      >\n        {body}\n      </Grid>\n    </Grid>\n  );\n}\n"],"sourceRoot":""}